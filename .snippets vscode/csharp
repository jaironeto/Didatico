/***************************************************************************************************/
//																C# Codigo
/***************************************************************************************************/
{
  "1                                                                                               ": {
	"prefix": "_C# 1.1",
		"body": [
			"class Program",
			"{",
			"    static async Task<int> Main(string[] args)",
			"    {",
			"        return await AsyncConsoleWork();",
			"    }",
			"",
			"    private static async Task<int> AsyncConsoleWork()",
			"    {",
			"        // main body here ",
			"        return 0;",
			"    }",
			"}",
		],
	"description": "Main declarado async"
	},

	"2  ": {
	"prefix": "_C# 1.2",
		"body": [
			"MyClass.TestMethod();",
			"MyNamespace.MyClass.MyMethod();",
			"",
			"public class MyClass",
			"{",
			"    public static void TestMethod()",
			"    {",
			"        Console.WriteLine('Hello World!');",
			"    }",
			"}",
			"",
			"namespace MyNamespace",
			"{",
			"    class MyClass",
			"    {",
			"        public static void MyMethod()",
			"        {",
			"            Console.WriteLine('Hello World from MyNamespace.MyClass.MyMethod!');",
			"        }",
			"    }",
			"}",
					],
	"description": "Instruição de nivel superior"
	},

	"3": {
	"prefix": "_C# 1.3",
			"body": [
				"public enum FileMode",
				"{",
				"    CreateNew = 1,",
				"    Create = 2,",
				"    Open = 3,",
				"    OpenOrCreate = 4,",
				"    Truncate = 5,",
				"    Append = 6,",
				"}",
						],
	"description": "Enum"
	},

	"4   ": {
	"prefix": "_C# 1.4",
				"body": [
				"System.Console.WriteLine('Hello World!');",
				"",
				"using System;",
				"Console.WriteLine('Hello World!');",
							],
	"description": "Diretiva using em ação eliminando o uso de System no codigo"
	},

	"5    ": {
	"prefix": "_C# 1.5",
					"body": [
					"namespace SampleNamespace",
					"{",
					"    class SampleClass",
					"    {",
					"        public void SampleMethod()",
					"        {",
					"            System.Console.WriteLine(",
					"                'SampleMethod inside SampleNamespace');",
					"        }",
					"    }",
					"}",
								],
	"description": "Namespace com chaves"
	},

	"6     ": {
	"prefix": "_C# 1.6",
		"body": [
		"namespace SampleNamespace;",
		"",
		"class AnotherSampleClass",
		"{",
		"    public void AnotherSampleMethod()",
		"    {",
		"       System.Console.WriteLine(",
		"            'SampleMethod inside SampleNamespace');",
		"    }",
		"}",
									],
	"description": "Namespace global"
	},

	"7      ": {
	"prefix": "_C# 1.7",
			"body": [
				"public class Person",
				"{",
				"    public required string LastName { get; set; }",
				"    public required string FirstName { get; set; }",
				"}",
				"",
				"var p1 = new Person(); // Error! Required properties not set",
				"var p2 = new Person() { FirstName = 'Grace', LastName = 'Hopper' };",
										],
	"description": "Propriedade auto-implementada com required e inicializador de objeto"
	},


	"8       ": {
	"prefix": "_C# 1.8",
		"body": [
			"public class Container(int capacity)",
			"{",
			"    private int _capacity = capacity;",
			"}",
				],
	"description": "Classe com construtor primario"
	},


	"9        ": {
	"prefix": "_C# 1.9",
			"body": [
				"public record Person(string FirstName, string LastName);",
				"",
				"public static class Program",
				"{",
				"    public static void Main()",
				"    {",
				"        Person person = new('Nancy', 'Davolio');",
				"        Console.WriteLine(person);",
				"        // output: Person { FirstName = Nancy, LastName = Davolio }",
				"    }",
				"",
				"}",				
						],
	"description": "Uso simples de record"
	},

	"10         ": {
	"prefix": "_C# 2.1",
			"body": [
				"public record Person(string FirstName, string LastName)",
				"{",
				"    public required string[] PhoneNumbers { get; init; }",
				"}",
				"",
				"public class Program",
				"{",
				"    public static void Main()",
				"    {",
				"        Person person1 = new('Nancy', 'Davolio') { PhoneNumbers = new string[1] };",
				"        Console.WriteLine(person1);",
				"        // output: Person { FirstName = Nancy, LastName = Davolio, PhoneNumbers = System.String[] }",
				"",
				"        Person person2 = person1 with { FirstName = 'John' };",
				"        Console.WriteLine(person2);",
				"        // output: Person { FirstName = John, LastName = Davolio, PhoneNumbers = System.String[] }",
				"        Console.WriteLine(person1 == person2); // output: False",
				"",
				"        person2 = person1 with { PhoneNumbers = new string[1] };",
				"        Console.WriteLine(person2);",
				"        // output: Person { FirstName = Nancy, LastName = Davolio, PhoneNumbers = System.String[] }",
				"        Console.WriteLine(person1 == person2); // output: False",
				"",
				"        person2 = person1 with { };",
				"        Console.WriteLine(person1 == person2); // output: True",
				"    }",
				"}",		
						],
	"description": "Uso record com with"
	},

	"11          ": {
	"prefix": "_C# 2.2",
		"body": [
			"public record Person(string FirstName, string LastName)",
			"{",
			"    public required string[] PhoneNumbers { get; init; }",
			"}",
			"",
			"public class Program",
			"{",
			"    public static void Main()",
			"    {",
			"        Person person1 = new('Nancy', 'Davolio') { PhoneNumbers = new string[1] };",
			"        Console.WriteLine(person1);",
			"        // output: Person { FirstName = Nancy, LastName = Davolio, PhoneNumbers = System.String[] }",
			"",
			"        Person person2 = person1 with { FirstName = 'John' };",
			"        Console.WriteLine(person2);",
			"        // output: Person { FirstName = John, LastName = Davolio, PhoneNumbers = System.String[] }",
			"        Console.WriteLine(person1 == person2); // output: False",
			"",
			"        person2 = person1 with { PhoneNumbers = new string[1] };",
			"        Console.WriteLine(person2);",
			"        // output: Person { FirstName = Nancy, LastName = Davolio, PhoneNumbers = System.String[] }",
			"        Console.WriteLine(person1 == person2); // output: False",
			"",
			"        person2 = person1 with { };",
			"        Console.WriteLine(person1 == person2); // output: True",
			"    }",
			"}",						
			],
	"description": "Uso record mais complicadinho"
	},

	"12                                                                                          ": {
	"prefix": "_C# 2.3",
			"body": [
				"var v = new { Amount = 108, Message = 'Hello' };",
				"",
				"Console.WriteLine(v.Amount + v.Message);",
				],
	"description": "Tipo anonimo"
		},

	"13           ": {
	"prefix": "_C# 2.4",
		"body": [
			"var product = new Product();",
			"var bonus = new { note = 'You won!' };",
			"var shipment = new { address = 'Nowhere St.', product };",
			"var shipmentWithBonus = new { address = 'Somewhere St.', product, bonus };",
			],
	"description": "Tipo anonimo com um membro mais complexo"
	},

	"14            ": {
	"prefix": "_C# 2.5",
		"body": [
			"var anonArray = new[] { new { name = 'apple', diam = 4 }, new { name = 'grape', diam = 1 }}"
			],
	"description": "Matriz com tipo anonimo"
	},

	"15                                                                                            ": {
	"prefix": "_C# 2.6",
		"body": [
			"var apple = new { Item = '0apples', Price = 1.35 };",
			"var onSale = apple with { Price = 0.79 };",
			"Console.WriteLine(apple);",
			"Console.WriteLine(onSale);",
			],
	"description": "Mutação com with em tipo anonimo"
	},

	"16             ": {
	"prefix": "_C# 2.7",
		"body": [
			"using System;",
			"",
			"namespace Example",
			"{",
			"    public struct Person",
			"    {",
			"        public string Name;",
			"        public int Age;",
			"        public Person(string name, int age)",
			"        {",
			"            Name = name;",
			"            Age = age;",
			"        }",
			"    }",
			"",
			"    public class Application",
			"    {",
			"        static void Main()",
			"        {",
			"            // Crie uma instância de struct e inicialize usando 'new'.",
			"            // A memória é alocada na pilha de threads",
			"            Person p1 = new Person('Alex', 9);",
			"            Console.WriteLine('p1 Name = {0} Age = {1}', p1.Name, p1.Age);",
			"",
			"            // cria um novo objeto struct. Observe que struct pode ser inicializado",
			"            // sem usar 'novo'.",
			"            Person p2 = p1;",
			"",
			"            // Assign values to p2 members.",
			"            p2.Name = 'Spencer';",
			"            p2.Age = 7;",
			"            Console.WriteLine('p2 Name = {0} Age = {1}', p2.Name, p2.Age);",
			"",
			"            // p1 values remain unchanged because p2 is  copy.",
			"            Console.WriteLine('p1 Name = {0} Age = {1}', p1.Name, p1.Age);",
			"        }",
			"    }",
			"",
			"        Output:",
			"        p1 Name = Alex Age = 9",
			"        p2 Name = Spencer Age = 7",
			"        p1 Name = Alex Age = 9",
			"",    
			" }",						
			],
	"description": "Criando uma struct com new e tambem a partir de um objeto struct ja criado sem usar new"
	},

	"17              ": {
	"prefix": "_C# 2.8",
		"body": [
			"public class Shape",
			"{",
			"    // A few example members",
			"    public int X { get; private set; }",
			"    public int Y { get; private set; }",
			"    public int Height { get; set; }",
			"    public int Width { get; set; }",
			"",
			"    // Virtual method",
			"    public virtual void Draw()",
			"    {",
			"        Console.WriteLine('Performing base class drawing tasks');",
			"    }",
			"}",
			"",
			"public class Circle : Shape",
			"{",
			"    public override void Draw()",
			"    {",
			"        // Code to draw a circle...",
			"        Console.WriteLine('Drawing a circle');",
			"        base.Draw();",
			"    }",
			"}",
			"public class Rectangle : Shape",
			"{",
			"    public override void Draw()",
			"    {",
			"        // Code to draw a rectangle...",
			"        Console.WriteLine('Drawing a rectangle');",
			"        base.Draw();",
			"    }",
			"}",
			"public class Triangle : Shape",
			"{",
			"    public override void Draw()",
			"    {",
			"        // Code to draw a triangle...",
			"        Console.WriteLine('Drawing a triangle');",
			"        base.Draw();",
			"    }",
			"}",			
			],
	"description": "Override em metodo virtual"
	},

	"18               ": {
	"prefix": "_C# 2.9",
		"body": [
			"public class BaseClass",
			"{",
			"    public void DoWork() { WorkField++; }",
			"    public int WorkField;",
			"    public int WorkProperty",
			"    {",
			"        get { return 0; }",
			"    }",
			"}",
			"",
			"public class DerivedClass : BaseClass",
			"{",
			"    public new void DoWork() { WorkField++; }",
			"    public new int WorkField;",
			"    public new int WorkProperty",
			"    {",
			"        get { return 0; }",
			"    }",
			"}",						
			],
	"description": "Ocultar membro com new"
	},

	"19                ": {
	"prefix": "_C# 3.1",
		"body": [
			"DerivedClass B = new DerivedClass();",
			"B.DoWork();  // Calls the new method.",
			"",
			"BaseClass A = (BaseClass)B;",
			"A.DoWork();  // Calls the old method.",
			],
	"description": "Membro ocultado com new sendo convertido para chamar o metodo da classe base que foi ocultado"
	},

	"20                 ": {
	"prefix": "_C# 3.2",
		"body": [
			"public class A",
			"{",
    	"public virtual void DoWork() { }",
			"}",
			"public class B : A",
			"{",
    	"public override void DoWork() { }",
			"}",		
			"",
			"public class C : B",
			"{",
    	"public sealed override void DoWork() { }",
			"}",
			],
	"description": "Polimorfismo e selead"
	},

	"21                  ": {
	"prefix": "_C# 3.3",
		"body": [
			"public class Base",		
			"{",		
			"    public virtual void DoWork() {////}",		
			"}",		
			"public class Derived : Base",		
			"{",		
			"    public override void DoWork()",		
			"    {",		
			"        //Perform Derived's work here",		
			"        //...",		
			"        // Call DoWork on base class",		
			"        base.DoWork();",		
			"    }",		
			"}",						
			],
	"description": "Usando base palavra chave"
	},

	"22                   ": {
	"prefix": "_C# 3.4",
		"body": [
			"public class Example",
			"{",
			"    public static void Main()",
			"    {",
			"        var result = QueryCityData('New York City');",
			"",
			"        var city = result.Item1;",
			"        var pop = result.Item2;",
			"        var size = result.Item3;",
			"",
			"         // Do something with the data.",
			"    }",
			"",
			"    private static (string, int, double) QueryCityData(string name)",
			"    {",
			"        if (name == 'New York City)",
			"            return (name, 8175133, 468.48);",
			"",
			"        return ('', 0, 0);",
			"    }",
			"}",		
			"",
			"",
			"public static void Main()",
			"{",
			"    (string city, int population, double area) = QueryCityData(''New York City'');",
			"",
			"    // Do something with the data.",
			"}",
			"",
			"///////////////////////////////////////////////////////////////",
			"",
			"public static void Main()",
			"{",
			"    var (city, population, area) = QueryCityData('New York City');",
			"",
			"    // Do something with the data.",
			"}",
			"",
			"///////////////////////////////////////////////////////////////",
			"",
			"public static void Main()",
			"{",
			"    string city = 'Raleigh';",
			"    int population = 458880;",
			"",
			"    (city, population, double area) = QueryCityData('New York City');",
			"",
			"    // Do something with the data.",
			"}",
			],
	"description": "Usando tupla +1 forma"
	},

	"23                    ": {
	"prefix": "_C# 3.5",
		"body": [
			"using System;",
			"",
			"public class ExampleDiscard",
			"{",
			"    public static void Main()",
			"    {",
			"        var (_, _, _, pop1, _, pop2) = QueryCityDataForYears('New York City', 1960, 2010);",
			"",
			"       Console.WriteLine($'Population change, 1960 to 2010: {pop2 - pop1:N0}');",
			"    }",
			"",
			"    private static (string, double, int, int, int, int) QueryCityDataForYears(string name, int year1, int year2)",
			"    {",
			"        int population1 = 0, population2 = 0;",
			"        double area = 0;",
			"",
			"        if (name == 'New York City')",
			"        {",
			"            area = 468.48;",
			"            if (year1 == 1960)",
			"            {",
			"                population1 = 7781984;",
			"            }",
			"            if (year2 == 2010)",
			"            {",
			"                population2 = 8175133;",
			"            }",
			"            return (name, area, year1, population1, year2, population2);",
			"        }",
			"",
			"       return ('', 0, 0, 0, 0, 0);",
			"    }",
			"}",
			"// The example displays the following output:",
			"//      Population change, 1960 to 2010: 393,149",

			],
	"description": "Desconstruindo tupla"
	},

	"24                     ": {
	"prefix": "_C# 3.6",
		"body": [
			"using System;",
			"",
			"public class Person",
			"{",
			"    public string FirstName { get; set; }",
			"    public string MiddleName { get; set; }",
			"    public string LastName { get; set; }",
			"    public string City { get; set; }",
			"    public string State { get; set; }",
			"",
			"    public Person(string fname, string mname, string lname,",
			"                  string cityName, string stateName)",
			"    {",
			"        FirstName = fname;",
			"        MiddleName = mname;",
			"        LastName = lname;",
			"        City = cityName;",
			"        State = stateName;",
			"    }",
			"",
			"    // Return the first and last name.",
			"    public void Deconstruct(out string fname, out string lname)",
			"    {",
			"        fname = FirstName;",
			"        lname = LastName;",
			"    }",
			"",
			"    public void Deconstruct(out string fname, out string mname, out string lname)",
			"    {",
			"        fname = FirstName;",
			"        mname = MiddleName;",
			"        lname = LastName;",
			"    }",
			"",
			"    public void Deconstruct(out string fname, out string lname,",
			"                            out string city, out string state)",
			"    {",
			"        fname = FirstName;",
			"        lname = LastName;",
			"        city = City;",
			"        state = State;",
			"    }",
			"}",
			"",
			"public class ExampleClassDeconstruction",
			"{",
			"    public static void Main()",
			"    {",
			"        var p = new Person('John', 'Quincy', 'Adams', 'Boston', 'MA');",
			"",
			"        // Deconstruct the person object.",
			"        var (fName, lName, city, state) = p;",
			"        Console.WriteLine($'Hello {fName} {lName} of {city}, {state}!');",
			"    }",
			"}",
			"// The example displays the following output:",
			"//    Hello John Adams of Boston, MA!",
			],
	"description": "Desconstruindo tupla com Desconstruct metodo"
	},

	"25                      ": {
	"prefix": "_C# 3.7",
		"body": [
			"class Person",
			"{",
			"    public string Name { get; set; }",
			"   public int Age { get; set; }",
			"",
			"    public override string ToString()",
			"    {",
			"        return 'Person: ' + Name + ' ' + Age;'",
			"    }",
			"}",						
			],
	"description": "Override metodo toString() object"
	},

	"26                       ": {
	"prefix": "_C# 3.8",
		"body": [
			"public abstract class A",
			"{",
			"    public abstract void DoWork(int i);",
			"}",							
			],
	"description": "Classe e metodo abstract"
	},

	"27                        ": {
	"prefix": "_C# 3.9",
		"body": [
			"// compile with: -target:library",
			"public class D",
			"{",
			"    public virtual void DoWork(int i)",
			"    {",
			"        // Original implementation.",
			"    }",
			"}",
			"",
			"public abstract class E : D",
			"{",
			"    public abstract override void DoWork(int i);",
			"}",
			"",
			"public class F : E",
			"{",
			"    public override void DoWork(int i)",
			"    {",
			"       // New implementation.",
			"    }",
			"}",						
			],
	"description": "Classe abstract transformando um metodo virtual em abstract"
	},

	"28                         ": {
	"prefix": "_C# 4.1",
		"body": [
			"public class D : C",
			"{",
			"    public sealed override void DoWork() { }",
			"}",
			],
	"description": "Acabando com a herança virtual com selead"
	},

	"29                          ": {
	"prefix": "_C# 4.2",
		"body": [
			"public sealed class D : C",
			"{",
    		"public sealed override void DoWork() { }",
			"    // Class members here.",
			"}",
			],
	"description": "Classe e metodo selead"
	},

	"30                           ": {
	"prefix": "_C# 4.3",
		"body": [
			"class Calendar2",
			"{",	
			"    public const int Months = 12, Weeks = 52, Days = 365;",
			"}",
			"",
			"int birthstones = Calendar.Months;",
			],
	"description": "Criar e acessar uma constante"
	},

	"31                            ": {
	"prefix": "_C# 4.4",
		"body": [
			"// compile with: csc -target:library abstractshape.cs",
			"public abstract class Shape",
			"{",
			"    private string name;",
			"",
			"    public Shape(string s)",
			"    {",
			"        // calling the set accessor of the Id property.",
			"        Id = s;",
			"   }",
			"",
			"    public string Id",
			"   {",
			"        get",
			"        {",
			"            return name;",
			"        }",
			"",
			"        set",
			"        {",
			"            name = value;",
			"        }",
			"    }",
			"",
			"    // Area is a read-only property - only a get accessor is needed:",
			"    public abstract double Area",
			"    {",
			"        get;",
			"    }",
			"",
			"    public override string ToString()",
			"    {",
			"        return $'{Id} Area = {Area:F2}'';",
			"    }",
			"}",			
			"",
			"",
			"public class Square : Shape",
			"{",
			"   private int side;",
			"",
			"    public Square(int side, string id)",
			"        : base(id)",
			"    {",
			"        this.side = side;",
			"    }",
			"",
			"    public override double Area",
			"    {",
			"        get",
			"        {",
			"            // Given the side, return the area of a square:",
			"            return side * side;",
			"        }",
			"    }",
			"}",
			],
	"description": "Classe abstract"
	},

	"32                             ": {
	"prefix": "_C# 4.5",
		"body": [
			"static class Constants",
			"{",
			"    public const double Pi = 3.14159;",
			"    public const int SpeedOfLight = 300000; // km per sec.",
			"}",
			"",
			"class Program",
			"{",
			"    static void Main()",
			"    {",
			"        double radius = 5.3;",
			"        double area = Constants.Pi * (radius * radius);",
			"        int secsFromSun = 149476000 / Constants.SpeedOfLight; // in km",
			"        Console.WriteLine(secsFromSun);",
			"    }",
			"}",
			],
	"description": "Class constante"
	},

	"33                              ": {
	"prefix": "_C# 4.6",
		"body": [
			"using System;",
			"",
			"public class ",
			"{",
			"    // Declaração de um campo readonly e static",
			"    public static readonly int Numero = 10;",
			"}",
			"",
			"class Program",
			"{",
			"    static void Main(string[] args)",
			"    {",
			"       // Acesso ao campo readonly e static",
			"        Console.WriteLine(MyClass.Numero); // Saída: 10",
			"",
			"        // Tentativa de modificar o valor do campo (não é possível, pois é readonly)",
			"        // MyClass.Numero = 20; // Isso resultará em um erro de compilação",
			"    }",
			"}",						
			],
	"description": "Campo static reandoly"
	},

	"34                               ": {
	"prefix": "_C# 4.7",
		"body": [
			"public class TimePeriod",
			"{",
			"    private double _seconds;",
			"",
			"    public double Hours",
			"    {",
			"        get { return _seconds / 3600; }",
			"        set",
			"        {",
			"            if (value < 0 || value > 24)",
			"                throw new ArgumentOutOfRangeException(nameof(value),",
			"                     'The valid range is between 0 and 24.');",
			"",
			"            _seconds = value * 3600;",
			"        }",
			"    }",
			"}",						
			],
	"description": "Propriedade"
	},

	"35                                ": {
	"prefix": "_C# 4.8",
		"body": [
			"public class Person",
			"{",
			"    private string _firstName;",
			"    private string _lastName;",
			"",
			"    public Person(string first, string last)",
			"    {",
			"        _firstName = first;",
			"        _lastName = last;",
			"    }",
			"",
			"    public string Name => $'{_firstName} {_lastName}';",
			"}",						
			],
	"description": "Sintaxe simples para propriedade somente leitura com membro apto de expressao"
	},

	"36                                 ": {
	"prefix": "_C# 4.9",
		"body": [
			"public class SaleItem",
			"{",
			"    string _name;",
			"    decimal _cost;",
			"",
			"    public SaleItem(string name, decimal cost)",
			"    {",
			"        _name = name;",
			"        _cost = cost;",
			"    }",
			"",
			"    public string Name",
			"    {",
			"        get => _name;",
			"        set => _name = value;",
			"    }",
			"",
			"    public decimal Price",
			"    {",
			"        get => _cost;",
			"        set => _cost = value;",
			"    }",
			"}",						
			],
	"description": "Propriedade com membro apto de expressao"
	},

	"37                                  ": {
	"prefix": "_C# 5.1",
		"body": [
			"public class SaleItem",
			"{",	
			"    public string Name",
			"    { get; set; }",
			"",
			"    public decimal Price",
			"   { get; set; }",
			"}",						
			],
	"description": "Propriedade auto-implementada"
	},

	"38                                   ": {
	"prefix": "_C# 5.2",
		"body": [
			"public class SaleItem",
			"{",
			"    public required string Name",
			"    { get; set; }",
			"",
			"    public required decimal Price",
			"    { get; set; }",
			"}",
			],
	"description": "Propriedade auto-implementada required"
	},

	"39                                    ": {
	"prefix": "_C# 5.3",
		"body": [
			"interface IEmployee",
			"{",
			"    string Name",
			"    {",
			"        get;",
			"        set;",
			"    }",
			"",
			"    int Counter",
			"    {",
			"        get;",
			"    }",
			"}",
			"",
			"public class Employee : IEmployee",
			"{",
			"    public static int numberOfEmployees;",
			"",
			"   private string _name;",
			"    public string Name  // read-write instance property",
			"    {",
			"        get => _name;",
			"        set => _name = value;",
			"   }",
			"",
			"    private int _counter;",
			"    public int Counter  // read-only instance property",
			"    {",
			"        get => _counter;",
			"    }",
			"",
			"    // constructor",
			"    public Employee() => _counter = ++numberOfEmployees;",
			"}",

			],
	"description": "Propriedade em interface"
	},

	"40                                     ": {
	"prefix": "_C# 5.4",
		"body": [
			"private string _name = 'Hello';",
			"",
			"public string Name",
			"{",
			"    get",
			"    {",
			"        return _name;",
			"    }",
			"    protected set",
			"    {",
			"        _name = value;",
			"    }",
			"}",						
			],
	"description": "Acessador propriedade com modificador de acesso"
	},

	"41                                      ": {
	"prefix": "_C# 5.5",
		"body": [
			"public string FirstName { get; set; } = 'Jane';",
			],
	"description": "Inicializar propriedade auto-implementada"
	},

	"42                                       ": {
	"prefix": "_C# 5.6",
		"body": [
			"public ref double GetEstimatedDistance()",
			"{",
			"    return ref estDistance;",
			"}",
			],
	"description": "Retornar valor por ref"
	},

	"43                                        ": {
	"prefix": "_C# 5.7",
		"body": [
			"ref double distance = ref Planet.GetEstimatedDistance();",
			],
	"description": "Usar uma ref local"
	},

	"44                                         ": {
	"prefix": "_C# 5.8",
		"body": [
			"class Program",
			"{",
			"    static Task Main() => DoSomethingAsync();",
			"",
			"    static async Task DoSomethingAsync()",
			"    {",
			"        Task<int> delayTask = DelayAsync();",
			"        int result = await delayTask;",
			"",
			"        // The previous two statements may be combined into",
			"        // the following statement.",
			"        //int result = await DelayAsync();",
			"",
			"        Console.WriteLine($'Result: {result}');",
			"    }",
			"",
			"    static async Task<int> DelayAsync()",
			"    {",
			"        await Task.Delay(100);",
			"        return 5;",
			"    }",
			"}",
			"// Example output:",
			"//   Result: 5",			
			],
	"description": "Metodo async"
	},

	"45                                          ": {
	"prefix": "_C# 5.9",
		"body": [
			"namespace ExtensionMethods",
			"{",
			"    public static class MyExtensions",
			"    {",
			"        public static int WordCount(this string str)",
			"        {",
			"            return str.Split(new char[] { ' ', '.', '?' },",
			"                             StringSplitOptions.RemoveEmptyEntries).Length;",
			"        }",
			"    }",
			"}",
			"",
			"",
			"using ExtensionMethods;",
			"",
			"string s = 'Hello Extension Methods';",
			"int i = s.WordCount();",
			],
	"description": "Metodo de extensao"
	},

	"46                                           ": {
	"prefix": "_C# 6.1",
		"body": [
			"class Car",
			"{",
			"    ~Car()  // finalizer",
			"    {",
			"        // cleanup statements...",
			"    }",
			"}",						
			],
	"description": "Finalizador"
	},

	"47                                            ": {
	"prefix": "_C# 6.2",
		"body": [
			"// A skeleton of a C# program",
			"using System;",
			"",
			"// Your program starts here:",
			"Console.WriteLine('Hello world!');",
			"",
			"namespace YourNamespace",
			"{",
			"    class YourClass",
			"    {",
			"    }",
			"",
			"    struct YourStruct",
			"    {",
			"    }",
			"",
			"    interface IYourInterface",
			"    {",
			"    }",
			"",
			"    delegate int YourDelegate();",
			"",
			"    enum YourEnum",
			"    {",
			"    }",
			"",
			"    namespace YourNestedNamespace",
			"    {",
			"        struct YourStruct",
			"        {",
			"        }",
			"    }",
			"}",
			],
	"description": "Um namespace dentro aninhado em outro namespace"
	},

	"48                                             ": {
	"prefix": "_C# 6.3",
		"body": [
			"class Program",
			"{",
			"    static async Task<int> Main(string[] args)",
			"    {",
			"        return await AsyncConsoleWork();",
			"    }",
			"",
			"    private static async Task<int> AsyncConsoleWork()",
			"    {",
			"        // main body here ",
			"        return 0;",
			"    }",
			"}",
			],
	"description": "Main async return"
	},

	"49                                              ": {
	"prefix": "_C# 6.4",
		"body": [
			"public record Person(string FirstName, string LastName);",
			"",
			"public static class Program",
			"{",
			"    public static void Main()",
			"    {",
			"        Person person = new('Nancy', 'Davolio');",
			"        Console.WriteLine(person);",
			"        // output: Person { FirstName = Nancy, LastName = Davolio }",
			"    }",
			"",
			"}",						
			],
	"description": "Record simples"
	},

	"50                                               ": {
	"prefix": "_C# 6.5",
		"body": [
			"public record Person(string FirstName, string LastName)",
			"{",
			"    public required string[] PhoneNumbers { get; init; }",
			"}",
			"",
			"public class Program",
			"{",
			"    public static void Main()",
			"    {",
			"        Person person1 = new('Nancy', 'Davolio') { PhoneNumbers = new string[1] };",
			"        Console.WriteLine(person1);",
			"        // output: Person { FirstName = Nancy, LastName = Davolio, PhoneNumbers = System.String[] }",
			"",
			"        Person person2 = person1 with { FirstName = 'John' };",
			"        Console.WriteLine(person2);",
			"        // output: Person { FirstName = John, LastName = Davolio, PhoneNumbers = System.String[] }",
			"        Console.WriteLine(person1 == person2); // output: False",
			"",
			"        person2 = person1 with { PhoneNumbers = new string[1] };",
			"        Console.WriteLine(person2);",
			"        // output: Person { FirstName = Nancy, LastName = Davolio, PhoneNumbers = System.String[] }",
			"        Console.WriteLine(person1 == person2); // output: False",
			"",
			"        person2 = person1 with { };",
			"        Console.WriteLine(person1 == person2); // output: True",
			"    }",
			"}",
			],
	"description": "Record com propriedade required"
	},

	"51                                                ": {
	"prefix": "_C# 6.6",
		"body": [
			"using System;",
			"",
			"public class Person",
			"{",
			"    public string Name { get; set; }",
			"    public int Age { get; set; }",
			"    public Person(string name, int age)",
			"    {",
			"        Name = name;",
			"        Age = age;",
			"    }",
			"    // Other properties, methods, events...",
			"}",
			"",
			"class Program",
			"{",
			"    static void Main()",
			"    {",
			"        Person person1 = new Person('Leopold', 6);",
			"        Console.WriteLine('person1 Name = {0} Age = {1}', person1.Name, person1.Age);",
			"",
			"        // Declare new person, assign person1 to it.",
			"        Person person2 = person1;",
			"",
			"        // Change the name of person2, and person1 also changes.",
			"        person2.Name = 'Molly';",
			"        person2.Age = 16;",
			"",
			"        Console.WriteLine('person2 Name = {0} Age = {1}', person2.Name, person2.Age);",
			"        Console.WriteLine('person1 Name = {0} Age = {1}', person1.Name, person1.Age);",
			"    }",
			"}",
			"/*",
			"    Output:",
			"    person1 Name = Leopold Age = 6",
			"    person2 Name = Molly Age = 16",
			"    person1 Name = Molly Age = 16",
			"*/",
			],
	"description": "Codigo simples e basico com uma class, construtor e propriedades"
	},

	"52                                                 ": {
	"prefix": "_C# 6.7",
		"body": [
			"public class BaseClass",
			"{",
			"    public void DoWork() { WorkField++; }",
			"    public int WorkField;",
			"    public int WorkProperty",
			"    {",
			"        get { return 0; }",
			"    }",
			"}",
			"",
			"public class DerivedClass : BaseClass",
			"{",
			"    public new void DoWork() { WorkField++; }",
			"    public new int WorkField;",
			"    public new int WorkProperty",
			"    {",
			"        get { return 0; }",
			"    }",
			"}",						
			],
	"description": "Uso do modificador new em metodos nao virtuais"
	},

	"53                                                  ": {
	"prefix": "_C# 6.8",
		"body": [
			"class Person",
			"{",
			"    public string Name { get; set; }",
			"    public int Age { get; set; }",
			"",
			"    public override string ToString()",
			"    {",
			"        return 'Person: ' + Name + ' ' + Age;'",
			"    }",
			"}",						
			],
	"description": "Substituir metodo toString()"
	},

	"54                                                   ": {
	"prefix": "_C# 6.9",
		"body": [
			"// compile with: -target:library",
			"public class D",
			"{",
			"    public virtual void DoWork(int i)",
			"    {",
			"        // Original implementation.",
			"    }",
			"}",
			"",
			"public abstract class E : D",
			"{",
			"    public abstract override void DoWork(int i);",
			"}",
			"",
			"public class F : E",
			"{",
			"    public override void DoWork(int i)",
			"    {",
			"        // New implementation.",
			"    }",
			"}",						
			],
	"description": "Abstract herdando de uma classe e transformando um metodo virtual em abstract, para depois quem herdar do metodo abstract dar override"
	},

	"55                                                    ": {
	"prefix": "_C# 7.1",
		"body": [
			"switch (selection)",
			"        {",
			"            case '1':",
			"                Console.Write('Please enter the Celsius temperature: ');",
			"                F = TemperatureConverter.CelsiusToFahrenheit(Console.ReadLine() ?? '0');",
			"                Console.WriteLine(''Temperature in Fahrenheit: {0:F2}'', F);",
			"                break;",
			"",
			"            case ''2'':",
			"                Console.Write(''Please enter the Fahrenheit temperature: '');",
			"                C = TemperatureConverter.FahrenheitToCelsius(Console.ReadLine() ?? ''0'');",
			"                Console.WriteLine(''Temperature in Celsius: {0:F2}'', C);",
			"                break;",
			"",
			"            default:",
			"                Console.WriteLine(''Please select a convertor.'');",
			"                break;",
			"        }",
			"",						
			],
	"description": "switch"
	},

	"56                                                     ": {
	"prefix": "_C# 7.2",
		"body": [
			"public class Automobile",
			"{",
			"    public static int NumberOfWheels = 4;",
			"",
			"    public static int SizeOfGasTank",
			"    {",
			"        get",
			"        {",
			"            return 15;",
			"        }",
			"    }",
			"",
			"    public static void Drive() { }",
			"",
			"    public static event EventType? RunOutOfGas;",
			"",
			"    // Other non-static fields and properties...",
			"}",						
			],
	"description": "Campo, propriedade e metodo static"
	},

	"57                                                      ": {
	"prefix": "_C# 7.3",
		"body": [
			"class Calendar3",
			"{",
			"    public const int Months = 12;",
			"    public const int Weeks = 52;",
			"    public const int Days = 365;",
			"",
			"    public const double DaysPerWeek = (double) Days / (double) Weeks;",
			"    public const double DaysPerMonth = (double) Days / (double) Months;",
			"}",						
			],
	"description": "Campos const"
	},

	"58                                                       ": {
	"prefix": "_C# 7.4",
		"body": [
			"// compile with: csc -target:library abstractshape.cs",
			"public abstract class Shape",
			"{",
			"    private string name;",
			"",
			"    public Shape(string s)",
			"    {",
			"        // calling the set accessor of the Id property.",
			"        Id = s;",
			"    }",
			"",
			"    public string Id",
			"    {",
			"        get",
			"        {",
			"            return name;",
			"        }",
			"",
			"        set",
			"        {",
			"            name = value;",
			"        }",
			"    }",
			"",
			"    // Area is a read-only property - only a get accessor is needed:",
			"    public abstract double Area",
			"    {",
			"        get;",
			"    }",
			"",
			"    public override string ToString()",
			"    {",
			"        return $''{Id} Area = {Area:F2}'';",
			"    }",
			"}",
			"",
			"",
			"",
			"// compile with: csc -target:library -reference:abstractshape.dll shapes.cs",
			"public class Square : Shape",
			"{",
			"    private int side;",
			"",
			"    public Square(int side, string id)",
			"        : base(id)",
			"    {",
			"        this.side = side;",
			"    }",
			"",
			"    public override double Area",
			"    {",
			"        get",
			"        {",
			"            // Given the side, return the area of a square:",
			"            return side * side;",
			"        }",
			"    }",
			"}",
			"",
			"public class Circle : Shape",
			"{",
			"    private int radius;",
			"",
			"    public Circle(int radius, string id)",
			"        : base(id)",
			"    {",
			"        this.radius = radius;",
			"    }",
			"",
			"    public override double Area",
			"    {",
			"        get",
			"        {",
			"            // Given the radius, return the area of a circle:",
			"            return radius * radius * System.Math.PI;",
			"        }",
			"    }",
			"}",
			"",
			"public class Rectangle : Shape",
			"{",
			"    private int width;",
			"    private int height;",
			"",
			"    public Rectangle(int width, int height, string id)",
			"        : base(id)",
			"    {",
			"        this.width = width;",
			"        this.height = height;",
			"    }",
			"",
			"    public override double Area",
			"    {",
			"        get",
			"        {",
			"            // Given the width and height, return the area of a rectangle:",
			"            return width * height;",
			"        }",
			"    }",
			"}",						
			],
	"description": "Classe base abstract com propriedade abstract que entao sera override por classes derivadas"
	},

	"59                                                        ": {
	"prefix": "_C# 7.5",
		"body": [
			"public class Employee",
			"{",
			"    private string _name;",
			"    public string Name",
			"    {",
			"        get => _name;",
			"        set => _name = value;",
			"    }",
			"}",
			"",
			"public class Manager : Employee",
			"{",
			"    private string _name;",
			"",
			"    // Notice the use of the new modifier:",
			"    public new string Name",
			"    {",
			"        get => _name;",
			"        set => _name = value + '', Manager'';",
			"    }",
			"}",
			"",
			"class TestHiding",
			"{",
			"    public static void Test()",
			"    {",
			"        Manager m1 = new Manager();",
			"",
			"        // Derived class property.",
			"        m1.Name = ''John'';",
			"",
			"        // Base class property.",
			"        ((Employee)m1).Name = ''Mary'';",
			"",
			"        System.Console.WriteLine(''Name in the derived class is: {0}'', m1.Name);",
			"        System.Console.WriteLine(''Name in the base class is: {0}'', ((Employee)m1).Name);",
			"    }",
			"}",
			"/* Output:",
			"    Name in the derived class is: John, Manager",
			"    Name in the base class is: Mary",
			],
	"description": "Nova implementação com new operador sem o uso de virtual"
	},

	"60                                                         ": {
	"prefix": "_C# 7.6",
		"body": [
			"private string _name = ''Hello'';",
			"",
			"public string Name",
			"{",
			"    get",
			"    {",
			"       return _name;",
			"    }",
			"    protected set",
			"    {",
			"        _name = value;",
			"    }",
			"}",						
			],
	"description": "Propriedade com acessibilidade diferente"
	},

	"61                                                          ": {
	"prefix": "_C# 7.7",
		"body": [
			"public ref double GetEstimatedDistance()",
			"{",
			"    return ref estDistance;",
			"}",
			],
	"description": "Valor retornado por ref"
	},

	"62                                                           ": {
	"prefix": "_C# 7.8",
		"body": [
			"ref double distance = ref Planet.GetEstimatedDistance();",
			],
	"description": "ref recebendo uma ref"
	},

	"63                                                            ": {
	"prefix": "_C# 7.9",
		"body": [
			"public static class IntExtensions",
			"{",
			"    public static void Increment(this int number)",
			"        => number++;",
			"",
			"    // Take note of the extra ref keyword here",
			"    public static void RefIncrement(this ref int number)",
			"        => number++;",
			"}",
			"",
			"public static class IntProgram",
			"{",
			"    public static void Test()",
			"    {",
			"        int x = 1;",
			"",
			"        // Takes x by value leading to the extension method",
			"        // Increment modifying its own copy, leaving x unchanged",
			"        x.Increment();",
			"        Console.WriteLine($''x is now {x}''); // x is now 1",
			"",
			"        // Takes x by reference leading to the extension method",
			"        // RefIncrement changing the value of x directly",
			"        x.RefIncrement();",
			"        Console.WriteLine($''x is now {x}''); // x is now 2",
			"    }",
			"}",						
			],
	"description": "Metodo de extensao com ref e sem ref"
	},

	"64                                                            ": {
	"prefix": "_C# 8.1",
		"body": [
			"public struct Account",
			"{",
			"    public uint id;",
			"    public float balance;",
			"",
			"    private int secret;",
			"}",
			"",
			"public static class AccountExtensions",
			"{",
			"    // ref keyword can also appear before the this keyword",
			"    public static void Deposit(ref this Account account, float amount)",
			"    {",
			"        account.balance += amount;",
			"",
			"        // The following line results in an error as an extension",
			"        // method is not allowed to access private members",
			"        // account.secret = 1; // CS0122",
			"    }",
			"}",
			"",
			"public static class AccountProgram",
			"{",
			"    public static void Test()",
			"    {",
			"        Account account = new()",
			"        {",
			"            id = 1,",
			"            balance = 100f",
			"        };",
			"",
			"        Console.WriteLine($''I have ${account.balance}''); // I have $100",
			"",
			"        account.Deposit(50f);",
			"        Console.WriteLine($''I have ${account.balance}''); // I have $150",
			"    }",
			"}",						
			],
	"description": "Metodo de extensao"
	},

	"65                                                              ": {
	"prefix": "_C# 8.2",
		"body": [
			"namespace CustomExtensions",
			"{",
			"    // Extension methods must be defined in a static class.",
			"    public static class StringExtension",
			"    {",
			"        // This is the extension method.",
			"        // The first parameter takes the ''this'' modifier",
			"        // and specifies the type for which the method is defined.",
			"        public static int WordCount(this string str)",
			"        {",
			"            return str.Split(new char[] {' ', '.','?'}, StringSplitOptions.RemoveEmptyEntries).Length;",
			"        }",
			"    }",
			"}",
			"namespace Extension_Methods_Simple",
			"{",
			"    // Import the extension method namespace.",
			"   using CustomExtensions;",
			"    class Program",
			"    {",
			"        static void Main(string[] args)",
			"        {",
			"            string s = ''The quick brown fox jumped over the lazy dog.'';",
			"            // Call the method as if it were an",
			"            // instance method on the type. Note that the first",
			"            // parameter is not specified by the calling code.",
			"            int i = s.WordCount();",
			"            System.Console.WriteLine(''Word count of s is {0}'', i);",
			"        }",
			"    }",
			"}",
			],
	"description": "Metodo de extensao para string"
	},

	"66                                                               ": {
	"prefix": "_C# 8.3",
		"body": [
			"using System;",
			"",
			"    namespace EnumExtension",
			"    {",
			"        // Define an extension method in a non-nested static class.",
			"        public static class Extensions",
			"    {",
			"        public static Grades minPassing = Grades.D;",
			"        public static bool Passing(this Grades grade)",
			"        {",
			"            return grade >= minPassing;",
			"        }",
			"    }",
			"",
			"    public enum Grades { F = 0, D=1, C=2, B=3, A=4 };",
			"    class Program",
			"    {",
			"        static void Main(string[] args)",
			"        {",
			"            Grades g1 = Grades.D;",
			"            Grades g2 = Grades.F;",
			"            Console.WriteLine(''First {0} a passing grade.'', g1.Passing() ? ''is'' : ''is not'');",
			"           Console.WriteLine(''Second {0} a passing grade.'', g2.Passing() ? ''is'' : ''is not'');",
			"",
			"            Extensions.minPassing = Grades.C;",
			"            Console.WriteLine(''\r\nRaising the bar!\r\n'');",
			"            Console.WriteLine(''First {0} a passing grade.'', g1.Passing() ? ''is'' : ''is not'');",
			"            Console.WriteLine(''Second {0} a passing grade.'', g2.Passing() ? ''is'' : ''is not'');",
			"        }",
			"    }",
			"  }",
			"/* Output:",
			"    First is a passing grade.",
			"    Second is not a passing grade.",
			"",
			"    Raising the bar!",
			"",
			"    First is not a passing grade.",
			"    Second is not a passing grade.",
			],
	"description": "Usando enum"
	},

	"67                                                                ": {
	"prefix": "_C# 8.4",
		"body": [
			"class NamedExample",
			"{",
			"    static void Main(string[] args)",
			"    {",
			"        // The method can be called in the normal way, by using positional arguments.",
			"        PrintOrderDetails(''Gift Shop'', 31, ''Red Mug'');",
			"",
			"        // Named arguments can be supplied for the parameters in any order.",
			"        PrintOrderDetails(orderNum: 31, productName: ''Red Mug'', sellerName: ''Gift Shop'');",
			"        PrintOrderDetails(productName: ''Red Mug'', sellerName: ''Gift Shop'', orderNum: 31);",
			"",
			"        // Named arguments mixed with positional arguments are valid",
			"        // as long as they are used in their correct position.",
			"        PrintOrderDetails(''Gift Shop'', 31, productName: ''Red Mug'');",
			"        PrintOrderDetails(sellerName: ''Gift Shop'', 31, productName: ''Red Mug''); ",
			"        PrintOrderDetails(''Gift Shop'', orderNum: 31, ''Red Mug'');",
			"",
			"        // However, mixed arguments are invalid if used out-of-order.",
			"        // The following statements will cause a compiler error.",
			"        // PrintOrderDetails(productName: ''Red Mug'', 31, ''Gift Shop'');",
			"        // PrintOrderDetails(31, sellerName: ''Gift Shop'', ''Red Mug'');",
			"        // PrintOrderDetails(31, ''Red Mug'', sellerName: ''Gift Shop'');",
			"    }",
			"",
			"    static void PrintOrderDetails(string sellerName, int orderNum, string productName)",
			"    {",
			"        if (string.IsNullOrWhiteSpace(sellerName))",
			"        {",
			"            throw new ArgumentException(message: ''Seller name cannot be null or empty.'', paramName: nameof(sellerName));",
			"        }",
			"",
			"        Console.WriteLine($''Seller: {sellerName}, Order #: {orderNum}, Product: {productName}'');",
			"    }",
			"}",						
			],
	"description": "Argumento nomeado e posicional"
	},

	"68                                                                 ": {
	"prefix": "_C# 8.5",
		"body": [
			"public class Person",
			"{",
			"   private string last;",
			"   private string first;",
			"",
			"   public Person(string lastName, string firstName)",
			"   {",
			"      last = lastName;",
			"      first = firstName;",
			"   }",
			"",
			"   // Remaining implementation of Person class.",
			"}",
			],
	"description": "Construtor simples"
	},

	"69                                                                  ": {
	"prefix": "_C# 8.6",
		"body": [
			"public class Adult : Person",
			"{",
			"   private static int minimumAge;",
			"",
			"   public Adult(string lastName, string firstName) : base(lastName, firstName)",
			"   { }",
			"",
			"   static Adult()",
			"   {",
			"      minimumAge = 18;",
			"   }",
			"",
			"   // Remaining implementation of Adult class.",
			"}",
			],
	"description": "Construtor com : base"
	},

	"70                                                                   ": {
	"prefix": "_C# 8.7",
		"body": [
			"public class Employee",
			"{",
			"    public int Salary;",
			"",
			"    public Employee() { }",
			"",
			"    public Employee(int annualSalary)",
			"    {",
			"        Salary = annualSalary;",
			"    }",
			"",
			"    public Employee(int weeklySalary, int numberOfWeeks)",
			"    {",
			"        Salary = weeklySalary * numberOfWeeks;",
			"    }",
			"}",
			"",
			"",
			"Employee e1 = new Employee(30000);",
			"Employee e2 = new Employee(500, 52);",	
			],
	"description": "Sobrecarga de construtor"
	},

	"71                                                                    ": {
	"prefix": "_C# 8.8",
		"body": [
			"public Employee(int weeklySalary, int numberOfWeeks)",
			"    : this(weeklySalary * numberOfWeeks)",
			"{",
			"}",			
			],
	"description": "Construtor com : this"
	},

	"72                                                                     ": {
	"prefix": "_C# 8.9",
		"body": [
			"abstract class Shape",
			"{",
			"    public const double pi = Math.PI;",
			"    protected double x, y;",
			"",
			"    public Shape(double x, double y)",
			"    {",
			"        this.x = x;",
			"        this.y = y;",
			"    }",
			"",
			"    public abstract double Area();",
			"}",
			"",
			"class Circle : Shape",
			"{",
			"    public Circle(double radius)",
			"        : base(radius, 0)",
			"    {  }",
			"",
			"    public override double Area() => pi * x * x;",
			"}",
			"",
			"class Cylinder : Circle",
			"{",
			"    public Cylinder(double radius, double height)",
			"        : base(radius)",
			"    {",
			"        y = height;",
			"    }",
			"",
			"    public override double Area() => (2 * base.Area()) + (2 * pi * x * y);",
			"}",
			"",
			"class Example",
			"{",
			"    static void Main()",
			"    {",
			"        double radius = 2.5;",
			"        double height = 3.0;",
			"",
			"        var ring = new Circle(radius);",
			"        Console.WriteLine($''Area of the circle = {ring.Area():F2}'');",
			"        // Output: Area of the circle = 19.63",
			"",        
			"        var tube = new Cylinder(radius, height);",
			"        Console.WriteLine($''Area of the cylinder = {tube.Area():F2}'');",
			"        // Output: Area of the cylinder = 86.39",
			"    }",
			"}",						
			],
	"description": "Classe abstract com construtor sendo acessado quando derivado"
	},

	"73                                                                      ": {
	"prefix": "_C# 9.1",
		"body": [
			"public class Bus",
			"{",
			"    // Static variable used by all Bus instances.",
			"   // Represents the time the first bus of the day starts its route.",
			"    protected static readonly DateTime globalStartTime;",
			"",
			"    // Property for the number of each bus.",
			"    protected int RouteNumber { get; set; }",
			"",
			"    // Static constructor to initialize the static variable.",
			"    // It is invoked before the first instance constructor is run.",
			"    static Bus()",
			"    {",
			"        globalStartTime = DateTime.Now;",
			"",
			"        // The following statement produces the first line of output,",
			"        // and the line occurs only once.",
			"        Console.WriteLine(''Static constructor sets global start time to {0}'',",
			"            globalStartTime.ToLongTimeString());",
			"    }",
			"",
			"    // Instance constructor.",
			"    public Bus(int routeNum)",
			"    {",
			"        RouteNumber = routeNum;",
			"        Console.WriteLine(''Bus #{0} is created.'', RouteNumber);",
			"    }",
			"",
			"    // Instance method.",
			"    public void Drive()",
			"    {",
			"        TimeSpan elapsedTime = DateTime.Now - globalStartTime;",
			"",
			"        // For demonstration purposes we treat milliseconds as minutes to simulate",
			"        // actual bus times. Do not do this in your actual bus schedule program!",
			"        Console.WriteLine(''{0} is starting its route {1:N2} minutes after global start time {2}.'',",
			"                                this.RouteNumber,",
			"                                elapsedTime.Milliseconds,",
			"                                globalStartTime.ToShortTimeString());",
			"    }",
			"}",
			"",
			"class TestBus",
			"{",
			"    static void Main()",
			"    {",
			"        // The creation of this instance activates the static constructor.",
			"        Bus bus1 = new Bus(71);",
			"",
			"        // Create a second bus.",
			"        Bus bus2 = new Bus(72);",
			"",
			"        // Send bus1 on its way.",
			"       bus1.Drive();",
			"",
			"        // Wait for bus2 to warm up.",
			"        System.Threading.Thread.Sleep(25);",
			"",
			"        // Send bus2 on its way.",
			"        bus2.Drive();",
			"",
			"        // Keep the console window open in debug mode.",
			"        Console.WriteLine(''Press any key to exit.'');",
			"        Console.ReadKey();",
			"    }",
			"}",			
			],
	"description": "Construtor static"
	},

	"74                                                                       ": {
	"prefix": "_C# 9.2",
		"body": [
			"class Car",
			"{",
			"    ~Car()  // finalizer",
			"    {",
			"        // cleanup statements...",
			"    }",
			"}",			
			],
	"description": "Finalizador"
	},

	"75                                                                                          ": {
	"prefix": "_C# 9.3",
		"body": [
			"public class Cat",
			"{",
			"    // Auto-implemented properties.",
			"    public int Age { get; set; }",
			"    public string? Name { get; set; }",
			"",
			"    public Cat()",
			"    {",
			"    }",
			"",
			"    public Cat(string name)",
			"    {",
			"        this.Name = name;",
			"    }",
			"}",
			"",
			"",
			"Cat cat = new Cat { Age = 10, Name = ''Fluffy'' };",
			"Cat sameCat = new Cat(''Fluffy''){ Age = 10 };",					
			],
	"description": "As duas sintaxe de inicializador de objeto"
	},

	"76                                                                        ": {
	"prefix": "_C# 9.4",
		"body": [
			"public class Container",
			"{",
			"    public class Nested",
			"    {",
			"        private Container? parent;",
			"",
			"        public Nested()",
			"        {",
			"        }",
			"        public Nested(Container parent)",
			"        {",
			"            this.parent = parent;",
			"        }",
			"    }",
			"}",			
			],
	"description": "Tipo aninhado"
	},

	"77                                                                         ": {
	"prefix": "_C# 9.5",
		"body": [
			"public partial class Employee",
			"{",
			"    public void DoWork()",
			"    {",
			"    }",
			"}",
			"",
			"public partial class Employee",
			"{",
			"    public void GoToLunch()",
			"    {",
			"    }",
			"}",	
			],
	"description": "Class partial"
	},

	"78                                                                          ": {
	"prefix": "_C# 9.6",
		"body": [
			"// Definition in file1.cs",
			"partial void OnNameChanged();",
			"",
			"// Implementation in file2.cs",
			"partial void OnNameChanged()",
			"{",
			"  // method body",
			"}",
			],
	"description": "Metodos partial"
	},

	"79                                                                           ": {
	"prefix": "_C# 9.7",
		"body": [
			"string columns = ''Column 1\tColumn 2\tColumn 3'';",
			"//Output: Column 1        Column 2        Column 3",
			"",
			"string rows = ''Row 1\r\nRow 2\r\nRow 3'';",
			"/* Output:",
			"    Row 1",
			"    Row 2",
			"    Row 3",
			"*/",
			"",
			"string title = ''/''The /u00C6olean Harp/'', by Samuel Taylor Coleridge'';",
			"//Output: ''The Æolean Harp'', by Samuel Taylor Coleridge",
			],
	"description": "literais de cadeia de caracteres entre aspas"
	},

	"80                                                                            ": {
	"prefix": "_C# 9.8",
		"body": [
			"string filePath = @'C:/Users/scoleridge/Document/';",
			"//Output: C:/Users/scoleridge/Documents/",
			"",
			"string text = @''My pensive SARA ! thy soft cheek reclined",
			"    Thus on mine arm, most soothing sweet it is",
			"    To sit beside our Cot,...'';",
			"/* Output:",
			"My pensive SARA ! thy soft cheek reclined",
			"    Thus on mine arm, most soothing sweet it is",
			"    To sit beside our Cot,...",
			"*/",
			"",
			"string quote = @''Her name was ''''Sara.'''';",
			"//Output: Her name was ''Sara.''",
			],
	"description": "Literais de cadeia de caracteres textuais"
	},

	"81                                                                             ": {
	"prefix": "_C# 9.9",
		"body": [
			"string singleLine = “““Friends say “hello“ as they pass by.“““;",
			"string multiLine = “““",
			"    “Hello World!“ is typically the first program someone writes.",
			"    “““;",
			"string embeddedXML = “““",
			"       <element attr = “content“>",
			"           <body style=“normal“>",
			"               Here is the main text",
			"           </body>",
			"           <footer>",
			"               Excerpts from “An amazing story“",
			"           </footer>",
			"       </element >",
			"       “““;",
			"// The line “<element attr = “content“>“ starts in the first column.",
			"// All whitespace left of that column is removed from the string.",
			"",
			"string rawStringLiteralDelimiter = “““",
			"    Raw string literals are delimited ",
			"    by a string of at least three double quotes,",
			"    like this: “““",
			"    “““;",
			"",	
			],
	"description": "Literais de cadeia de caracteres bruta"
	},

	"82                                                                              ": {
	"prefix": "_C# A 1.1",
		"body": [
			"var jh = (firstName: “Jupiter“, lastName: “Hammon“, born: 1711, published: 1761);",
			"Console.WriteLine($“{jh.firstName} {jh.lastName} was an African American poet born in {jh.born}.“);",
			"Console.WriteLine($“He was first published in {jh.published} at the age of {jh.published - jh.born}.“);",
			"Console.WriteLine($“He'd be over {Math.Round((2018d - jh.born) / 100d) * 100d} years old today.“);",
			"",
			"// Output:",
			"// Jupiter Hammon was an African American poet born in 1711.",
			"// He was first published in 1761 at the age of 50.",
			"// He'd be over 300 years old today.",
			],
	"description": "cadeias de caracteres interpoladas "
	},

	"83                                                                               ": {
	"prefix": "_C# A 1.2",
		"body": [
			"int X = 2;",
			"int Y = 3;",
			"",
			"var pointMessage = $$“““The point {{{X}}, {{Y}}} is {{Math.Sqrt(X * X + Y * Y)}} from the origin.“““;",
			"",
			"Console.WriteLine(pointMessage);",
			"// Output:",
			"// The point {2, 3} is 3.605551275463989 from the origin.",
			],
	"description": "literais de cadeia de caracteres bruta com interpolações de cadeia de caracteres"
	},
	
	"84                                                                               ": {
	"prefix": "_C# A 1.3",
		"body": [
			"var pw = (firstName: “Phillis“, lastName: “Wheatley“, born: 1753, published: 1773);",
			"Console.WriteLine(“{0} {1} was an African American poet born in {2}.“, pw.firstName, pw.lastName, pw.born);",
			"Console.WriteLine(“She was first published in {0} at the age of {1}.“, pw.published, pw.published - pw.born);",
			"Console.WriteLine(“She'd be over {0} years old today.“, Math.Round((2018d - pw.born) / 100d) * 100d);",
			"",
			"// Output:",
			"// Phillis Wheatley was an African American poet born in 1753.",
			"// She was first published in 1773 at the age of 20.",
			"// She'd be over 300 years old today.",
			],
	"description": "Formatação de composição"
	},

	"85                                                                                 ": {
	"prefix": "_C# A 1.4",
		"body": [
			"public delegate void Callback(string message);",
			"",
			"// Create a method for a delegate.",
			"public static void DelegateMethod(string message)",
			"{",
			"    Console.WriteLine(message);",
			"}",
			"",
			"// Instantiate the delegate.",
			"Callback handler = DelegateMethod;",
			"",
			"// Call the delegate.",
			"handler(“Hello World“);",
			],
	"description": "Delegate simples"
	},

	"86                                                                                 ": {
	"prefix": "_C# A 1.5",
		"body": [
			"var obj = new MethodClass();",
			"Callback d1 = obj.Method1;",
			"Callback d2 = obj.Method2;",
			"Callback d3 = DelegateMethod;",
			"",
			"//Both types of assignment are valid.",
			"Callback allMethodsDelegate = d1 + d2;",
			"allMethodsDelegate += d3;",
			"",
			"",
			"//remove Method1",
			"allMethodsDelegate -= d1;",			
			],
	"description": "Adicionar e remover um metodo a um delegate"
	},

	"87                                                                                   ": {
	"prefix": "_C# A 1.6",
		"body": [
			"using System;\r\n\r\npublic class DiasDaSemana\r\n{\r\n    private string[] dias = { \"Domingo\", \"Segunda-feira\", \"Terça-feira\", \"Quarta-feira\", \"Quinta-feira\", \"Sexta-feira\", \"Sábado\" };\r\n\r\n    // Indexador\r\n    public string this[int indice]\r\n    {\r\n        get\r\n        {\r\n            if (indice < 0 || indice >= dias.Length)\r\n            {\r\n                throw new IndexOutOfRangeException(\"Índice fora do intervalo.\");\r\n            }\r\n            return dias[indice];\r\n        }\r\n        set\r\n        {\r\n            if (indice < 0 || indice >= dias.Length)\r\n            {\r\n                throw new IndexOutOfRangeException(\"Índice fora do intervalo.\");\r\n            }\r\n            dias[indice] = value;\r\n        }\r\n    }\r\n}\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        DiasDaSemana semana = new DiasDaSemana();\r\n\r\n        // Acessando dias da semana usando o indexador\r\n        Console.WriteLine(semana[0]); // Domingo\r\n        Console.WriteLine(semana[1]); // Segunda-feira\r\n\r\n        // Modificando um dia da semana usando o indexador\r\n        semana[1] = \"Segunda\";\r\n        Console.WriteLine(semana[1]); // Segunda\r\n    }\r\n}\r\n"
			],
	"description": "Indexador simples"
	},

	"88                                                                                    ": {
	"prefix": "_C# A 1.7",
		"body": [
			"using System;",
			"",
			"class SampleCollection<T>",
			"{",
			"   // Declare an array to store the data elements.",
			"   private T[] arr = new T[100];",
			"   int nextIndex = 0;",
			"",
			"   // Define the indexer to allow client code to use [] notation.",
			"   public T this[int i] => arr[i];",
			"",
			"   public void Add(T value)",
			"   {",
			"      if (nextIndex >= arr.Length)",
			"         throw new IndexOutOfRangeException($“The collection can hold only {arr.Length} elements.“);",
			"      arr[nextIndex++] = value;",
			"   }",
			"}",
			"",
			"class Program",
			"{",
			"   static void Main()",
			"   {",
			"      var stringCollection = new SampleCollection<string>();",
			"      stringCollection.Add(“Hello, World“);",
			"      System.Console.WriteLine(stringCollection[0]);",
			"   }",
			"}",
			"// The example displays the following output:",
			"//       Hello, World.",
			],
	"description": "Indexador somente leitura e com parametro generico"
	},

	"89                                                                                     ": {
	"prefix": "_C# A 1.8",
		"body": [
			"// Indexer on an interface:",	
			"public interface IIndexInterface",	
			"{",	
			"    // Indexer declaration:",	
			"    int this[int index]",	
			"    {",	
			"        get;",	
			"        set;",	
			"    }",	
			"}",	
			"",
			"// Implementing the interface.",	
			"class IndexerClass : IIndexInterface",	
			"{",	
			"    private int[] arr = new int[100];",	
			"    public int this[int index]   // indexer declaration",	
			"    {",	
			"        // The arr object will throw IndexOutOfRange exception.",	
			"        get => arr[index];",	
			"        set => arr[index] = value;",	
			"    }",	
			"}",		
			],
	"description": "Indexador em uma interface"
	},

	"90                                                                                      ": {
	"prefix": "_C# A 1.9",
		"body": [
			"static class Constants",
			"{",
			"    public const double Pi = 3.14159;",
			"    public const int SpeedOfLight = 300000; // km per sec.",
			"}",
			"",
			"class Program",
			"{",
			"    static void Main()",
			"    {",
			"        double radius = 5.3;",
			"        double area = Constants.Pi * (radius * radius);",
			"        int secsFromSun = 149476000 / Constants.SpeedOfLight; // in km",
			"        Console.WriteLine(secsFromSun);",
			"    }",
			"}",						
			],
	"description": "Campos const em uma classe static"
	},

	"91                                                                                      ": {
	"prefix": "_C# A 2.1",
		"body": [
			"public interface IControl",
			"{",
			"    void Paint();",
			"}",
			"public interface ISurface",
			"{",
			"    void Paint();",
			"}",
			"public class SampleClass : IControl, ISurface",
			"{",
			"    // Both ISurface.Paint and IControl.Paint call this method.",
			"    public void Paint()",
			"    {",
			"        Console.WriteLine(“Paint method in SampleClass“);",
			"    }",
			"}",
			"",
			"",
			"var sample = new SampleClass();",
			"//sample.Paint();// “Paint“ isn't accessible.",
			"var control = sample as IControl;",
			"control.Paint();",	
			],
	"description": "implementação de interface explícita"
	},

	"92                                                                                        ": {
	"prefix": "_C# A 2.2",
		"body": [
				"static class ParamsExample\r\n{\r\n    static void Main()\r\n    {\r\n        string fromArray = GetVowels([\"apple\", \"banana\", \"pear\"]);\r\n        Console.WriteLine($\"Vowels from array: '{fromArray}'\");\r\n\r\n        string fromMultipleArguments = GetVowels(\"apple\", \"banana\", \"pear\");\r\n        Console.WriteLine($\"Vowels from multiple arguments: '{fromMultipleArguments}'\");\r\n\r\n        string fromNull = GetVowels(null);\r\n        Console.WriteLine($\"Vowels from null: '{fromNull}'\");\r\n\r\n        string fromNoValue = GetVowels();\r\n        Console.WriteLine($\"Vowels from no value: '{fromNoValue}'\");\r\n    }\r\n\r\n    static string GetVowels(params string[]? input)\r\n    {\r\n        if (input == null || input.Length == 0)\r\n        {\r\n            return string.Empty;\r\n        }\r\n\r\n        char[] vowels = ['A', 'E', 'I', 'O', 'U'];\r\n        return string.Concat(\r\n            input.SelectMany(\r\n                word => word.Where(letter => vowels.Contains(char.ToUpper(letter)))));\r\n    }\r\n}\r\n\r\n// The example displays the following output:\r\n//     Vowels from array: 'aeaaaea'\r\n//     Vowels from multiple arguments: 'aeaaaea'\r\n//     Vowels from null: ''\r\n//     Vowels from no value: ''"		
			],
	"description": "Uso params"
	},

	"93                                                                                         ": {
	"prefix": "_C# A 2.3",
		"body": [
			"public class SampleClass : IControl, ISurface\r\n{\r\n    void IControl.Paint()\r\n    {\r\n        System.Console.WriteLine(\"IControl.Paint\");\r\n    }\r\n    void ISurface.Paint()\r\n    {\r\n        System.Console.WriteLine(\"ISurface.Paint\");\r\n    }\r\n}",
			"SampleClass sample = new SampleClass();\r\nIControl control = sample;\r\nISurface surface = sample;\r\n\r\n// The following lines all call the same method.\r\n//sample.Paint(); // Compiler error.\r\ncontrol.Paint();  // Calls IControl.Paint on SampleClass.\r\nsurface.Paint();  // Calls ISurface.Paint on SampleClass.\r\n\r\n// Output:\r\n// IControl.Paint\r\n// ISurface.Paint"
	
			],
	"description": "Acessando um membro de uma interface herdada, declarando o tipo da interface e usando a variavel da classe"
	},

	"94 ": {
	"prefix": "_C# A 2.4",
		"body": [
      "using System;\r\n\r\nclass SampleCollection<T>\r\n{\r\n   // Declare an array to store the data elements.\r\n   private T[] arr = new T[100];\r\n\r\n   // Define the indexer to allow client code to use [] notation.\r\n   public T this[int i]\r\n   {\r\n      get { return arr[i]; }\r\n      set { arr[i] = value; }\r\n   }\r\n}\r\n\r\nclass Program\r\n{\r\n   static void Main()\r\n   {\r\n      var stringCollection = new SampleCollection<string>();\r\n      stringCollection[0] = \"Hello, World\";\r\n      Console.WriteLine(stringCollection[0]);\r\n   }\r\n}\r\n// The example displays the following output:\r\n//       Hello, World."
			],
	"description": "Indexador normal"
	},

	"95                                                                                             ": {
	"prefix": "_C# A 2.5",
		"body": [
    "using System;\r\n\r\nclass SampleCollection<T>\r\n{\r\n   // Declare an array to store the data elements.\r\n   private T[] arr = new T[100];\r\n   int nextIndex = 0;\r\n\r\n   // Define the indexer to allow client code to use [] notation.\r\n   public T this[int i] => arr[i];\r\n\r\n   public void Add(T value)\r\n   {\r\n      if (nextIndex >= arr.Length)\r\n         throw new IndexOutOfRangeException($\"The collection can hold only {arr.Length} elements.\");\r\n      arr[nextIndex++] = value;\r\n   }\r\n}\r\n\r\nclass Program\r\n{\r\n   static void Main()\r\n   {\r\n      var stringCollection = new SampleCollection<string>();\r\n      stringCollection.Add(\"Hello, World\");\r\n      System.Console.WriteLine(stringCollection[0]);\r\n   }\r\n}\r\n// The example displays the following output:\r\n//       Hello, World."
			],
	"description": "Indexador somente leitura"
	},

	"96                                                                                             ": {
	"prefix": "_C# A 2.6",
		"body": [
    "using System;\r\n\r\nclass SampleCollection<T>\r\n{\r\n   // Declare an array to store the data elements.\r\n   private T[] arr = new T[100];\r\n\r\n   // Define the indexer to allow client code to use [] notation.\r\n   public T this[int i]\r\n   {\r\n      get => arr[i];\r\n      set => arr[i] = value;\r\n   }\r\n}\r\n\r\nclass Program\r\n{\r\n   static void Main()\r\n   {\r\n      var stringCollection = new SampleCollection<string>();\r\n      stringCollection[0] = \"Hello, World.\";\r\n      Console.WriteLine(stringCollection[0]);\r\n   }\r\n}\r\n// The example displays the following output:\r\n//       Hello, World."
			],
	"description": "Indexador normal com membro apto de expressao"
	},

	"97                                                                                                ": {
	"prefix": "_C# A 2.7",
		"body": [
		"class CustomException : Exception\r\n{\r\n    public CustomException(string message)\r\n    {\r\n    }\r\n}\r\nprivate static void TestThrow()\r\n{\r\n    throw new CustomException(\"Custom exception in TestThrow()\");\r\n}",
		"\n\n",
		"try\r\n{\r\n    TestThrow();\r\n}\r\ncatch (CustomException ex)\r\n{\r\n    System.Console.WriteLine(ex.ToString());\r\n}"
			],
	"description": "Criando uma excessao com uma classe derivada de exception"
	},
	
	"98                                                                                                  ": {
	"prefix": "_C# A 2.8",
		"body": [
		"using System;\r\nusing System.IO;\r\n\r\nnamespace Exceptions\r\n{\r\n    public class CatchOrder\r\n    {\r\n        public static void Main()\r\n        {\r\n            try\r\n            {\r\n                using (var sw = new StreamWriter(\"./test.txt\"))\r\n                {\r\n                    sw.WriteLine(\"Hello\");\r\n                }\r\n            }\r\n            // Put the more specific exceptions first.\r\n            catch (DirectoryNotFoundException ex)\r\n            {\r\n                Console.WriteLine(ex);\r\n            }\r\n            catch (FileNotFoundException ex)\r\n            {\r\n                Console.WriteLine(ex);\r\n            }\r\n            // Put the least specific exception last.\r\n            catch (IOException ex)\r\n            {\r\n                Console.WriteLine(ex);\r\n            }\r\n            Console.WriteLine(\"Done\");\r\n        }\r\n    }\r\n}"
			],
	"description": "Varios catch para um exception"
	},
	
	"99                                                                                                   ": {
	"prefix": "_C# A 2.9",
		"body": [
		"int GetInt(int[] array, int index)\r\n{\r\n    try\r\n    {\r\n        return array[index];\r\n    }\r\n    catch (IndexOutOfRangeException e) when (index < 0) \r\n    {\r\n        throw new ArgumentOutOfRangeException(\r\n            \"Parameter index cannot be negative.\", e);\r\n    }\r\n    catch (IndexOutOfRangeException e)\r\n    {\r\n        throw new ArgumentOutOfRangeException(\r\n            \"Parameter index cannot be greater than the array size.\", e);\r\n    }\r\n}"
			],
	"description": "filtros de exceção para adicionar uma expressão booliana a uma cláusula catch"
	},

	
	"100                                                                                                   ": {
	"prefix": "_C# A 3.1",
		"body": [
		"public static class ByRefExample\r\n{\r\n    public static void Main()\r\n    {\r\n        var value = 20;\r\n        Console.WriteLine(\"In Main, value = {0}\", value);\r\n        ModifyValue(ref value);\r\n        Console.WriteLine(\"Back in Main, value = {0}\", value);\r\n    }\r\n\r\n    private static void ModifyValue(ref int i)\r\n    {\r\n        i = 30;\r\n        Console.WriteLine(\"In ModifyValue, parameter value = {0}\", i);\r\n        return;\r\n    }\r\n}\r\n// The example displays the following output:\r\n//      In Main, value = 20\r\n//      In ModifyValue, parameter value = 30\r\n//      Back in Main, value = 30"
			],
	"description": "Passando um valor por referencia"
	},

	"101                                                                                                    ": {
	"prefix": "_C# A 3.2",
		"body": [
		"using System;\r\n\r\npublic delegate void AlarmeDisparadoEventHandler(object sender, EventArgs e);\r\n\r\npublic class Contador\r\n{\r\n    // Definir o evento usando o delegate\r\n    public event AlarmeDisparadoEventHandler AlarmeDisparado;\r\n\r\n    private int _contador;\r\n    private int _limite;\r\n\r\n    public Contador(int limite)\r\n    {\r\n        _limite = limite;\r\n        _contador = 0;\r\n    }\r\n\r\n    // Método para incrementar o contador\r\n    public void Incrementar()\r\n    {\r\n        _contador++;\r\n        Console.WriteLine($\"Contador: {_contador}\");\r\n\r\n        // Verificar se o limite foi atingido\r\n        if (_contador >= _limite)\r\n        {\r\n            // Disparar o evento\r\n            OnAlarmeDisparado(EventArgs.Empty);\r\n        }\r\n    }\r\n\r\n    // Método para disparar o evento\r\n    protected virtual void OnAlarmeDisparado(EventArgs e)\r\n    {\r\n        AlarmeDisparado?.Invoke(this, e);\r\n    }\r\n}\r\n\r\npublic class Monitor\r\n{\r\n    public void Registrar(Contador contador)\r\n    {\r\n        contador.AlarmeDisparado += Contador_AlarmeDisparado;\r\n    }\r\n\r\n    private void Contador_AlarmeDisparado(object sender, EventArgs e)\r\n    {\r\n        Console.WriteLine(\"Alarme disparado! O contador atingiu o limite.\");\r\n    }\r\n}\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Contador contador = new Contador(5); // Define o limite para 5\r\n        Monitor monitor = new Monitor();\r\n        \r\n        // Registrar o evento\r\n        monitor.Registrar(contador);\r\n\r\n        // Incrementar o contador\r\n        for (int i = 0; i < 10; i++)\r\n        {\r\n            contador.Incrementar();\r\n            System.Threading.Thread.Sleep(500); // Apenas para adicionar uma pequena pausa\r\n        }\r\n    }\r\n}\r\n"
			],
	"description": "Evento"
	},

	/*"C#                                                                                                     ": {
	"prefix": "?",
			"body": [
				],
	"description": "?"
		},*/

	/*"C#                                                                                                     ": {
	"prefix": "?",
			"body": [
				],
	"description": "?"
		},*/

	/*"C#                                                                                                     ": {
	"prefix": "?",
			"body": [
				],
	"description": "?"
		},*/

	/*"C#                                                                                                     ": {
	"prefix": "?",
			"body": [
				],
	"description": "?"
		},*/
}