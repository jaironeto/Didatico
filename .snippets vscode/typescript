{
/*****************************************************************************************/
//																Typescript Codigo
/*****************************************************************************************/

  "": {
	"prefix": "_codigo typescript 1.1",
		"body": [
			"interface MinhaInterface {",
			"    campoExistente: string;",
			"}",
			"",
			"// Adicionando um novo campo à interface existente",
			"interface MinhaInterface {",
			"    novoCampo: number;",
			"}",
			"",
			"const objeto: MinhaInterface = {",
			"    campoExistente: “valor“,",
			"    novoCampo: 42",
			"};",
						],
	"description": "adicionando novos campos a uma interface existente com interface"
	},

	"ts ": {
	"prefix": "_codigo typescript 1.2",
		"body": [
			"type MeuTipo = {",
			"    campoExistente: string;",
			"};",
			"",
			"// Adicionando um novo campo ao tipo existente",
			"type MeuTipo = MeuTipo & {",
			"    novoCampo: number;",
			"};",
			"",
			"const objeto: MeuTipo = {",
			"    campoExistente: “valor“,",
			"    novoCampo: 42",
			"};",
						],
	"description": "adicionando novos campos a uma interface existente com type"
	},

	" ": {
	"prefix": "_codigo typescript 1.3",
		"body": [
			"type FuncaoNumeroParaString = (numero: number) => string;",
			"",
			"// Exemplo de uma função que segue o tipo definido pelo alias",
			"const converterParaString: FuncaoNumeroParaString = (numero) => {",
			"    return numero.toString();",
			"};",
			"",
			"// Usando a função e o tipo de função definido pelo alias",
			"const resultado: string = converterParaString(42);",
			"console.log(resultado); // Saída: “42“",
						],
	"description": "alias de tipo para nomear um tipo de função"
	},

	"                ": {
	"prefix": "_codigo typescript 1.4",
		"body": [
			"// Definindo um alias de tipo para uma união de tipos",
			"type MeuTipo = string | number;",
			"",
			"// Definindo uma função que aceita o tipo definido pelo alias",
			"function minhaFuncao(parametro: MeuTipo): void {",
			"    console.log(parametro);",
			"}",
			"",
			"// Usando a função com diferentes tipos",
			"minhaFuncao(“Olá“); // Saída: Olá",
			"minhaFuncao(42);    // Saída: 42",
						],
	"description": "alias para um tipo união e depois usar o alias na função"
	},

	"  ": {
	"prefix": "_codigo typescript 1.5",
		"body": [
			"// Alias de tipo para um tipo primitivo",
			"type MeuNumero = number;",
			"",
			"// Alias de tipo para um objeto",
			"type MeuObjeto = {",
			"    nome: string;",
			"    idade: number;",
			"};",
			"",
			"// Alias de tipo para uma função",
			"type MeuCallback = (param: string) => void;",
			"",
			"// Exemplo de uso dos aliases de tipo",
			"const numero: MeuNumero = 10;",
			"const pessoa: MeuObjeto = { nome: “João“, idade: 30 };",
			"",
			"const minhaFuncao: MeuCallback = (mensagem) => {",
			"    console.log(“Mensagem:“, mensagem);",
			"};",
			"",
			"console.log(numero);        // Saída: 10",
			"console.log(pessoa);        // Saída: { nome: 'João', idade: 30 }",
			"minhaFuncao(“Olá mundo!“); // Saída: Mensagem: Olá mundo!",
						],
	"description": "aliases de tipo para tipos, objeto e função"
	},

	"   ": {
	"prefix": "_codigo typescript 1.6",
		"body": [
			"// Definindo um tipo para o objeto",
			"type Pessoa = {",
			"    nome: string;",
			"    idade: number;",
			"};",
			"",
			"// Função que recebe um objeto do tipo Pessoa como parâmetro",
			"function saudar(pessoa: Pessoa): void {",
			"    console.log(`Olá, ${pessoa.nome}! Você tem ${pessoa.idade} anos.`);",
			"}",
			"",
			"// Criando um objeto do tipo Pessoa",
			"const usuario: Pessoa = { nome: “Maria“, idade: 30 };",
			"",
			"// Chamando a função e passando o objeto como argumento",
			"saudar(usuario);",
						],
	"description": "anotação Tipos de objeto em funções"
	},

	"                 ": {
	"prefix": "_codigo typescript 1.7",
		"body": [
			"// Função que retorna um número",
			"function dobrar(numero: number): number {",
			"    return numero * 2;",
			"}",
			"",
			"// Chamada da função",
			"const resultado: number = dobrar(5);",
			"console.log(resultado); // Saída: 10",
						],
	"description": "anotações de Tipo de Retorno"
	},

	"    ": {
	"prefix": "_codigo typescript 1.8",
		"body": [
			"// Anotação de tipo em uma variável",
			"let nome: string;",
			"",
			"// Atribuição de valor à variável",
			"nome = “João“;",
			"",
			"// Tentativa de atribuir um valor de tipo diferente (isso resultará em um erro)",
			"// nome = 10; // Isso causaria um erro de tipo",
			"",
			"// Usando a variável",
			"console.log(nome); // Saída: João",
						],
	"description": "anotações de tipo em variáveis"
	},

	"     ": {
	"prefix": "_codigo typescript 1.9",
		"body": [
			"// Declarando uma matriz de números usando colchetes",
			"let numeros: number[] = [1, 2, 3, 4, 5];",
			"",
			"// Declarando uma matriz de strings usando colchetes",
			"let nomes: string[] = [“João“, “Maria“, “Pedro“];",
			"",
			"",
			"// Declarando uma matriz de números usando o tipo de matriz",
			"let numeros: Array<number> = [1, 2, 3, 4, 5];",
			"",
			"// Declarando uma matriz de strings usando o tipo de matriz",
			"let nomes: Array<string> = [“João“, “Maria“, “Pedro“];",
						],
	"description": "as duas formas de declarar matrizes"
	},

	"       ": {
	"prefix": "_codigo typescript 2.1",
		"body": [
			"// Declaração de um tipo mais genérico",
			"let tipoMenosEspecifico: any = “texto“;",
			"",
			"// Usando a asserção de tipo para converter para um tipo mais específico",
			"let tipoMaisEspecifico: string = tipoMenosEspecifico as string;",
			"",
			"console.log(tipoMaisEspecifico.length); // Agora você pode acessar propriedades específicas do tipo string",
						],
	"description": "asserções de tipo com as do menos especifico para o mais especifico"
	},

	"      ": {
	"prefix": "_codigo typescript 2.2",
		"body": [
			"// Declaração de um tipo menos específico",
			"let tipoMenosEspecifico: any = “texto“;",
			"",
			"// Usando asserção de tipo com 'as' para converter para um tipo mais específico",
			"let tipoMaisEspecifico: string = tipoMenosEspecifico as string;",
			"",
			"console.log(tipoMaisEspecifico.length); // Agora você pode acessar propriedades específicas do tipo string",
						],
	"description": "asserções de tipo com as"
	},

	"        ": {
	"prefix": "_codigo typescript 2.3",
		"body": [
			"// Declaração de um tipo menos específico",
			"let tipoMenosEspecifico: any = “texto“;",
			"",
			"// Usando asserção de tipo com '<tipo>' para converter para um tipo mais específico",
			"let tipoMaisEspecifico: string = <string>tipoMenosEspecifico;",
			"",
			"console.log(tipoMaisEspecifico.length); // Agora você pode acessar propriedades específicas do tipo string",
						],
	"description": "asserções de tipo com <>"
	},

	"         ": {
	"prefix": "_codigo typescript 2.4",
		"body": [
			"// Definindo um tipo para uma função construtora",
			"type ConstrutorPessoa = new (nome: string, idade: number) => Pessoa;",
			"",
			"// Definindo a função construtora",
			"function Pessoa(nome: string, idade: number) {",
			"    this.nome = nome;",
			"    this.idade = idade;",
			"}",
			"",
			"// Criando uma instância usando a função construtora",
			"let criarPessoa: ConstrutorPessoa = Pessoa;",
			"let pessoa1 = new criarPessoa(“João“, 30);",
						],
	"description": "assinatura de construção"
	},
	
	"          ": {
	"prefix": "_codigo typescript 2.5",
		"body": [
			"// Definindo um type para construção e método normal",
			"type ConstrutorEMetodo = {",
			"    new (nome: string, idade: number): Pessoa;",
			"    metodoNormal: (a: number, b: number) => number;",
			"}",
			"",
			"// Exemplo de uso",
			"class Pessoa {",
			"    constructor(public nome: string, public idade: number) {}",
			"",
			"    static somar(a: number, b: number): number {",
			"        return a + b;",
			"    }",
			"}",
			"",
			"// Usando o type ConstrutorEMetodo",
			"let obj: ConstrutorEMetodo = Pessoa;",
			"console.log(new obj(“João“, 30)); // Construtor",
			"console.log(obj.somar(5, 3)); // Método normal",
						],
	"description": "assinatura de construção e de metodo"
	},

	"           ": {
	"prefix": "_codigo typescript 2.6",
		"body": [
			"class MinhaClasse {",
			"    itens: { [indice: number]: any } = {};",
			"",
			"    adicionarItem(indice: number, valor: any) {",
			"        this.itens[indice] = valor;",
			"    }",
			"}",
			"",
			"const minhaInstancia = new MinhaClasse();",
			"minhaInstancia.adicionarItem(0, 'valor1');",
			"minhaInstancia.adicionarItem(1, 'valor2');",
						],
	"description": "assinatura de indice em classes"
	},

	"            ": {
	"prefix": "_codigo typescript 2.7",
		"body": [
			"interface MeuObjeto {",
			"    [indice: number]: string;",
			"}",
			"",
			"const meuObjeto: MeuObjeto = {",
			"    0: 'primeiro',",
			"    1: 'segundo',",
			"    2: 'terceiro'",
			"};",
			"",
			"console.log(meuObjeto[1]); // Saída: segundo",
						],
	"description": "tipo de objeto com uma assinatura de índice"
	},

	"             ": {
	"prefix": "_codigo typescript 2.8",
		"body": [
			"class MinhaClasse {",
			"    // Campo readonly público",
			"    public readonly nome: string;",
			"",
			"    // Campo readonly privado",
			"    private readonly idade: number;",
			"",
			"    // Construtor",
			"    constructor(nome: string, idade: number) {",
			"        this.nome = nome;",
			"        this.idade = idade;",
			"    }",
			"",
			"    // Método para acessar o campo privado",
			"    getIdade(): number {",
			"        return this.idade;",
			"    }",
			"}",
			"",
			"const objeto = new MinhaClasse('João', 30);",
			"",
			"console.log(objeto.nome); // Saída: João",
			"console.log(objeto.getIdade()); // Saída: 30",
						],
	"description": "Campo reandoly em classe"
	},

	"              ": {
	"prefix": "_codigo typescript 2.9",
		"body": [
			"// Membro readonly sem tipo genérico explícito",
			"const readonlyName: Readonly = “João“;",
			"console.log(readonlyName); // Saída: João",
			"",
			"// Tentativa de atribuir um novo valor ao membro de apenas leitura",
			"// Isso resultará em um erro de compilação",
			"readonlyName = “Maria“; // Erro: Não é possível atribuir a 'readonlyName' porque é uma constante ou apenas leitura.",
						],
	"description": "Variavel readonly"
	},

	"               ": {
	"prefix": "_codigo typescript 3.1",
		"body": [
			"class MinhaClasse {",
			"    private minhaPropriedade: string;",
			"",
			"    constructor(valor: string) {",
			"        this.minhaPropriedade = valor;",
			"    }",
			"",
			"    // Método para obter o valor da propriedade privada",
			"    getPropriedade(): string {",
			"        return this.minhaPropriedade;",
			"    }",
			"",
			"    // Método para definir o valor da propriedade privada",
			"    setPropriedade(novoValor: string): void {",
			"        this.minhaPropriedade = novoValor;",
			"    }",
			"}",
			"",
			"// Criando uma instância da classe",
			"const obj = new MinhaClasse(“Olá“);",
			"",
			"// Acessando e alterando o valor da propriedade privada usando os métodos públicos",
			"console.log(obj.getPropriedade()); // Saída: Olá",
			"obj.setPropriedade(“Mundo“);",
			"console.log(obj.getPropriedade()); // Saída: Mundo",
						],
	"description": "classe com membro private"
	},

	"                  ": {
	"prefix": "_codigo typescript 3.2",
		"body": [
			"class MinhaClasse {",
			"    protected minhaPropriedade: string;",
			"",
			"    constructor(valor: string) {",
			"        this.minhaPropriedade = valor;",
			"    }",
			"",
			"    // Método para obter o valor da propriedade protegida",
			"    getPropriedade(): string {",
			"        return this.minhaPropriedade;",
			"    }",
			"",
			"    // Método para definir o valor da propriedade protegida",
			"    setPropriedade(novoValor: string): void {",
			"        this.minhaPropriedade = novoValor;",
			"    }",
			"}",
			"",
			"// Classe derivada",
			"class MinhaClasseDerivada extends MinhaClasse {",
			"    constructor(valor: string) {",
			"        super(valor);",
			"    }",
			"",
			"    // Método para acessar a propriedade protegida da classe base",
			"    mostrarPropriedade(): void {",
			"        console.log(this.minhaPropriedade);",
			"    }",
			"}",
			"",
			"// Criando uma instância da classe derivada",
			"const obj = new MinhaClasseDerivada(“Olá“);",
			"",
			"// Acessando e alterando o valor da propriedade protegida usando os métodos públicos",
			"console.log(obj.getPropriedade()); // Saída: Olá",
			"obj.setPropriedade(“Mundo“);",
			"console.log(obj.getPropriedade()); // Saída: Mundo",
			"",
			"// Acessando a propriedade protegida diretamente através da classe derivada",
			"obj.mostrarPropriedade(); // Saída: Mundo",
						],
	"description": "classe com membro protected"
	},

	"                   ": {
	"prefix": "_codigo typescript 3.3",
		"body": [
			"class MinhaClasse {",
			"    public minhaPropriedade: string;",
			"",
			"    constructor(valor: string) {",
			"        this.minhaPropriedade = valor;",
			"    }",
			"",
			"    // Métodos para acessar e alterar o valor da propriedade",
			"    getPropriedade(): string {",
			"        return this.minhaPropriedade;",
			"    }",
			"",
			"    setPropriedade(novoValor: string): void {",
			"        this.minhaPropried",
						],
	"description": "classe com membro public"
	},

	"                    ": {
	"prefix": "_codigo typescript 3.4",
		"body": [
			"abstract class MinhaClasse {",
			"    // Membro abstrato",
			"    abstract minhaPropriedade: string;",
			"",
			"    // Método abstrato",
			"    abstract meuMetodo(): void;",
			"}",
			"",
			"class MinhaClasseConcreta extends MinhaClasse {",
			"    minhaPropriedade: string;",
			"",
			"    constructor(valor: string) {",
			"        super();",
			"        this.minhaPropriedade = valor;",
			"    }",
			"",
			"    meuMetodo(): void {",
			"        console.log(“Implementação do método abstrato“);",
			"    }",
			"}",
			"",
			"// Criando uma instância da classe concreta",
			"const obj = new MinhaClasseConcreta(“Olá“);",
			"",
			"// Chamando o método da instância",
			"obj.meuMetodo(); // Saída: Implementação do método abstrato",
						],
	"description": "classe e membros abstract"
	},

	"                     ": {
	"prefix": "_codigo typescript 3.5",
		"body": [
			"interface Construivel {",
			"    new (valor: string): MinhaClasse;",
			"}",
			"",
			"class MinhaClasse {",
			"    constructor(public valor: string) {}",
			"}",
			"",
			"class MinhaClasseConstruivel implements Construivel {",
			"    constructor(public valor: string) {}",
			"",
			"    // Implementação da assinatura de construção",
			"    construtor(valor: string): MinhaClasse {",
			"        return new MinhaClasse(valor);",
			"    }",
			"}",
			"",
			"// Usando a classe com a assinatura de construção",
			"const obj = new MinhaClasseConstruivel(“Olá“).construtor(“Mundo“);",
			"console.log(obj.valor); // Saída: Mundo",
						],
	"description": "classe função com uma assinatura de construção, no caso, implements em uma interface com uma"
	},

	"                      ": {
	"prefix": "_codigo typescript 3.6",
		"body": [
			"class Exemplo {",
			"    private static contadorPrivado: number = 0;",
			"    public static contadorPublico: number = 0;",
			"",
			"    private constructor() {}",
			"",
			"    private static incrementarContadorPrivado() {",
			"        Exemplo.contadorPrivado++;",
			"    }",
			"",
			"    public static incrementarContadorPublico() {",
			"        Exemplo.contadorPublico++;",
			"    }",
			"",
			"    public static obterContadorPrivado() {",
			"        return Exemplo.contadorPrivado;",
			"    }",
			"",
			"    public static obterContadorPublico() {",
			"        return Exemplo.contadorPublico;",
			"    }",
			"}",
			"",
			"// Uso dos membros estáticos",
			"Exemplo.incrementarContadorPrivado(); // Erro: o membro privado não é acessível fora da classe",
			"Exemplo.incrementarContadorPublico();",
			"console.log(Exemplo.obterContadorPrivado()); // Erro: o membro privado não é",
									],
	"description": "classe membros static com modificadores de acesso"
	},

	"                       ": {
	"prefix": "_codigo typescript 3.7",
		"body": [
			"class Lista<T> {",
			"    private elementos: T[] = [];",
			"",
			"    adicionar(elemento: T): void {",
			"        this.elementos.push(elemento);",
			"    }",
			"",
			"    obterTodos(): T[] {",
			"        return this.elementos;",
			"    }",
			"}",
			"",
			"// Usando a classe genérica",
			"const listaDeNumeros = new Lista<number>();",
			"listaDeNumeros.adicionar(1);",
			"listaDeNumeros.adicionar(2);",
			"listaDeNumeros.adicionar(3);",
			"console.log(listaDeNumeros.obterTodos()); // Saída: [1, 2, 3]",
			"",
			"const listaDeStrings = new Lista<string>();",
			"listaDeStrings.adicionar(“Olá“);",
			"listaDeStrings.adicionar(“Mundo“);",
			"console.log(listaDeStrings.obterTodos()); // Saída: [“Olá“, “Mundo“]",
						],
	"description": "classes genericas sem construtor"
	},

	"                        ": {
	"prefix": "_codigo typescript 3.8",
		"body": [
			"class Caixa<T> {",
			"    private conteudo: T;",
			"",
			"    constructor(conteudo: T) {",
			"        this.conteudo = conteudo;",
			"    }",
			"",
			"    obterConteudo(): T {",
			"        return this.conteudo;",
			"    }",
			"}",
			"",
			"// Usando a classe genérica com construtor",
			"const caixaDeNumero = new Caixa<number>(10);",
			"console.log(caixaDeNumero.obterConteudo()); // Saída: 10",
			"",
			"const caixaDeString = new Caixa<string>(“Olá, mundo!“);",
			"console.log(caixaDeString.obterConteudo()); // Saída: Olá, mundo!",
						],
	"description": "classes genericas com construtor"
	},

	"                         ": {
	"prefix": "_codigo typescript 3.9",
		"body": [
			"// Definindo um tipo que combina uma função e uma propriedade associada",
			"type FuncaoComPropriedade = {",
			"    propriedade: string;",
			"    funcao: (parametro: number) => void;",
			"};",
			"",
			"// Função que aceita um parâmetro do tipo FuncaoComPropriedade",
			"function usarFuncaoComPropriedade(objeto: FuncaoComPropriedade): void {",
			"    console.log(objeto.propriedade); // Acessando a propriedade associada",
			"    objeto.funcao(42); // Chamando a função",
			"}",
			"",
			"// Exemplo de uso",
			"const exemplo: FuncaoComPropriedade = {",
			"    propriedade: “Exemplo“,",
			"    funcao: (valor) => {",
			"        console.log(`A função foi chamada com o valor ${valor}`);",
			"    }",
			"};",
			"",
			"// Chamando a função com o objeto que possui a função e a propriedade associada",
			"usarFuncaoComPropriedade(exemplo);",
						],
	"description": "combinação de uma função com uma propriedade associada em um tipo, que pode ser usado como parâmetro em uma função normal"
	},

	"                          ": {
	"prefix": "_codigo typescript 4.1",
		"body": [
			"tsc seu-arquivo.ts"
						],
	"description": ""
	},

	"                           ": {
	"prefix": "_codigo typescript 4.2",
		"body": [
			"class Pessoa {",
			"    constructor(public nome: string, public idade: number) {",
			"        // Nenhuma lógica adicional necessária",
			"    }",
			"}",
			"",
			"// Exemplo de uso",
			"const pessoa1 = new Pessoa('João', 30);",
			"console.log(pessoa1.nome); // Saída: João",
			"console.log(pessoa1.idade); // Saída: 30",
						],
	"description": "construtor com campos publicos diretamente inserido"
	},

	"                            ": {
	"prefix": "_codigo typescript 4.3",
		"body": [
			"class Pessoa {",
			"    // Campos",
			"    nome: string;",
			"    idade: number;",
			"",
			"    // Construtor",
			"    constructor(nome: string, idade: number) {",
			"        this.nome = nome;",
			"        this.idade = idade;",
			"    }",
			"",
			"    // Método",
			"    exibirInformacoes(): void {",
			"        console.log(`Nome: ${this.nome}, Idade: ${this.idade}`);",
			"    }",
			"}",
			"",
			"// Exemplo de uso",
			"const pessoa1 = new Pessoa('João', 30);",
			"pessoa1.exibirInformacoes(); // Saída: Nome: João, Idade: 30",
						],
	"description": "declarar uma classe com campos, construtor e metodos"
	},

	"                             ": {
	"prefix": "_codigo typescript 4.4",
		"body": [
			"// Interface com a função que pode ser chamada de duas maneiras diferentes",
			"interface FuncaoEConstrutor {",
			"    (x: number): void; // Assinatura da função normal",
			"    new (x: number): FuncaoEConstrutor; // Assinatura do construtor",
			"}",
			"",
			"// Implementação da classe que usa a interface",
			"class MinhaClasse implements FuncaoEConstrutor {",
			"    constructor(public x: number) {} // Implementação do construtor",
			"",
			"    // Implementação da função normal",
			"    callMe(x: number): void {",
			"        console.log(`Chamada da função normal com ${x}`);",
			"    }",
			"}",
			"",
			"// Exemplo de uso",
			"const instancia = new MinhaClasse(10);",
			"instancia.callMe(20); // Saída: Chamada da função normal com 20",
						],
	"description": "declarar uma função que pode ser chamada com ou sem new, no caso, uma função normal e outra construtora em uma interface. Implementado por uma classe"
	},

	"                              ": {
	"prefix": "_codigo typescript 4.5",
		"body": [
			"// Objeto literal com uma função que pode ser chamada com ou sem new",
			"const meuObjeto: {",
			"    funcao: {",
			"        (x: number): void; // Assinatura da função normal",
			"        new (x: number): { x: number }; // Assinatura do construtor",
			"    };",
			"} = {",
			"    // Implementação da função normal",
			"    funcao(x: number): void {",
			"        console.log(`Chamada da função normal com ${x}`);",
			"    },",
			"",
			"    // Implementação do construtor",
			"    funcao: class {",
			"        constructor(public x: number) {}",
			"    }",
			"};",
			"",
			"// Exemplo de uso",
			"const instancia1 = new meuObjeto.funcao(10);",
			"console.log(instancia1.x); // Saída: 10",
			"",
			"meuObjeto.funcao(20); // Saída: Chamada da função normal com 20",
						],
	"description": "declarar uma função que pode ser chamada com ou sem new, no caso, uma função normal e outra construtora em uma interface. Implementado por um objeto literal"
	},

	"                               ": {
	"prefix": "_codigo typescript 4.6",
		"body": [
			"// Definindo o tipo de união para os parâmetros da função",
			"type Parametro = string | number;",
			"",
			"// Definindo a função com o tipo de união nos parâmetros",
			"function minhaFuncao(param1: Parametro, param2: Parametro): void {",
			"    // Exemplo simples de uso",
			"    console.log(`Param1: ${param1}, Param2: ${param2}`);",
			"}",
			"",
			"// Exemplos de chamadas da função",
			"minhaFuncao(“Olá“, 42); // Saída: Param1: Olá, Param2: 42",
			"minhaFuncao(100, “Mundo“); // Saída: Param1: 100, Param2: Mundo",
			"minhaFuncao(true, null); // Erro de compilação, pois os tipos não são compatíveis com o tipo de união",
						],
	"description": "definindo um tipo de união em uma função"
	},

	"                                ": {
	"prefix": "_codigo typescript 4.7",
		"body": [
			"// Definindo uma tupla",
			"const minhaTupla: [number, string, boolean] = [42, “Olá“, true];",
			"",
			"// Desestruturando a tupla e atribuindo os valores a variáveis constantes",
			"const [numero, texto, booleano] = minhaTupla;",
			"",
			"// Exibindo os valores das variáveis",
			"console.log(`Número: ${numero}, Texto: ${texto}, Booleano: ${booleano}`);.",
						],
	"description": "desestruturar tuplas, const com tipo tupla"
	},

	"                                 ": {
	"prefix": "_codigo typescript 4.8",
		"body": [
			"// Função com parâmetro de tupla",
			"function processarTupla([a, b]: [number, string]) {",
			"    console.log(`Número: ${a}, Texto: ${b}`);",
			"}",
			"",
			"// Chamando a função com uma tupla como argumento",
			"const minhaTupla: [number, string] = [42, “Olá“];",
			"processarTupla(minhaTupla);",
						],
	"description": "desestruturar tupla como parametro de uma função"
	},

	"                                  ": {
	"prefix": "_codigo typescript 4.9",
		"body": [
			"// Definição da função com desestruturação de parâmetros",
			"function exibirDadosUsuario({ nome, idade }: { nome: string; idade: number }) {",
			"    console.log(`Nome: ${nome}, Idade: ${idade}`);",
			"}",
			"",
			"// Chamando a função com um objeto contendo os dados do usuário",
			"const usuario = { nome: “João“, idade: 30 };",
			"exibirDadosUsuario(usuario);",
						],
	"description": "função com desestruturação de parâmetros"
	},

	"                                   ": {
	"prefix": "_codigo typescript 5.1",
		"body": [
			"// Definição de enum",
			"enum DiasDaSemana {",
			"    Domingo,",
			"    Segunda,",
			"    Terca,",
			"    Quarta,",
			"    Quinta,",
			"    Sexta,",
			"    Sabado",
			"}",
			"",
			"// Uso da enum",
			"let dia: DiasDaSemana = DiasDaSemana.Quarta;",
			"console.log(“Dia:“, dia); // Saída: Dia: 3 (Índice da enum para Quarta)",
			"",
			"// Atribuição direta de valores numéricos para enum",
			"enum Numeros {",
			"    Um = 1,",
			"    Dois = 2,",
			"    Tres = 3,",
			"    Quatro = 4",
			"}",
			"",
			"let numero: Numeros = Numeros.Tres;",
			"console.log(“Número:“, numero); // Saída: Número: 3",
						],
	"description": "Enums"
	},

	"                                    ": {
	"prefix": "_codigo typescript 5.2",
		"body": [
			"// Função genérica",
			"function imprimir<T>(arg: T): void {",
			"    console.log(arg);",
			"}",
			"",
			"// Chamando a função com tipo string",
			"imprimir<string>(“Olá, mundo!“); // Saída: Olá, mundo!",
			"",
			"// Chamando a função com tipo number",
			"imprimir<number>(42); // Saída: 42",
						],
	"description": "especificar o argumento passado para a função génerica"
	},

	"                                     ": {
	"prefix": "_codigo typescript 5.3",
		"body": [
			"// Definição da interface",
			"interface Animal {",
			"    nome: string;",
			"    som(): void;",
			"}",
			"",
			"// Classe base",
			"class Mamifero {",
			"    constructor(public nome: string) {}",
			"}",
			"",
			"// Classe derivada que estende a classe Mamifero e implementa a interface Animal",
			"class Cachorro extends Mamifero implements Animal {",
			"    constructor(nome: string) {",
			"        super(nome);",
			"    }",
			"",
			"    som(): void {",
			"        console.log(“Au au!“);",
			"    }",
			"}",
			"",
			"// Instância da classe Cachorro",
			"const cachorro = new Cachorro(“Fido“);",
			"console.log(cachorro.nome); // Saída: Fido",
			"cachorro.som(); // Saída: Au au!",
						],
	"description": "estendendo e tambem implementando uma interface"
	},

	"                                      ": {
	"prefix": "_codigo typescript 5.4",
		"body": [
			"// Definição dos tipos",
			"interface Carro {",
			"    marca: string;",
			"    modelo: string;",
			"}",
			"",
			"interface Veiculo {",
			"    rodas: number;",
			"    motor: string;",
			"}",
			"",
			"// Definição de um novo tipo combinando as propriedades de Carro e Veiculo",
			"type CarroComRodas = Carro & Veiculo;",
			"",
			"// Exemplo de uso",
			"const meuCarro: CarroComRodas = {",
			"    marca: “Toyota“,",
			"    modelo: “Corolla“,",
			"    rodas: 4,",
			"    motor: “1.8L“",
			"};",
			"",
			"console.log(meuCarro); // Saída: { marca: 'Toyota', modelo: 'Corolla', rodas: 4, motor: '1.8L' }",
						],
	"description": "estendendo um tipo por meio de interseções"
	},

	"                                       ": {
	"prefix": "_codigo typescript 5.5",
		"body": [
			"// Definindo uma união de tipos",
			"type NumeroOuString = number | string;",
			"",
			"// Função que verifica o tipo da variável",
			"function verificarTipo(valor: NumeroOuString) {",
			"    if (typeof valor === “number“) {",
			"        // Aqui, TypeScript estreita o tipo de valor para number",
			"        console.log(“É um número:“, valor.toFixed(2));",
			"    } else {",
			"        // Aqui, TypeScript estreita o tipo de valor para string",
			"        console.log(“É uma string:“, valor.toUpperCase());",
			"    }",
			"}",
			"",
			"// Exemplo de uso",
			"verificarTipo(42);    // Sa",
						],
	"description": "estreitamento em tipos de união"
	},

	"                                        ": {
	"prefix": "_codigo typescript 5.6",
		"body": [
			"function exibirMensagem(this: { nome: string }) {",
			"    console.log(“Olá,“, this.nome);",
			"}",
			"",
			"// Chamando a função com o contexto especificado",
			"exibirMensagem.call({ nome: “João“ }); // Saída: Olá, João",
						],
	"description": "declare o tipo this no corpo da função"
	},

	"                                         ": {
	"prefix": "_codigo typescript 5.7",
		"body": [
			"// Definição da classe base",
			"class Animal {",
			"    nome: string;",
			"",
			"    constructor(nome: string) {",
			"        this.nome = nome;",
			"    }",
			"",
			"    mover(distancia: number = 0) {",
			"        console.log(`${this.nome} moveu ${distancia} metros.`);",
			"    }",
			"}",
			"",
			"// Classe derivada que estende a classe base Animal",
			"class Cachorro extends Animal {",
			"    latir() {",
			"        console.log(“Au Au!“);",
			"    }",
			"}",
			"",
			"// Criando uma instância da classe derivada Cachorro",
			"const meuCachorro = new Cachorro(“Fido“);",
			"",
			"// Chamando métodos da classe base",
			"meuCachorro.mover(10); // Saída: Fido moveu 10 metros.",
			"",
			"// Chamando métodos da classe derivada",
			"meuCachorro.latir(); // Saída: Au Au!",
						],
	"description": "extends em classe"
	},

	"                                          ": {
	"prefix": "_codigo typescript 5.8",
		"body": [
			"// Função com parâmetro padrão",
			"function saudacao(nome: string = “mundo“) {",
			"    console.log(`Olá, ${nome}!`);",
			"}",
			"",
			"// Chamando a função sem argumentos",
			"saudacao(); // Saída: Olá, mundo!",
			"",
			"// Chamando a função com um argumento",
			"saudacao(“amigo“); // Saída: Olá, amigo!",
						],
	"description": ""
	},

	"                                           ": {
	"prefix": "_codigo typescript 5.9",
		"body": [
			"// Função genérica que recebe e retorna o mesmo tipo de argumento",
			"function identidade<T>(arg: T): T {",
			"    return arg;",
			"}",
			"",
			"// Chamadas da função identidade com tipos diferentes",
			"let numero = identidade<number>(10); // Passando um número",
			"let texto = identidade<string>(“Olá“); // Passando uma string",
			"",
			"console.log(numero); // Saída: 10",
			"console.log(texto); // Saída: Olá",
						],
	"description": "função Genérica"
	},

	"                                            ": {
	"prefix": "_codigo typescript 6.1",
		"body": [
			"// Função genérica com vários parâmetros",
			"function mesclarObjetos<T, U>(obj1: T, obj2: U): T & U {",
			"    return { ...obj1, ...obj2 };",
			"}",
			"",
			"// Chamada da função mesclarObjetos com diferentes tipos de objetos",
			"let objeto1 = { nome: “João“ };",
			"let objeto2 = { idade: 30 };",
			"",
			"let objetoMesclado = mesclarObjetos(objeto1, objeto2);",
			"",
			"console.log(objetoMesclado); // Saída: { nome: “João“, idade: 30 }",
						],
	"description": "funções Genéricas com varios parameotros"
	},

	"                                             ": {
	"prefix": "_codigo typescript 6.2",
		"body": [
			"class Pessoa {",
			"    private _nome: string;",
			"    private _idade: number;",
			"",
			"    constructor(nome: string, idade: number) {",
			"        this._nome = nome;",
			"        this._idade = idade;",
			"    }",
			"",
			"    // Getter para o nome",
			"    get nome(): string {",
			"        return this._nome;",
			"    }",
			"",
			"    // Setter para o nome",
			"    set nome(novoNome: string) {",
			"        this._nome = novoNome;",
			"    }",
			"",
			"    // Getter para a idade",
			"    get idade(): number {",
			"        return this._idade;",
			"    }",
			"",
			"    // Setter para a idade",
			"    set idade(novaIdade: number) {",
			"        this._idade = novaIdade;",
			"    }",
			"}",
			"",
			"// Exemplo de uso",
			"let pessoa = new Pessoa(“João“, 30);",
			"console.log(pessoa.nome); // Saída: João",
			"console.log(pessoa.idade); // Saída: 30",
			"",
			"pessoa.nome = “Maria“;",
			"pessoa.idade = 25;",
			"",
			"console.log(pessoa.nome); // Saída: Maria",
			"console.log(pessoa.idade); // Saída: 25",
						],
	"description": "get/set em classes"
	},

	"                                              ": {
	"prefix": "_codigo typescript 6.3",
		"body": [
			"interface Animal {",
			"    tipo: string;",
			"    som(): void;",
			"}",
			"",
			"class Cachorro implements Animal {",
			"    tipo: string;",
			"",
			"    constructor(tipo: string) {",
			"        this.tipo = tipo;",
			"    }",
			"",
			"    som(): void {",
			"        console.log(“Au au!“);",
			"    }",
			"}",
			"",
			"// Exemplo de uso",
			"let cachorro = new Cachorro(“Cachorro“);",
			"console.log(cachorro.tipo); // Saída: Cachorro",
			"cachorro.som(); // Saída: Au au!",
						],
	"description": "implements em classes"
	},

	"                                               ": {
	"prefix": "_codigo typescript 6.4",
		"body": [
			"// Função genérica",
			"function mostrarTipo<T>(arg: T): void {",
			"    console.log(typeof arg);",
			"}",
			"",
			"// Chamando a função com tipo explícito",
			"mostrarTipo<string>(“Olá“); // Saída: string",
			"mostrarTipo<number>(42);    // Saída: number",
			"mostrarTipo<boolean>(true); // Saída: boolean",
						],
	"description": "inferencia explicita ao chamar uma função génerica"
	},

	"                                                ": {
	"prefix": "_codigo typescript 6.5",
		"body": [
			"// Definição de uma interface",
			"interface Pessoa {",
			"    nome: string;",
			"    idade: number;",
			"    saudacao(): void;",
			"}",
			"",
			"// Implementação da interface em uma classe",
			"class Aluno implements Pessoa {",
			"    nome: string;",
			"    idade: number;",
			"",
			"    constructor(nome: string, idade: number) {",
			"        this.nome = nome;",
			"        this.idade = idade;",
			"    }",
			"",
			"    saudacao() {",
			"        console.log(`Olá, meu nome é ${this.nome} e tenho ${this.idade} anos.`);",
			"    }",
			"}",
			"",
			"// Criando uma instância da classe Aluno",
			"const aluno = new Aluno(“João“, 20);",
			"aluno.saudacao(); // Saída: Olá, meu nome é João e tenho 20 anos.",
						],
	"description": "interface"
	},

	"                                                 ": {
	"prefix": "_codigo typescript 6.6",
		"body": [
			"// Definição de uma interface com um tipo genérico",
			"interface Caixa<Tipo> {",
			"    valor: Tipo;",
			"}",
			"",
			"// Exemplo de uso da interface com um tipo genérico",
			"const caixaNumero: Caixa<number> = { valor: 10 };",
			"const caixaString: Caixa<string> = { valor: “Olá“ };",
			"",
			"console.log(caixaNumero.valor); // Saída: 10",
			"console.log(caixaString.valor); // Saída: Olá",
						],
	"description": "interface com um tipo generico"
	},

	"                                                  ": {
	"prefix": "_codigo typescript 6.7",
		"body": [
			"// Definição de uma interface com membros normais e uma assinatura de índice",
			"interface Pessoa {",
			"    nome: string;",
			"    idade: number;",
			"    [propriedadeExtra: string]: any; // Assinatura de índice para propriedades adicionais",
			"}",
			"",
			"// Exemplo de uso da interface Pessoa",
			"const pessoa: Pessoa = {",
			"    nome: “João“,",
			"    idade: 30,",
			"    email: “joao@example.com“, // Propriedade adicional definida usando a assinatura de índice",
			"    telefone: “123456789“",
			"};",
			"",
			"console.log(pessoa.nome); // Saída: João",
			"console.log(pessoa.idade); // Saída: 30",
			"console.log(pessoa.email); // Saída: joao@example.com",
			"console.log(pessoa.telefone); // Saída: 123456789",
						],
	"description": "membros normais e uma assinatura de indice para caso eu precise mais propriedades extra"
	},

	"                                                   ": {
	"prefix": "_codigo typescript 6.8",
		"body": [
			"class Exemplo {",
			"    // Membros estáticos",
			"    static valorEstatico: number = 10;",
			"    static metodoEstatico(): void {",
			"        console.log(“Método estático“);",
			"    }",
			"",
			"    // Membros públicos",
			"    public nome: string;",
			"    public idade: number;",
			"",
			"    constructor(nome: string, idade: number) {",
			"        this.nome = nome;",
			"        this.idade = idade;",
			"    }",
			"",
			"    // Métodos públicos",
			"    public saudacao(): void {",
			"        console.log(`Olá, meu nome é ${this.nome} e tenho ${this.idade} anos.`);",
			"    }",
			"",
			"    // Método privado",
			"    private metodoPrivado(): void {",
			"        console.log(“Método privado“);",
			"    }",
			"",
			"    // Método protegido",
			"    protected metodoProtegido(): void {",
			"        console.log(“Método protegido“);",
			"    }",
			"}",
			"",
			"// Uso da classe Exemplo",
			"const instancia = new Exemplo(“Alice“, 25);",
			"console.log(instancia.nome); // Saída: Alice",
			"console.log(instancia.idade); // Saída: 25",
			"instancia.saudacao(); // Saída: Olá, meu nome é Alice e tenho 25 anos.",
			"Exemplo.metodoEstatico(); // Saída: Método estático",
						],
	"description": "metodos em classes com tipagem em todos os tipos diferentes de membros possiveis"
	},

	"                                                    ": {
	"prefix": "_codigo typescript 6.9",
		"body": [
			"let exemplo: string | null = “Olá Mundo“;",
			"// Vamos assegurar ao TypeScript que 'exemplo' não é nulo",
			"const comprimento: number = exemplo!.length;",
			"console.log(comprimento); // Saída: 9",
						],
	"description": "operador de Asserção Não Nulo (Postfix !)"
	},

	"                                                     ": {
	"prefix": "_codigo typescript 7.1",
		"body": [
			"class Exemplo {",
			"    constructor();",
			"    constructor(nome: string);",
			"    constructor(nome?: string) {",
			"        if (nome) {",
			"            console.log(`Olá, ${nome}!`);",
			"        } else {",
			"            console.log(“Olá, mundo!“);",
			"        }",
			"    }",
			"}",
			"",
			"// Usando a sobrecarga do construtor",
			"const exemplo1 = new Exemplo(); // Saída: Olá, mundo!",
			"const exemplo2 = new Exemplo(“João“); // Saída: Olá, João!",
						],
	"description": "overloads em construtores de classe"
	},

	"                                                      ": {
	"prefix": "_codigo typescript 7.2",
		"body": [
			"function saudacao(nome?: string) {",
			"    if (nome) {",
			"        console.log(`Olá, ${nome}!`);",
			"    } else {",
			"        console.log(“Olá, mundo!“);",
			"    }",
			"}",
			"",
			"saudacao(); // Saída: Olá, mundo!",
			"saudacao(“João“); // Saída: Olá, João!",
			"",
			"",
			"function saudacao(nome: string = “mundo“) {",
			" console.log(`Olá, ${nome}!`);",
			"}",
			"",
			"saudacao(); // Saída: Olá, mundo!",
			"saudacao(“João“); // Saída: Olá, João!",
					],
	"description": "parametro de funções opcionais com ? e valor padrão"
	},

	"                                                       ": {
	"prefix": "_codigo typescript 7.3",
		"body": [
			"function somar(...numeros: number[]): number {",
			"    return numeros.reduce((total, numero) => total + numero, 0);",
			"}",
			"",
			"console.log(somar(1, 2, 3)); // Saída: 6",
			"console.log(somar(1, 2, 3, 4, 5)); // Saída: 15",
						],
	"description": "parametro rest em função"
		},

	"                                                        ": {
	"prefix": "_codigo typescript 7.4",
		"body": [
			"type Callback = (resultado: string, erro?: Error) => void;",
			"",
			"function executarOperacao(callback: Callback) {",
			"    // Simulando uma operação",
			"    const sucesso = Math.random() < 0.5;",
			"    if (sucesso) {",
			"        callback(“Operação bem-sucedida“);",
			"    } else {",
			"        callback(““, new Error(“Erro durante a operação“));",
			"    }",
			"}",
			"",
			"// Exemplo de uso",
			"executarOperacao((resultado, erro) => {",
			"    if (erro) {",
			"        console.error(“Erro:“, erro.message);",
			"    } else {",
			"        console.log(“Resultado:“, resultado);",
			"    }",
			"});",
						],
	"description": "parâmetros opcionais em retornos de chamada/calback"
		},

	/*"": {
	"prefix": "",
		"body": [
							],
	"description": ""
	},*/
}