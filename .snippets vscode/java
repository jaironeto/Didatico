{
	" ": {
	"prefix": "_java 1.1",
		"body": [
			"class MountainBike extends Bicycle {\r\n\r\n    // new fields and methods defining \r\n    // a mountain bike would go here\r\n\r\n}"
		],
	"description": "Herança"
	},

	"  ": {
	"prefix": "_java 1.2",
			"body": [
				"final int CONSTANTE = 10;\n"
			],
	"description": "final palavra-chave para uma variavel"
	},

	"   ": {
	"prefix": "_java 1.3",
			"body": [
				"class Pai {\r\n    public final void metodoFinal() {\r\n        // Este método não pode ser sobrescrito\r\n    }\r\n}\r\n"
			],
	"description": "final palavra-chave para um metodo"
	},

	"    ": {
	"prefix": "_java 1.4",
			"body": [
				"final class ClasseFinal {\r\n    // Nenhuma outra classe pode estender esta classe\r\n}\r\n"
			],
	"description": "final palavra-chave para uma classe"
	},

	"     ": {
	"prefix": "_java 1.5",
			"body": [
				"class ArrayDemo {\r\n    public static void main(String[] args) {\r\n        // declares an array of integers\r\n        int[] anArray;\r\n\r\n        // allocates memory for 10 integers\r\n        anArray = new int[10];\r\n           \r\n        // initialize first element\r\n        anArray[0] = 100;\r\n        // initialize second element\r\n        anArray[1] = 200;\r\n        // and so forth\r\n        anArray[2] = 300;\r\n        anArray[3] = 400;\r\n        anArray[4] = 500;\r\n        anArray[5] = 600;\r\n        anArray[6] = 700;\r\n        anArray[7] = 800;\r\n        anArray[8] = 900;\r\n        anArray[9] = 1000;\r\n\r\n        System.out.println(\"Element at index 0: \"\r\n                           + anArray[0]);\r\n        System.out.println(\"Element at index 1: \"\r\n                           + anArray[1]);\r\n        System.out.println(\"Element at index 2: \"\r\n                           + anArray[2]);\r\n        System.out.println(\"Element at index 3: \"\r\n                           + anArray[3]);\r\n        System.out.println(\"Element at index 4: \"\r\n                           + anArray[4]);\r\n        System.out.println(\"Element at index 5: \"\r\n                           + anArray[5]);\r\n        System.out.println(\"Element at index 6: \"\r\n                           + anArray[6]);\r\n        System.out.println(\"Element at index 7: \"\r\n                           + anArray[7]);\r\n        System.out.println(\"Element at index 8: \"\r\n                           + anArray[8]);\r\n        System.out.println(\"Element at index 9: \"\r\n                           + anArray[9]);\r\n    }\r\n} "
			],
	"description": "Declarar, alocar memoria e inicializar um array"
	},

	"      ": {
	"prefix": "_java 1.6",
			"body": [
				"// this form is discouraged\r\nfloat anArrayOfFloats[];"
			],
	"description": "Outra forma nao usual de declarar array"
	},

	"       ": {
	"prefix": "_java 1.7",
			"body": [
				"int[] umaArray = { \r\n    100, 200, 300, \r\n    400, 500, 600, \r\n    700, 800, 900, 1000 \r\n};"
			],
	"description": "Declarar um array abreviado com inicialização"
	},

	"        ": {
	"prefix": "_java 1.8",
			"body": [
			"classe MultiDimArrayDemo { \r\n    public static void main(String[] args) { \r\n        String[][] nomes = { \r\n            {\"Sr. \", \"Sra. \", \"Sra. \"}, \r\n            {\"Smith\", \"Jones\"} \r\n        }; \r\n        // Sr. Smith \r\n        System.out.println(nomes[0][0] + nomes[1][0]); \r\n        // Sra. Jones \r\n        System.out.println(nomes[0][2] + nomes[1][1]); \r\n    } \r\n}"
			],
	"description": "Matriz de mais de uma dimensao com inicialização"
	},

	"         ": {
	"prefix": "_java 1.9",
			"body": [
				"class ConcatDemo {\r\n    public static void main(String[] args){\r\n        String firstString = \"This is\";\r\n        String secondString = \" a concatenated string.\";\r\n        String thirdString = firstString+secondString;\r\n        System.out.println(thirdString);\r\n    }\r\n}"
			],
	"description": "Concatenar duas string"
	},

	"          ": {
	"prefix": "_java 2.1",
			"body": [
			"class IfElseDemo {\r\n    public static void main(String[] args) {\r\n\r\n        int testscore = 76;\r\n        char grade;\r\n\r\n        if (testscore >= 90) {\r\n            grade = 'A';\r\n        } else if (testscore >= 80) {\r\n            grade = 'B';\r\n        } else if (testscore >= 70) {\r\n            grade = 'C';\r\n        } else if (testscore >= 60) {\r\n            grade = 'D';\r\n        } else {\r\n            grade = 'F';\r\n        }\r\n        System.out.println(\"Grade = \" + grade);\r\n    }\r\n}"
			],
	"description": "if...else"
	},

	"           ": {
	"prefix": "_java 2.2",
			"body": [
			"public class SwitchDemo {\r\n    public static void main(String[] args) {\r\n\r\n        int month = 8;\r\n        String monthString;\r\n        switch (month) {\r\n            case 1:  monthString = \"January\";\r\n                     break;\r\n            case 2:  monthString = \"February\";\r\n                     break;\r\n            case 3:  monthString = \"March\";\r\n                     break;\r\n            case 4:  monthString = \"April\";\r\n                     break;\r\n            case 5:  monthString = \"May\";\r\n                     break;\r\n            case 6:  monthString = \"June\";\r\n                     break;\r\n            case 7:  monthString = \"July\";\r\n                     break;\r\n            case 8:  monthString = \"August\";\r\n                     break;\r\n            case 9:  monthString = \"September\";\r\n                     break;\r\n            case 10: monthString = \"October\";\r\n                     break;\r\n            case 11: monthString = \"November\";\r\n                     break;\r\n            case 12: monthString = \"December\";\r\n                     break;\r\n            default: monthString = \"Invalid month\";\r\n                     break;\r\n        }\r\n        System.out.println(monthString);\r\n    }\r\n}"
			],
	"description": "Switch com default"
},

	"            ": {
	"prefix": "_java 2.3",
			"body": [
			"class WhileDemo {\r\n    public static void main(String[] args){\r\n        int count = 1;\r\n        while (count < 11) {\r\n            System.out.println(\"Count is: \" + count);\r\n            count++;\r\n        }\r\n    }\r\n}"
			],
	"description": "while"
	},

	"             ": {
	"prefix": "_java 2.4",
			"body": [
			"class DoWhileDemo {\r\n    public static void main(String[] args){\r\n        int count = 1;\r\n        do {\r\n            System.out.println(\"Count is: \" + count);\r\n            count++;\r\n        } while (count < 11);\r\n    }\r\n}"
			],
	"description": "do while"
	},

	"              ": {
	"prefix": "_java 2.5",
			"body": [
			"class ForDemo {\r\n    public static void main(String[] args){\r\n         for(int i=1; i<11; i++){\r\n              System.out.println(\"Count is: \" + i);\r\n         }\r\n    }\r\n}"
			],
	"description": "for loop"
	},

	"               ": {
	"prefix": "_java 2.6",
			"body": [
				"class EnhancedForDemo {\r\n    public static void main(String[] args){\r\n         int[] numbers = \r\n             {1,2,3,4,5,6,7,8,9,10};\r\n         for (int item : numbers) {\r\n             System.out.println(\"Count is: \" + item);\r\n         }\r\n    }\r\n}"
			],
	"description": "for loop aprimorado"
	},

	"                ": {
	"prefix": "_java 2.7",
			"body": [
			"class BreakWithLabelDemo {\r\n    public static void main(String[] args) {\r\n\r\n        int[][] arrayOfInts = { \r\n            { 32, 87, 3, 589 },\r\n            { 12, 1076, 2000, 8 },\r\n            { 622, 127, 77, 955 }\r\n        };\r\n        int searchfor = 12;\r\n\r\n        int i;\r\n        int j = 0;\r\n        boolean foundIt = false;\r\n\r\n    search:\r\n        for (i = 0; i < arrayOfInts.length; i++) {\r\n            for (j = 0; j < arrayOfInts[i].length;\r\n                 j++) {\r\n                if (arrayOfInts[i][j] == searchfor) {\r\n                    foundIt = true;\r\n                    break search;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (foundIt) {\r\n            System.out.println(\"Found \" + searchfor + \" at \" + i + \", \" + j);\r\n        } else {\r\n            System.out.println(searchfor + \" not in the array\");\r\n        }\r\n    }\r\n}"
			],
	"description": "label e uma break encerrando a label externa"
	},

	"                 ": {
	"prefix": "_java 2.8",
			"body": [
			"class BreakWithLabelDemo {\r\n    public static void main(String[] args) {\r\n\r\n        int[][] arrayOfInts = { \r\n            { 32, 87, 3, 589 },\r\n            { 12, 1076, 2000, 8 },\r\n            { 622, 127, 77, 955 }\r\n        };\r\n        int searchfor = 12;\r\n\r\n        int i;\r\n        int j = 0;\r\n        boolean foundIt = false;\r\n\r\n    search:\r\n        for (i = 0; i < arrayOfInts.length; i++) {\r\n            for (j = 0; j < arrayOfInts[i].length;\r\n                 j++) {\r\n                if (arrayOfInts[i][j] == searchfor) {\r\n                    foundIt = true;\r\n                    break search;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (foundIt) {\r\n            System.out.println(\"Found \" + searchfor + \" at \" + i + \", \" + j);\r\n        } else {\r\n            System.out.println(searchfor + \" not in the array\");\r\n        }\r\n    }\r\n}"
			],
	"description": "continue palavra-chave"
	},

	"                  ": {
	"prefix": "_java 2.9",
			"body": [
			"public class Bicycle {\r\n        \r\n    private int cadence;\r\n    private int gear;\r\n    private int speed;\r\n        \r\n    public Bicycle(int startCadence, int startSpeed, int startGear) {\r\n        gear = startGear;\r\n        cadence = startCadence;\r\n        speed = startSpeed;\r\n    }\r\n        \r\n    public int getCadence() {\r\n        return cadence;\r\n    }\r\n        \r\n    public void setCadence(int newValue) {\r\n        cadence = newValue;\r\n    }\r\n        \r\n    public int getGear() {\r\n        return gear;\r\n    }\r\n        \r\n    public void setGear(int newValue) {\r\n        gear = newValue;\r\n    }\r\n        \r\n    public int getSpeed() {\r\n        return speed;\r\n    }\r\n        \r\n    public void applyBrake(int decrement) {\r\n        speed -= decrement;\r\n    }\r\n        \r\n    public void speedUp(int increment) {\r\n        speed += increment;\r\n    }\r\n}"
			],
	"description": "construtor e encapsulamento"
	},

	"                   ": {
	"prefix": "_java 3.1",
			"body": [
			"public double calculateAnswer(double wingSpan, int numberOfEngines,\r\n                              double length, double grossTons) {\r\n    //do the calculation here\r\n}"
			],
	"description": "declaração simples de um metodo"
	},

	"                    ": {
	"prefix": "_java 3.2",
			"body": [
				"public class DataArtist {\r\n    ...\r\n    public void draw(String s) {\r\n        ...\r\n    }\r\n    public void draw(int i) {\r\n        ...\r\n    }\r\n    public void draw(double f) {\r\n        ...\r\n    }\r\n    public void draw(int i, double f) {\r\n        ...\r\n    }\r\n}"
			],
	"description": "sobrecarga de metodo"
	},

	"                     ": {
	"prefix": "_java 3.3",
			"body": [
			"public class ExemploArray {\n    public static void main(String[] args) {\n        // Criação de um array de inteiros\n        int[] numeros = {1, 2, 3, 4, 5};\n\n        // Chamada do método que aceita um array como parâmetro\n        imprimirArray(numeros);\n    }\n\n    // Método que aceita um array de inteiros como parâmetro e imprime os elementos\n    public static void imprimirArray(int[] array) {\n        for (int num : array) {\n            System.out.println(num);\n        }\n    }\n}"
			],
	"description": "metodo com um array como parametro"
	},

	"                      ": {
	"prefix": "_java 3.4",
			"body": [
				"public Polygon polygonFrom(Point... corners) {\r\n    int numberOfSides = corners.length;\r\n    double squareOfSide1, lengthOfSide1;\r\n    squareOfSide1 = (corners[1].x - corners[0].x)\r\n                     * (corners[1].x - corners[0].x) \r\n                     + (corners[1].y - corners[0].y)\r\n                     * (corners[1].y - corners[0].y);\r\n    lengthOfSide1 = Math.sqrt(squareOfSide1);\r\n\r\n    // more method body code follows that creates and returns a \r\n    // polygon connecting the Points\r\n}"
			],
	"description": "sintaxe spreed"
	},

	"                       ": {
	"prefix": "_java 3.5",
			"body": [
				"Point originOne = new Point(23, 94);\r\nRectangle rectOne = new Rectangle(originOne, 100, 200);\r\nRectangle rectTwo = new Rectangle(50, 100);"
			],
	"description": "Instanciação"
	},

	"                        ": {
	"prefix": "_java 3.6",
			"body": [
			"objectReference.fieldName\r\nobjectReference.methodName();\r\n"			],
	"description": "Referenciar um campo/metodo de objeto"
	},

	"                         ": {
	"prefix": "_java 3.7",
			"body": [
				"public Bicycle seeWhosFastest(Bicycle myBike, Bicycle yourBike,\r\n                              Environment env) {\r\n    Bicycle fastest;\r\n    // code to calculate which bike is \r\n    // faster, given each bike's gear \r\n    // and cadence and given the \r\n    // environment (terrain and wind)\r\n    return fastest;\r\n}"
			],
	"description": "Método retornando um tipo de referência"
	},

	"                          ": {
	"prefix": "_java 3.8",
			"body": [
				"public class Point {\r\n    public int x = 0;\r\n    public int y = 0;\r\n        \r\n    //constructor\r\n    public Point(int x, int y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}"
			],
	"description": "Usar this em um construtor para resolver problema de identificadores iguais"
	},

	"                           ": {
	"prefix": "_java 3.9",
			"body": [
				"public class Rectangle {\r\n    private int x, y;\r\n    private int width, height;\r\n        \r\n    public Rectangle() {\r\n        this(0, 0, 1, 1);\r\n    }\r\n    public Rectangle(int width, int height) {\r\n        this(0, 0, width, height);\r\n    }\r\n    public Rectangle(int x, int y, int width, int height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n    ...\r\n}"
			],
	"description": "Construtor usando this para chamar outro construtor"
	},

	"                            ": {
	"prefix": "_java 4.1",
			"body": [
			"public class Bicycle {\r\n        \r\n    private int cadence;\r\n    private int gear;\r\n    private int speed;\r\n        \r\n    // add an instance variable for the object ID\r\n    private int id;\r\n    \r\n    // add a class variable for the\r\n    // number of Bicycle objects instantiated\r\n    private static int numberOfBicycles = 0;\r\n        ...\r\n}"
			],
	"description": "Membro static"
	},

	"                             ": {
	"prefix": "_java 4.2",
			"body": [
			"static final double PI = 3.141592653589793;"
			],
	"description": "campo static final"
	},

	"                              ": {
	"prefix": "_java 4.3",
			"body": [
			"public class ExemploBlocoEstatico {\r\n\r\n    // Variável estática\r\n    static int contador;\r\n\r\n    // Bloco de inicialização estático\r\n    static {\r\n        System.out.println(\"Bloco de inicialização estático 1 executado.\");\r\n        contador = 10;  // Inicializando a variável estática\r\n    }\r\n\r\n    // Outro bloco de inicialização estático\r\n    static {\r\n        System.out.println(\"Bloco de inicialização estático 2 executado.\");\r\n        contador += 5;  // Modificando a variável estática\r\n    }\r\n\r\n    // Construtor da classe\r\n    public ExemploBlocoEstatico() {\r\n        System.out.println(\"Construtor executado. Valor de contador: \" + contador);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Método main iniciado.\");\r\n\r\n        // Criando uma instância da classe\r\n        ExemploBlocoEstatico obj1 = new ExemploBlocoEstatico();\r\n\r\n        // Criando outra instância da classe\r\n        ExemploBlocoEstatico obj2 = new ExemploBlocoEstatico();\r\n    }\r\n}\r\n"
			],
	"description": "blocos de inicialização estáticos"
	},

	"                               ": {
	"prefix": "_java 4.4",
			"body": [
			"public class ExemploBlocoEstatico {\r\n\r\n    // Variável estática\r\n    static int contador;\r\n\r\n    // Bloco de inicialização estático\r\n    static {\r\n        System.out.println(\"Bloco de inicialização estático 1 executado.\");\r\n        contador = 10;  // Inicializando a variável estática\r\n    }\r\n\r\n    // Outro bloco de inicialização estático\r\n    static {\r\n        System.out.println(\"Bloco de inicialização estático 2 executado.\");\r\n        contador += 5;  // Modificando a variável estática\r\n    }\r\n\r\n    // Construtor da classe\r\n    public ExemploBlocoEstatico() {\r\n        System.out.println(\"Construtor executado. Valor de contador: \" + contador);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Método main iniciado.\");\r\n\r\n        // Criando uma instância da classe\r\n        ExemploBlocoEstatico obj1 = new ExemploBlocoEstatico();\r\n\r\n        // Criando outra instância da classe\r\n        ExemploBlocoEstatico obj2 = new ExemploBlocoEstatico();\r\n    }\r\n}\r\n"
			],
	"description": "Blocos inicializadores para variáveis ​​de instância"
	},

	"                                ": {
	"prefix": "_java 4.5",
			"body": [
			"OuterClass outerObject = new OuterClass();\r\nOuterClass.InnerClass innerObject = outerObject.new InnerClass();"
			],
	"description": "Instaniar diretamente uma classe interna"
	},

	"                                 ": {
	"prefix": "_java 4.6",
			"body": [
			"public class LocalClassExample {\r\n  \r\n    static String regularExpression = \"[^0-9]\";\r\n  \r\n    public static void validatePhoneNumber(\r\n        String phoneNumber1, String phoneNumber2) {\r\n      \r\n        final int numberLength = 10;\r\n        \r\n        // Valid in JDK 8 and later:\r\n       \r\n        // int numberLength = 10;\r\n       \r\n        class PhoneNumber {\r\n            \r\n            String formattedPhoneNumber = null;\r\n\r\n            PhoneNumber(String phoneNumber){\r\n                // numberLength = 7;\r\n                String currentNumber = phoneNumber.replaceAll(\r\n                  regularExpression, \"\");\r\n                if (currentNumber.length() == numberLength)\r\n                    formattedPhoneNumber = currentNumber;\r\n                else\r\n                    formattedPhoneNumber = null;\r\n            }\r\n\r\n            public String getNumber() {\r\n                return formattedPhoneNumber;\r\n            }\r\n            \r\n            // Valid in JDK 8 and later:\r\n\r\n//            public void printOriginalNumbers() {\r\n//                System.out.println(\"Original numbers are \" + phoneNumber1 +\r\n//                    \" and \" + phoneNumber2);\r\n//            }\r\n        }\r\n\r\n        PhoneNumber myNumber1 = new PhoneNumber(phoneNumber1);\r\n        PhoneNumber myNumber2 = new PhoneNumber(phoneNumber2);\r\n        \r\n        // Valid in JDK 8 and later:\r\n\r\n//        myNumber1.printOriginalNumbers();\r\n\r\n        if (myNumber1.getNumber() == null) \r\n            System.out.println(\"First number is invalid\");\r\n        else\r\n            System.out.println(\"First number is \" + myNumber1.getNumber());\r\n        if (myNumber2.getNumber() == null)\r\n            System.out.println(\"Second number is invalid\");\r\n        else\r\n            System.out.println(\"Second number is \" + myNumber2.getNumber());\r\n\r\n    }\r\n\r\n    public static void main(String... args) {\r\n        validatePhoneNumber(\"123-456-7890\", \"456-7890\");\r\n    }\r\n}"
			],
	"description": "classe local"
	},

	"                                  ": {
	"prefix": "_java 4.7",
			"body": [
			"public class Exemplo {\r\n    public void metodo() {\r\n        final int numero = 10; // ou efetivamente final, ou seja, não é alterada depois\r\n        class ClasseLocal {\r\n            public void imprimirNumero() {\r\n                System.out.println(numero); // Classe local acessa variáveis locais\r\n            }\r\n        }\r\n        \r\n        ClasseLocal local = new ClasseLocal();\r\n        local.imprimirNumero();\r\n    }\r\n}\r\n"
			
			],
	"description": "classe local acessando membro final do metodo"
	},

	"                                   ": {
	"prefix": "_java 4.8",
			"body": [
			"public class Exemplo {\r\n    public void metodo() {\r\n        int numero = 10; // Não é explicitamente final, mas é \"efetivamente final\"\r\n        \r\n        class ClasseLocal {\r\n            public void imprimirNumero() {\r\n                System.out.println(numero); // Acesso permitido porque a variável é efetivamente final\r\n            }\r\n        }\r\n        \r\n        ClasseLocal local = new ClasseLocal();\r\n        local.imprimirNumero();\r\n        \r\n        // numero = 20; // Se esta linha estivesse ativa, numero deixaria de ser efetivamente final\r\n    }\r\n}\r\n"
			],
	"description": "Variavel efetivamente final"
	},

	"                                    ": {
	"prefix": "_java 4.9",
			"body": [
			"public class HelloWorldAnonymousClasses {\r\n  \r\n    interface HelloWorld {\r\n        public void greet();\r\n        public void greetSomeone(String someone);\r\n    }\r\n  \r\n    public void sayHello() {\r\n        \r\n        class EnglishGreeting implements HelloWorld {\r\n            String name = \"world\";\r\n            public void greet() {\r\n                greetSomeone(\"world\");\r\n            }\r\n            public void greetSomeone(String someone) {\r\n                name = someone;\r\n                System.out.println(\"Hello \" + name);\r\n            }\r\n        }\r\n      \r\n        HelloWorld englishGreeting = new EnglishGreeting();\r\n        \r\n        HelloWorld frenchGreeting = new HelloWorld() {\r\n            String name = \"tout le monde\";\r\n            public void greet() {\r\n                greetSomeone(\"tout le monde\");\r\n            }\r\n            public void greetSomeone(String someone) {\r\n                name = someone;\r\n                System.out.println(\"Salut \" + name);\r\n            }\r\n        };\r\n        \r\n        HelloWorld spanishGreeting = new HelloWorld() {\r\n            String name = \"mundo\";\r\n            public void greet() {\r\n                greetSomeone(\"mundo\");\r\n            }\r\n            public void greetSomeone(String someone) {\r\n                name = someone;\r\n                System.out.println(\"Hola, \" + name);\r\n            }\r\n        };\r\n        englishGreeting.greet();\r\n        frenchGreeting.greetSomeone(\"Fred\");\r\n        spanishGreeting.greet();\r\n    }\r\n\r\n    public static void main(String... args) {\r\n        HelloWorldAnonymousClasses myApp =\r\n            new HelloWorldAnonymousClasses();\r\n        myApp.sayHello();\r\n    }            \r\n}"
			
			],
	"description": "Interface sendo usado como variavel tipo de uma classe"
	},

	"                                     ": {
	"prefix": "_java 5.1",
				"body": [
				"public class HelloWorldAnonymousClasses {\r\n  \r\n    interface HelloWorld {\r\n        public void greet();\r\n        public void greetSomeone(String someone);\r\n    }\r\n  \r\n    public void sayHello() {\r\n        \r\n        class EnglishGreeting implements HelloWorld {\r\n            String name = \"world\";\r\n            public void greet() {\r\n                greetSomeone(\"world\");\r\n            }\r\n            public void greetSomeone(String someone) {\r\n                name = someone;\r\n                System.out.println(\"Hello \" + name);\r\n            }\r\n        }\r\n      \r\n        HelloWorld englishGreeting = new EnglishGreeting();\r\n        \r\n        HelloWorld frenchGreeting = new HelloWorld() {\r\n            String name = \"tout le monde\";\r\n            public void greet() {\r\n                greetSomeone(\"tout le monde\");\r\n            }\r\n            public void greetSomeone(String someone) {\r\n                name = someone;\r\n                System.out.println(\"Salut \" + name);\r\n            }\r\n        };\r\n        \r\n        HelloWorld spanishGreeting = new HelloWorld() {\r\n            String name = \"mundo\";\r\n            public void greet() {\r\n                greetSomeone(\"mundo\");\r\n            }\r\n            public void greetSomeone(String someone) {\r\n                name = someone;\r\n                System.out.println(\"Hola, \" + name);\r\n            }\r\n        };\r\n        englishGreeting.greet();\r\n        frenchGreeting.greetSomeone(\"Fred\");\r\n        spanishGreeting.greet();\r\n    }\r\n\r\n    public static void main(String... args) {\r\n        HelloWorldAnonymousClasses myApp =\r\n            new HelloWorldAnonymousClasses();\r\n        myApp.sayHello();\r\n    }            \r\n}"
				
				],
	"description": "Classes anonimas"
	},

	"                                      ": {
	"prefix": "_java 5.2",
			"body": [
			"public class Main {\r\n\r\n    // Definindo um enum para os dias da semana\r\n    public enum Day {\r\n        SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY\r\n    }\r\n\r\n    // Método que imprime uma mensagem diferente dependendo do dia\r\n    public static void printDayMessage(Day day) {\r\n        switch (day) {\r\n            case MONDAY:\r\n                System.out.println(\"Começo da semana! Vamos com tudo.\");\r\n                break;\r\n            case FRIDAY:\r\n                System.out.println(\"Sexta-feira! Quase fim de semana!\");\r\n                break;\r\n            case SUNDAY:\r\n                System.out.println(\"Dia de descanso.\");\r\n                break;\r\n            default:\r\n                System.out.println(\"É um dia comum.\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        // Usando o enum para representar um dia específico\r\n        Day today = Day.MONDAY;\r\n        \r\n        // Imprime uma mensagem baseada no valor do enum\r\n        printDayMessage(today);\r\n    }\r\n}\r\n"
			
			],
	"description": "Usando uma enum"
	},

	"                                       ": {
	"prefix": "_java 5.3",
			"body": [
			"// Interface funcional\r\ninterface Calculator {\r\n    int operate(int a, int b);\r\n}\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        \r\n        // Expressão lambda para somar dois números\r\n        Calculator addition = (a, b) -> a + b;\r\n\r\n        // Expressão lambda para multiplicar dois números\r\n        Calculator multiplication = (a, b) -> a * b;\r\n\r\n        // Testando as operações\r\n        int x = 5;\r\n        int y = 10;\r\n\r\n        System.out.println(\"Soma: \" + addition.operate(x, y)); // Saída: Soma: 15\r\n        System.out.println(\"Multiplicação: \" + multiplication.operate(x, y)); // Saída: Multiplicação: 50\r\n    }\r\n}\r\n"
			
			],
	"description": "expressao lambda"
	},

	"                                        ": {
	"prefix": "_java 5.4",
			"body": [
			"import java.util.function.BiFunction;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        \r\n        // Usando expressão lambda com múltiplas instruções no corpo\r\n        BiFunction<Integer, Integer, Integer> calculate = (a, b) -> {\r\n            System.out.println(\"Calculando a soma de \" + a + \" e \" + b);\r\n            int sum = a + b;\r\n            System.out.println(\"Soma calculada: \" + sum);\r\n            return sum;  // retorna a soma\r\n        };\r\n        \r\n        // Chamando a lambda\r\n        int result = calculate.apply(5, 10);\r\n        System.out.println(\"Resultado final: \" + result);\r\n    }\r\n}\r\n"
			
			],
	"description": "corpo de expressão lambda com múltiplas instruções dentro das chaves"
	},

	"                                         ": {
	"prefix": "_java 5.5",
			"body": [
			"public class Pessoa {\r\n    private String name;\r\n    private int age;\r\n\r\n    // Construtor\r\n    public Pessoa(String name, int age) {\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n\r\n    // Método estático para comparar duas pessoas pela idade\r\n    public static int compareByAge(Pessoa a, Pessoa b) {\r\n        return Integer.compare(a.getAge(), b.getAge());\r\n    }\r\n\r\n    public int getAge() {\r\n        return age;\r\n    }\r\n}\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Pessoa[] rosterAsArray = {\r\n            new Pessoa(\"Alice\", 30),\r\n            new Pessoa(\"Bob\", 25),\r\n            new Pessoa(\"Charlie\", 35)\r\n        };\r\n\r\n        // Ordenando o array usando a referência de método\r\n        Arrays.sort(rosterAsArray, Pessoa::compareByAge);\r\n\r\n        // Imprimindo o array ordenado\r\n        for (Pessoa p : rosterAsArray) {\r\n            System.out.println(p.name + \" - \" + p.age);\r\n        }\r\n    }\r\n}\r\n"
			
			],
	"description": "operador de referência de método"
	},

	"                                          ": {
	"prefix": "_java 5.6",
			"body": [
			"public enum Fruit {\r\n    APPLE(150, \"Red\"), \r\n    BANANA(120, \"Yellow\"), \r\n    ORANGE(130, \"Orange\");\r\n\r\n    private final int weight; // em gramas\r\n    private final String color;\r\n\r\n    // Construtor da enum que recebe dois valores\r\n    Fruit(int weight, String color) {\r\n        this.weight = weight;\r\n        this.color = color;\r\n    }\r\n\r\n    // Métodos para acessar os valores\r\n    public int getWeight() {\r\n        return weight;\r\n    }\r\n\r\n    public String getColor() {\r\n        return color;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        for (Fruit fruit : Fruit.values()) {\r\n            System.out.printf(\"A %s pesa %d gramas e é de cor %s.%n\", fruit, fruit.getWeight(), fruit.getColor());\r\n        }\r\n    }\r\n}\r\n"
			
			],
	"description": "enum com 2 valores entre ()"
	},

	"                                           ": {
	"prefix": "_java 5.7",
			"body": [
			"   // Javadoc comment follows\r\n    /**\r\n     * @deprecated\r\n     * explanation of why it was deprecated\r\n     */\r\n    @Deprecated\r\n    static void deprecatedMethod() { }\r\n}"
			
			],
	"description": "atributo deprecated"
	},

	"                                            ": {
	"prefix": "_java 5.8",
			"body": [
			"   // mark method as a superclass method\r\n   // that has been overridden\r\n   @Override \r\n   int overriddenMethod() { }"
			],
	"description": "atributo override"
	},

	"                                             ": {
	"prefix": "_java 5.9",
			"body": [
			"// Definição da interface\r\ninterface Animal {\r\n    void som();   // Método abstrato\r\n    void mover(); // Método abstrato\r\n}\r\n\r\n// Classe que implementa a interface Animal\r\nclass Cachorro implements Animal {\r\n\r\n    // Implementação do método som\r\n    @Override\r\n    public void som() {\r\n        System.out.println(\"O cachorro faz: Au Au\");\r\n    }\r\n\r\n    // Implementação do método mover\r\n    @Override\r\n    public void mover() {\r\n        System.out.println(\"O cachorro está correndo\");\r\n    }\r\n}\r\n\r\n// Classe principal para executar o programa\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        // Criando objeto da classe que implementa a interface\r\n        Animal cachorro = new Cachorro();\r\n        \r\n        // Chamando os métodos implementados\r\n        cachorro.som();\r\n        cachorro.mover();\r\n    }\r\n}\r\n"
			
			],
	"description": "interface e implesments"
	},

	"                                              ": {
	"prefix": "_java 6.1",
			"body": [
			"public interface GroupedInterface extends Interface1, Interface2, Interface3 {\r\n\r\n    // constant declarations\r\n    \r\n    // base of natural logarithms\r\n    double E = 2.718282;\r\n \r\n    // method signatures\r\n    void doSomething (int i, double x);\r\n    int doSomethingElse(String s);\r\n}"
			],
	"description": "interface extends outra interface"
	},

	"                                               ": {
	"prefix": "_java 6.2",
			"body": [
			"public interface Animal {\r\n    void fazerSom();\r\n    \r\n    // Método default com uma implementação padrão\r\n    default void dormir() {\r\n        System.out.println(\"Dormindo...\");\r\n    }\r\n}\r\n\r\npublic class Cachorro implements Animal {\r\n    public void fazerSom() {\r\n        System.out.println(\"Latido\");\r\n    }\r\n}\r\n"
			
			],
	"description": "interface com default modificador"
	},

	"                                                ": {
	"prefix": "_java 6.3",
			"body": [
			"public interface Calculadora {\r\n\r\n    // Método estático na interface\r\n    static int somar(int a, int b) {\r\n        return a + b;\r\n    }\r\n\r\n    // Outro método estático\r\n    static int subtrair(int a, int b) {\r\n        return a - b;\r\n    }\r\n\r\n    // Método abstrato (precisa ser implementado pelas classes)\r\n    void mostrarResultado();\r\n}\r\n\r\npublic class TesteCalculadora implements Calculadora {\r\n\r\n    // Implementação do método abstrato\r\n    @Override\r\n    public void mostrarResultado() {\r\n        System.out.println(\"Implementação de mostrar resultado.\");\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        // Chamando os métodos estáticos diretamente pela interface\r\n        int resultadoSoma = Calculadora.somar(10, 5);\r\n        int resultadoSubtracao = Calculadora.subtrair(10, 5);\r\n\r\n        System.out.println(\"Resultado da soma: \" + resultadoSoma);\r\n        System.out.println(\"Resultado da subtração: \" + resultadoSubtracao);\r\n\r\n        // Criando uma instância da classe e chamando o método de instância\r\n        TesteCalculadora teste = new TesteCalculadora();\r\n        teste.mostrarResultado();\r\n    }\r\n}\r\n"

			
			],
	"description": "interface com membro static"
	},

	"                                                 ": {
	"prefix": "_java 6.4",
			"body": [
			"public interface Configuracao {\r\n    // Constantes em uma interface (são public, static e final por padrão)\r\n    int MAX_USUARIOS = 100;\r\n    String VERSAO_SISTEMA = \"1.0.0\";\r\n    boolean MODO_DEBUG = true;\r\n\r\n    // Método abstrato\r\n    void exibirConfiguracoes();\r\n}\r\n\r\npublic class Sistema implements Configuracao {\r\n\r\n    @Override\r\n    public void exibirConfiguracoes() {\r\n        // Podemos acessar as constantes diretamente, sem usar o nome da interface\r\n        System.out.println(\"Configurações do Sistema:\");\r\n        System.out.println(\"Máximo de Usuários: \" + MAX_USUARIOS);\r\n        System.out.println(\"Versão do Sistema: \" + VERSAO_SISTEMA);\r\n        System.out.println(\"Modo Debug: \" + (MODO_DEBUG ? \"Ativado\" : \"Desativado\"));\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Sistema sistema = new Sistema();\r\n        sistema.exibirConfiguracoes();\r\n    }\r\n}\r\n"
			
			],
	"description": "interface com constantes"
	},

	"                                                  ": {
	"prefix": "_java 6.5",
			"body": [
			"// Definição da interface OperateCar\r\ninterface OperateCar {\r\n    // Método padrão (default) da interface OperateCar\r\n    default void startEngine(String key) {\r\n        System.out.println(\"OperateCar: O motor está sendo ligado com a chave \" + key);\r\n    }\r\n}\r\n\r\n// Definição da interface FlyCar\r\ninterface FlyCar {\r\n    // Método padrão (default) da interface FlyCar\r\n    default void startEngine(String key) {\r\n        System.out.println(\"FlyCar: O motor de voo está sendo ligado com a chave \" + key);\r\n    }\r\n}\r\n\r\n// Classe FlyingCar que implementa ambas as interfaces\r\npublic class FlyingCar implements OperateCar, FlyCar {\r\n\r\n    // Sobrescrevendo o método startEngine na classe FlyingCar\r\n    @Override\r\n    public void startEngine(String key) {\r\n        // Chamando o método startEngine da interface FlyCar\r\n        FlyCar.super.startEngine(key);\r\n        // Chamando o método startEngine da interface OperateCar\r\n        OperateCar.super.startEngine(key);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        FlyingCar myFlyingCar = new FlyingCar();\r\n        // Chama o método startEngine, que por sua vez invoca os métodos das duas interfaces\r\n        myFlyingCar.startEngine(\"Chave123\");\r\n    }\r\n}\r\n"
			],
	"description": "uso de .super. para resolver conflito em interface"
	},

	"                                                   ": {
	"prefix": "_java 6.6",
			"body": [
			"// Classe base (superclasse)\r\nclass Animal {\r\n    public void fazerSom() {\r\n        System.out.println(\"O animal faz algum som\");\r\n    }\r\n}\r\n\r\n// Subclasse que herda de Animal\r\nclass Cachorro extends Animal {\r\n    @Override\r\n    public void fazerSom() {\r\n        // Usando super para chamar o método da classe pai (Animal)\r\n        super.fazerSom();  // Chama o método da superclasse\r\n        System.out.println(\"O cachorro late\");\r\n    }\r\n}\r\n\r\n// Classe principal para testar\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Cachorro meuCachorro = new Cachorro();\r\n        // Chama o método fazerSom da classe Cachorro\r\n        meuCachorro.fazerSom();\r\n    }\r\n}\r\n"
			],
	"description": "uso de super() em classe"
	},

	/*"?": {
	"prefix": "?",
			"body": [
			
			],
	"description": "?"
	},*/

	/*"?": {
	"prefix": "?",
			"body": [
			
			],
	"description": "?"
	},*/

	/*"?": {
	"prefix": "?",
			"body": [
			
			],
	"description": "?"
	},*/

	/*"?": {
	"prefix": "?",
			"body": [
			
			],
	"description": "?"
	},*/
}