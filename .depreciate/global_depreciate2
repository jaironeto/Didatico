{
/*****************************************************************************************/
//																Javascript Library
/*****************************************************************************************/

	"   ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.at()",
		"body": [
			"const array1 = [5, 12, 8, 130, 44];\n\nlet index = 2;\n\nconsole.log(`An index of ${index} returns ${array1.at(index)}`);\n// Expected output: \"An index of 2 returns 8\"\n\nindex = -2;\n\nconsole.log(`An index of ${index} returns ${array1.at(index)}`);\n// Expected output: \"An index of -2 returns 130\""
											
		 ],
		"description": "O método at()recebe um valor inteiro e retorna o item referente ao índice dele, possibilitando valores positivos ou negativos. Valores negativos contam além do último item do array"
	},

	
	"    ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.concat()",
		"body": [
			"const array1 = ['a', 'b', 'c'];\nconst array2 = ['d', 'e', 'f'];\nconst array3 = array1.concat(array2);\n\nconsole.log(array3);\n// Expected output: Array [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]"								
		 ],
		"description": "",
	},

	"     ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.copyWithin()",
		"body": [
			"const array1 = ['a', 'b', 'c', 'd', 'e'];\n\n// Copy to index 0 the element at index 3\nconsole.log(array1.copyWithin(0, 3, 4));\n// Expected output: Array [\"d\", \"b\", \"c\", \"d\", \"e\"]\n\n// Copy to index 1 all elements from index 3 to the end\nconsole.log(array1.copyWithin(1, 3));\n// Expected output: Array [\"d\", \"d\", \"e\", \"d\", \"e\"]\n"								
		 ],
		"description": ""
	},

	"      ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.entries()",
		"body": [
			"const array1 = ['a', 'b', 'c'];\n\nconst iterator1 = array1.entries();\n\nconsole.log(iterator1.next().value);\n// Expected output: Array [0, \"a\"]\n\nconsole.log(iterator1.next().value);\n// Expected output: Array [1, \"b\"]\n"								
		 ],
		"description": ""
	},

	"       ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.every()",
		"body": [
			"const isBelowThreshold = (currentValue) => currentValue < 40;\n\nconst array1 = [1, 30, 39, 29, 10, 13];\n\nconsole.log(array1.every(isBelowThreshold));\n// Expected output: true"								
		 ],
		"description": ""
	},

	"        ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.fill()",
		"body": [
			"const array1 = [1, 2, 3, 4];\n\n// Fill with 0 from position 2 until position 4\nconsole.log(array1.fill(0, 2, 4));\n// Expected output: Array [1, 2, 0, 0]\n\n// Fill with 5 from position 1\nconsole.log(array1.fill(5, 1));\n// Expected output: Array [1, 5, 5, 5]\n\nconsole.log(array1.fill(6));\n// Expected output: Array [6, 6, 6, 6]"								
		 ],
		"description": ""
	},

	"         ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.filter()",
		"body": [
			"const words = ['spray', 'elite', 'exuberant', 'destruction', 'present'];\n\nconst result = words.filter((word) => word.length > 6);\n\nconsole.log(result);\n// Expected output: Array [\"exuberant\", \"destruction\", \"present\"]\n"											
		 ],
	"description": ""
	},

	"          ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.find()",
		"body": [
			"const array1 = [5, 12, 8, 130, 44];\n\nconst found = array1.find((element) => element > 10);\n\nconsole.log(found);\n// Expected output: 12\n"
											
		 ],
		"description": ""
	},

	"           ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.findIndex()",
		"body": [
			"const array1 = [5, 12, 8, 130, 44];\n\nconst isLargeNumber = (element) => element > 13;\n\nconsole.log(array1.findIndex(isLargeNumber));\n// Expected output: 3\n"											
		 ],
		"description": ""
	},

	"            ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.findLast()",
		"body": [
			"const array1 = [5, 12, 50, 130, 44];\n\nconst found = array1.findLast((element) => element > 45);\n\nconsole.log(found);\n// Expected output: 130"											
		 ],
		"description": ""
	},

	"             ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.findLastIndex()",
		"body": [
			"const array1 = [5, 12, 50, 130, 44];\n\nconst isLargeNumber = (element) => element > 45;\n\nconsole.log(array1.findLastIndex(isLargeNumber));\n// Expected output: 3\n// Index of element with value: 130"								
		 ],
		"description": ""
	},
					
	"              ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.flat()",
		"body": [
			"const arr1 = [0, 1, 2, [3, 4]];\n\nconsole.log(arr1.flat());\n// expected output: Array [0, 1, 2, 3, 4]\n\nconst arr2 = [0, 1, [2, [3, [4, 5]]]];\n\nconsole.log(arr2.flat());\n// expected output: Array [0, 1, 2, Array [3, Array [4, 5]]]\n\nconsole.log(arr2.flat(2));\n// expected output: Array [0, 1, 2, 3, Array [4, 5]]\n\nconsole.log(arr2.flat(Infinity));\n// expected output: Array [0, 1, 2, 3, 4, 5]"								
		 ],
		"description": ""
	},

	"               ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.flatMap()",
		"body": [
			"const arr1 = [1, 2, 1];\n\nconst result = arr1.flatMap((num) => (num === 2 ? [2, 2] : 1));\n\nconsole.log(result);\n// Expected output: Array [1, 2, 2, 1]"								
		 ],
		"description": ""
	},

	
	"                ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.forEach()",
		"body": [
			"const array1 = ['a', 'b', 'c'];\n\narray1.forEach((element) => console.log(element));\n\n// Expected output: \"a\"\n// Expected output: \"b\"\n// Expected output: \"c\"\n"
											
		 ],
		"description": ""
	},
	
	"                 ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.from()",
		"body": [
			"console.log(Array.from('foo'));\n// Expected output: Array [\"f\", \"o\", \"o\"]\n\nconsole.log(Array.from([1, 2, 3], (x) => x + x));\n// Expected output: Array [2, 4, 6]"
											
		 ],
		"description": ""
	},

	"                  ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.fromAsync()",
		"body": [
			"const asyncIterable = (async function* () {\r\n  for (let i = 0; i < 5; i++) {\r\n    await new Promise((resolve) => setTimeout(resolve, 10 * i));\r\n    yield i;\r\n  }\r\n})();\r\n\r\nArray.fromAsync(asyncIterable).then((array) => console.log(array));\r\n// [0, 1, 2, 3, 4]"
											
		 ],
		"description": ""
	},

	"                   ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.includes()",
			"body": [
				"const array1 = [1, 2, 3];\n\nconsole.log(array1.includes(2));\n// Expected output: true\n\nconst pets = ['cat', 'dog', 'bat'];\n\nconsole.log(pets.includes('cat'));\n// Expected output: true\n\nconsole.log(pets.includes('at'));\n// Expected output: false\n"
												
			 ],
		"description": ""
	},

	"                    ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.indexOf()",
			"body": [
				"const beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];\n\nconsole.log(beasts.indexOf('bison'));\n// Expected output: 1\n\n// Start from index 2\nconsole.log(beasts.indexOf('bison', 2));\n// Expected output: 4\n\nconsole.log(beasts.indexOf('giraffe'));\n// Expected output: -1"
												
			 ],
		"description": ""
	},

	"                     ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.isArray()",
		"body": [
			"console.log(Array.isArray([1, 3, 5]));\n// Expected output: true\n\nconsole.log(Array.isArray('[]'));\n// Expected output: false\n\nconsole.log(Array.isArray(new Array(5)));\n// Expected output: true\n\nconsole.log(Array.isArray(new Int16Array([15, 33])));\n// Expected output: false"											
		 ],
		"description": ""
	},

	"                      ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.join()",
		"body": [
			"const elements = ['Fire', 'Air', 'Water'];\n\nconsole.log(elements.join());\n// Expected output: \"Fire,Air,Water\"\n\nconsole.log(elements.join(''));\n// Expected output: \"FireAirWater\"\n\nconsole.log(elements.join('-'));\n// Expected output: \"Fire-Air-Water\""											
		 ],
		"description": ""
	},

	"                       ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.keys()",
		"body": [
			"const array1 = ['a', 'b', 'c'];\nconst iterator = array1.keys();\n\nfor (const key of iterator) {\n  console.log(key);\n}\n\n// Expected output: 0\n// Expected output: 1\n// Expected output: 2"
											
		 ],
		"description": ""
	},

	"                        ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.lastIndexOf()",
		"body": [
			"const animals = ['Dodo', 'Tiger', 'Penguin', 'Dodo'];\n\nconsole.log(animals.lastIndexOf('Dodo'));\n// Expected output: 3\n\nconsole.log(animals.lastIndexOf('Tiger'));\n// Expected output: 1"
											
		 ],
		"description": ""
	},

	"                         ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.map()",
		"body": [
			"const array1 = [1, 4, 9, 16];\n\n// Pass a function to map\nconst map1 = array1.map((x) => x * 2);\n\nconsole.log(map1);\n// Expected output: Array [2, 8, 18, 32]"
											
		 ],
		"description": ""
	},

	"                          ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.of()",
		"body": [
			"console.log(Array.of('foo', 2, 'bar', true));\n// Expected output: Array [\"foo\", 2, \"bar\", true]\n\nconsole.log(Array.of());\n// Expected output: Array []\n"
											
		 ],
		"description": ""
	},

	"                           ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.pop()",
		"body": [
			"const plants = ['broccoli', 'cauliflower', 'cabbage', 'kale', 'tomato'];\n\nconsole.log(plants.pop());\n// Expected output: \"tomato\"\n\nconsole.log(plants);\n// Expected output: Array [\"broccoli\", \"cauliflower\", \"cabbage\", \"kale\"]\n\nplants.pop();\n\nconsole.log(plants);\n// Expected output: Array [\"broccoli\", \"cauliflower\", \"cabbage\"]"
											
		 ],
		"description": ""
	},

	"                            ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.push()",
		"body": [
			"const animals = ['pigs', 'goats', 'sheep'];\n\nconst count = animals.push('cows');\nconsole.log(count);\n// Expected output: 4\nconsole.log(animals);\n// Expected output: Array [\"pigs\", \"goats\", \"sheep\", \"cows\"]\n\nanimals.push('chickens', 'cats', 'dogs');\nconsole.log(animals);\n// Expected output: Array [\"pigs\", \"goats\", \"sheep\", \"cows\", \"chickens\", \"cats\", \"dogs\"]\n"
											
		 ],
		"description": ""
	},

	"                             ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.reduce()",
		"body": [
			"const array1 = [1, 2, 3, 4];\n\n// 0 + 1 + 2 + 3 + 4\nconst initialValue = 0;\nconst sumWithInitial = array1.reduce(\n  (accumulator, currentValue) => accumulator + currentValue,\n  initialValue,\n);\n\nconsole.log(sumWithInitial);\n// Expected output: 10\n"
											
		 ],
		"description": ""
	},

	"                                ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.reduceRight()",
		"body": [
			"const array1 = [\n  [0, 1],\n  [2, 3],\n  [4, 5],\n];\n\nconst result = array1.reduceRight((accumulator, currentValue) =>\n  accumulator.concat(currentValue),\n);\n\nconsole.log(result);\n// Expected output: Array [4, 5, 2, 3, 0, 1]"
											
		 ],
		"description": ""
	},

	"                                 ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.reverse()",
		"body": [
			"const array1 = ['one', 'two', 'three'];\nconsole.log('array1:', array1);\n// Expected output: \"array1:\" Array [\"one\", \"two\", \"three\"]\n\nconst reversed = array1.reverse();\nconsole.log('reversed:', reversed);\n// Expected output: \"reversed:\" Array [\"three\", \"two\", \"one\"]\n\n// Careful: reverse is destructive -- it changes the original array.\nconsole.log('array1:', array1);\n// Expected output: \"array1:\" Array [\"three\", \"two\", \"one\"]"
											
		 ],
		"description": ""
	},

	"                                  ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.shift()",
		"body": [
			"const array1 = [1, 2, 3];\n\nconst firstElement = array1.shift();\n\nconsole.log(array1);\n// Expected output: Array [2, 3]\n\nconsole.log(firstElement);\n// Expected output: 1"
											
		 ],
		"description": ""
	},

	"                                          ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.slice()",
		"body": [
			"const animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];\n\nconsole.log(animals.slice(2));\n// Expected output: Array [\"camel\", \"duck\", \"elephant\"]\n\nconsole.log(animals.slice(2, 4));\n// Expected output: Array [\"camel\", \"duck\"]\n\nconsole.log(animals.slice(1, 5));\n// Expected output: Array [\"bison\", \"camel\", \"duck\", \"elephant\"]\n\nconsole.log(animals.slice(-2));\n// Expected output: Array [\"duck\", \"elephant\"]\n\nconsole.log(animals.slice(2, -1));\n// Expected output: Array [\"camel\", \"duck\"]\n\nconsole.log(animals.slice());\n// Expected output: Array [\"ant\", \"bison\", \"camel\", \"duck\", \"elephant\"]\n"
											
		 ],
		"description": ""
	},

	"                                             ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.some()",
		"body": [
			"const array = [1, 2, 3, 4, 5];\n\n// Checks whether an element is even\nconst even = (element) => element % 2 === 0;\n\nconsole.log(array.some(even));\n// Expected output: true"
											
		 ],
		"description": ""
	},

	"                                              ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.sort()",
		"body": [
			"const months = ['March', 'Jan', 'Feb', 'Dec'];\nmonths.sort();\nconsole.log(months);\n// Expected output: Array [\"Dec\", \"Feb\", \"Jan\", \"March\"]\n\nconst array1 = [1, 30, 4, 21, 100000];\narray1.sort();\nconsole.log(array1);\n// Expected output: Array [1, 100000, 21, 30, 4]\n"
											
		 ],
		"description": ""
	},

	"                                               ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.splice()",
		"body": [
			"const months = ['Jan', 'March', 'April', 'June'];\nmonths.splice(1, 0, 'Feb');\n// Inserts at index 1\nconsole.log(months);\n// Expected output: Array [\"Jan\", \"Feb\", \"March\", \"April\", \"June\"]\n\nmonths.splice(4, 1, 'May');\n// Replaces 1 element at index 4\nconsole.log(months);\n// Expected output: Array [\"Jan\", \"Feb\", \"March\", \"April\", \"May\"]\n"
											
		 ],
		"description": ""
	},


	"                                                ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.toLocaleString()",
		"body": [
			"const array1 = [1, 'a', new Date('21 Dec 1997 14:12:00 UTC')];\nconst localeString = array1.toLocaleString('en', { timeZone: 'UTC' });\n\nconsole.log(localeString);\n// Expected output: \"1,a,12/21/1997, 2:12:00 PM\",\n// This assumes \"en\" locale and UTC timezone - your results may vary"
											
		 ],
		"description": ""
	},

	"                                                 ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.toReversed()",
		"body": [
			"const items = [1, 2, 3];\r\nconsole.log(items); // [1, 2, 3]\r\n\r\nconst reversedItems = items.toReversed();\r\nconsole.log(reversedItems); // [3, 2, 1]\r\nconsole.log(items); // [1, 2, 3]"
											
		 ],
		"description": ""
	},

	"                                                       ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.toSorted()",
		"body": [
			"const months = [\"Mar\", \"Jan\", \"Feb\", \"Dec\"];\r\nconst sortedMonths = months.toSorted();\r\nconsole.log(sortedMonths); // ['Dec', 'Feb', 'Jan', 'Mar']\r\nconsole.log(months); // ['Mar', 'Jan', 'Feb', 'Dec']\r\n\r\nconst values = [1, 10, 21, 2];\r\nconst sortedValues = values.toSorted((a, b) => a - b);\r\nconsole.log(sortedValues); // [1, 2, 10, 21]\r\nconsole.log(values); // [1, 10, 21, 2]"
											
		 ],
		"description": ""
	},

	"                                                        ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.toSpliced()",
		"body": [
			"const months = [\"Jan\", \"Mar\", \"Apr\", \"May\"];\r\n\r\n// Inserting an element at index 1\r\nconst months2 = months.toSpliced(1, 0, \"Feb\");\r\nconsole.log(months2); // [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\"]\r\n\r\n// Deleting two elements starting from index 2\r\nconst months3 = months2.toSpliced(2, 2);\r\nconsole.log(months3); // [\"Jan\", \"Feb\", \"May\"]\r\n\r\n// Replacing one element at index 1 with two new elements\r\nconst months4 = months3.toSpliced(1, 1, \"Feb\", \"Mar\");\r\nconsole.log(months4); // [\"Jan\", \"Feb\", \"Mar\", \"May\"]\r\n\r\n// Original array is not modified\r\nconsole.log(months); // [\"Jan\", \"Mar\", \"Apr\", \"May\"]"
											
		 ],
		"description": ""
	},

	"                                                         ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.toString()",
		"body": [
			"const array1 = [1, 2, 'a', '1a'];\n\nconsole.log(array1.toString());\n// Expected output: \"1,2,a,1a\"\n"
											
		 ],
		"description": ""
	},


	"                                                          ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.unshift()",
			"body": [
				"const array1 = [1, 2, 3];\n\nconsole.log(array1.unshift(4, 5));\n// Expected output: 5\n\nconsole.log(array1);\n// Expected output: Array [4, 5, 1, 2, 3]"
												
			 ],
		"description": ""
	},
	
	"                                                               ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.values()",
			"body": [
				"const array1 = ['a', 'b', 'c'];\nconst iterator = array1.values();\n\nfor (const value of iterator) {\n  console.log(value);\n}\n\n// Expected output: \"a\"\n// Expected output: \"b\"\n// Expected output: \"c\""
												
			 ],
		"description": ""
	},
	
	"                                                                 ": {
	"scope": "javascript, typescript",
	"prefix": "#Array.prototype.with()",
			"body": [
				"const arr = [1, 2, 3, 4, 5];\r\nconsole.log(arr.with(2, 6)); // [1, 2, 6, 4, 5]\r\nconsole.log(arr); // [1, 2, 3, 4, 5]"
												
			 ],
		"description": ""
	},

	/*Object.create()
	Object.defineProperties()
	Object.defineProperty()
	Object.entries()
	Object.freeze()
	Object.fromEntries()
	Object.getOwnPropertyDescriptor()
	Object.getOwnPropertyDescriptors()
	Object.getOwnPropertyNames()
	Object.getOwnPropertySymbols()
	Object.getPrototypeOf()
	Object.groupBy()
	Object.hasOwn()
	Object.prototype.hasOwnProperty()
	Object.is()
	Object.isExtensible()
	Object.isFrozen()
	Object.prototype.isPrototypeOf()
	Object.isSealed()
	Object.keys()
	Object.preventExtensions()
	Object.prototype.propertyIsEnumerable()
	Object.seal()
	Object.setPrototypeOf()
	Object.prototype.toLocaleString()
	Object.prototype.toString()
	Object.prototype.valueOf()
	Object.values()*/
	"                                                                                                             ": {
	"scope": "javascript, typescript",
	"prefix": "#Object.assign()",
				"body": [
													
				 ],
		"description": ""
	},

	"                                                                                                              ": {
	"scope": "javascript, typescript",
	"prefix": "#?????????????????????",
				"body": [
													
				 ],
		"description": ""
	},

/*****************************************************************************************/
//																Javascript Codigo
/*****************************************************************************************/
	
		"javascript 1.1": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"/* Verifica uma condição*/",
				"if (algumaCondicao) {",
				"  var minhaFuncao = function() {",
				"    console.log('A condição foi atendida.');",
				"  };",
				"} else {",
				"  var minhaFuncao = function() {",
				"    console.log('A condição não foi atendida.');",
				"  };",
				"}",
				"",
				"/* Chama a função*/",
				"minhaFuncao();",
			],
		"description": "Definir uma função com uma expressão de função condicionalmente"
		},
	
		"javascript 1.2": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"var minhaFuncao = new Function('console.log('Isso é uma função criada com o construtor Function.');');",
				"",
				"/* Chamando a função*/",
				"minhaFuncao();",
						],
		"description": "Criar uma função com 'function' construtor"
		},
	
		"javascript 1.3": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"> **Função de Seta Sem Abreviação**",
				"const soma = (a, b) => {",
				"return a + b;",
				"};",
				"",
				"console.log(soma(5, 3)); /* Saída: 8*/",
				"",
				"> **Função de seta com abreviação**",
				"const soma = a => a + 10;",
				"",
				"console.log(soma(5, 3)); /* Saída: 8*/",
				"```",
			],
		"description": "Arrow 'function' sem e com abreviações"
		},
	
		"javascript 1.4": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"function fazerAlgumaCoisa(callback) {",
				"  console.log('Fazendo algo...'');",
				"  /* Simulando uma operação assíncrona*/",
				"  setTimeout(function () {",
				"    console.log('Operação concluída.');",
				"    callback(); /* Chamando a função de retorno (callback)*/",
				"  }, 2000);",
				"}",
				"",
				"function minhaFuncaoDeRetorno() {",
				"  console.log('A operação foi tratada pelo callback!');",
				"}",
				"",
				"/* Chamando a função e passando a função de retorno como callback*/",
				"fazerAlgumaCoisa(minhaFuncaoDeRetorno);",
						],
		"description": "Callback"
		},
	
		"javascript 1.5": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"// Função que retorna uma promessa que resolve após um atraso",
				"const fazerAlgumaCoisa = () => {",
				"  return new Promise((resolve, reject) => {",
				"    setTimeout(() => {",
				"      console.log('Passo 1: Fazendo algo...');",
				"      resolve('Passo 1 concluído.');",
				"    }, 1000);",
				"  });",
				"};",
				"",
				"/* Função que retorna uma promessa que resolve após um atraso*/",
				"const fazerOutraCoisa = () => {",
				"  return new Promise((resolve, reject) => {",
				"    setTimeout(() => {",
				"      console.log('Passo 2: Fazendo outra coisa...');",
				"      resolve('Passo 2 concluído.');",
				"    }, 1000);",
				"  });",
				"};",
				"",
				"/* Chama as funções em sequência usando Promise chaining (cadeia de promessas)*/",
				"fazerAlgumaCoisa()",
				"  .then((resultadoPasso1) => {",
				"    console.log(resultadoPasso1);",
				"    return fazerOutraCoisa();",
				"  })",
				"  .then((resultadoPasso2) => {",
				"    console.log(resultadoPasso2);",
				"    console.log('Todas as etapas estão concluídas.');",
				"  })",
				"  .catch((erro) => {",
				"    console.error('Ocorreu um erro:', erro);",
				"  });",
						],
		"description": "Cadeia de promise com arrow 'function'"
		},
	
		"javascript 1.6": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"// Definindo uma função chamada 'saudacao'",
				"function saudacao(nome) {",
				"  console.log('Olá, ' + nome + '!');",
				"}",
				"",
				"// Chamando a função e passando um argumento",
				"saudacao('Alice'); // Isso irá imprimir 'Olá, Alice!' no console",
						],
		"description": "Chamar uma função"
		},
	
		"javascript 1.7": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"function contador() {",
				"  let count = 0;",
				"",
				" function increment() {",
				"    count++;",
				"    console.log(count);",
				"  }",
				"",
				"  return increment;",
				"}",
				"",
				"const contador1 = contador();",
				"const contador2 = contador();",
				"",
				"contador1(); // Isso irá imprimir '1' no console",
				"contador1(); // Isso irá imprimir '2' no console",
				"",
				"contador2(); // Isso irá imprimir '1' no console (outro contador independente)",
						],
		"description": "closure"
		},
	
		"javascript 1.8": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"// Expressão de função anônima",
				"const soma = function (a, b) {",
				"  return a + b;",
				"};",
				"",
				"console.log(soma(5, 3)); // Isso imprimirá 8 no console",
			],
		"description": "Expressão de função"
		},
	
		"javascript 1.9": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"// Função que recebe uma função anônima como argumento",
				"function executarFuncao(callback) {",
				"  console.log('Executando a função...');",
				"  callback(); // Chama a função anônima passada como argumento",
				"}",
				"",
				"// Chama a função executarFuncao e passa uma função anônima como argumento",
				"executarFuncao(function() {",
				"  console.log('Esta é uma função anônima.');",
				"});",
						],
		"description": "Função anônima como argumento de outra função"
		},
	
		"javascript 2.1": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"```",
				"> **Funcao Auto Invocada**",
				"```",
				"(function() {",
				"  var mensagem = 'Esta é uma função auto-invocada.';",
				"  console.log(mensagem);",
				"})();",
				"```",
				"> **Funcao Auto Invocada com Argumento**",
				"```",
				"(function(nome) {",
				"  console.log('Olá, ' + nome);",
				"})('João');",
				],
		"description": "Função auto invocada com e sem argumento"
		},
	
		"javascript 2.2": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"void function() {",
				"  console.log('Esta é uma função auto-invocada com void.');",
				"}();",
						],
		"description": "Função auto invocado com void"
		},
	
		"javascript 2.3": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"function* meuGerador() {",
				"  yield 1;",
				"  yield 2;",
				"  yield 3;",
				"}",
				"",
				"function consumirIterator() {",
				"  const iterator = meuGerador();",
				"",
				"  for (const valor of iterator) {",
				"    console.log('Valor do iterator:', valor);",
				"  }",
				"}",
				"",
				"consumirIterator();",
						],
		"description": "Função com um iterator e consumir ele"
		},
	
		"javascript 2.4": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"function Pessoa(nome, idade) {",
				"  this.nome = nome;",
				"  this.idade = idade;",
				"  this.cumprimentar = function() {",
				"    console.log('Olá, meu nome é ' + this.nome + ' e eu tenho ' + this.idade + ' anos.');",
				"  };",
				"}",
				"",
				"// Usando a função construtora para criar objetos Pessoa",
				"var pessoa1 = new Pessoa('João', 30);",
				"var pessoa2 = new Pessoa('Maria', 25);",
				"",
				"// Chamando o método cumprimentar dos objetos",
				"pessoa1.cumprimentar(); // 'Olá, meu nome é João e eu tenho 30 anos.'",
				"pessoa2.cumprimentar(); // 'Olá, meu nome é Maria e eu tenho 25 anos.'",
						],
		"description": "Função construtora"
		},
	
		"javascript 2.5": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"minhaFuncao(); // Saída: 'Olá, mundo!'",
				"",
				"function minhaFuncao() {",
				"  console.log('Olá, mundo!');",
				"}",
						],
		"description": "Função hoisting"
		},
	
		"javascript 2.6": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"// Sem parâmetros",
				"const funcaoArrow = () => {",
				"  // Código da função",
				"};",
				"",
				"// Com um parâmetro",
				"const funcaoArrowComParametro = parametro => {",
				"  // Código da função usando o parâmetro",
				"};",
				"",
				"// Com múltiplos parâmetros",
				"const funcaoArrowComMultiplosParametros = (param1, param2) => {",
				"  // Código da função usando os parâmetros",
				"};",
				"",
				"// Com uma expressão de retorno",
				"const soma = (a, b) => a + b;",
						],
		"description": "Funções de seta"
		},
	
		"javascript 2.7": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"function* buscarDadosAssincronamente() {",
				"  const resultado = yield fazerRequisicaoAssincrona();",
				"  console.log(resultado);",
				"}",
				"",
				"function fazerRequisicaoAssincrona() {",
				"  setTimeout(() => {",
				"    gerador.next('Dados da API');",
				"  }, 1000);",
				"}",
				"",
				"const gerador = buscarDadosAssincronamente();",
				"gerador.next();",
						],
		"description": "Função geradora lidando com sequencias assincrona"
		},
	
		"javascript 2.8": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"try {",
				"  throw {",
				"    mensagem: 'Esta é uma exceção lançada com um bloco de instrução.',",
				"    codigo: 500",
				"  };",
				"} catch (excecao) {",
				"  console.error('Uma exceção foi lançada:', excecao.mensagem);",
				"  console.error('Código da exceção:', excecao.codigo);",
				"}",
						],
		"description": "Lançar uma exeção com um bloco de instrução"
		},

		"javascript 2.9": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"const pessoa = {",
				" nome: 'João',",
				"  idade: 30,",
				"  cidade: 'São Paulo'",
				"};",
				"",
				"// Acessando propriedades do objeto",
				"console.log(pessoa.nome); // Saída: João",
				"console.log(pessoa.idade); // Saída: 30",
				"console.log(pessoa.cidade); // Saída: São Paulo",
				"",
				"// Alterando o valor de uma propriedade",
				"pessoa.idade = 31;",
				"",
				"// Adicionando uma nova propriedade",
				"pessoa.profissao = 'Engenheiro';",
				"",
				"// Acessando a nova propriedade",
				"console.log(pessoa.profissao); // Saída: Engenheiro",
						],
		"description": "Acessando um objeto, criando e atribuindo valores as propriedades"
		},
	
		"javascript 3.1": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"const matriz = [",
				"  [1, 2, 3],",
				"  [4, 5, 6],",
				"  [7, 8, 9]",
				"];",
				"",
				"// Acessando elementos da matriz",
				"console.log(matriz[0][0]); // Saída: 1",
				"console.log(matriz[1][1]); // Saída: 5",
				"console.log(matriz[2][2]); // Saída: 9",
						],
		"description": "Matriz de 2 dimensoes sendo criada e acessada"
		},

		"javascript 3.2": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"function soma() {",
				"  let total = 0;",
				"  for (let i = 0; i < arguments.length; i++) {",
				"    total += arguments[i];",
				"  }",
				"  return total;",
				"}",
				"",
				"console.log(soma(1, 2, 3)); // Saída: 6",
				"console.log(soma(1, 2, 3, 4, 5)); // Saída: 15",
						],
		"description": "Uso arguments"
		},

		"javascript 3.3": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"class MinhaClasse {",
				"  constructor(valor1, valor2, valor3) {",
				"    this.valor1 = valor1;",
				"    this.valor2 = valor2;",
				"    this.valor3 = valor3;",
				"  }",
				"",
				" metodo() {",
				"    return this.valor1 + this.valor2 + this.valor3;",
				"  }",
				"}",
				"",
				"const objeto = new MinhaClasse(1, 2, 3);",
				"console.log(objeto.metodo()); // Saída: 6",
						],
		"description": "Classe normal com construtor e um metodo, sendo construido com tres valores"
		},

		"javascript 3.4": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"class MinhaClasse {",
				"  #campoPrivado;",
				"",
				"  constructor(campo) {",
				"    this.#campoPrivado = campo;",
				"  }",
				"",
				"  #metodoPrivado() {",
				"    return this.#campoPrivado;",
				"  }",
				"",
				"  metodoPublico() {",
				"    return this.#metodoPrivado();",
				"  }",
				"}",	
				"",
				"const objeto = new MinhaClasse('valor');",
				"console.log(objeto.metodoPublico()); // Saída: valor",
						],
		"description": "Classe com campos e metodos privados"
		},

		"javascript 3.5": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"try {",
				"  // Código que pode gerar um erro",
				"  throw 'Erro ocorreu!';",
				"} catch (error) {",
				"  console.error('Ocorreu um erro:', error);",
				"}",
						],
		"description": "try...catch"
		},

		"javascript 3.6": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"const nome = 'João';",
				"const sobrenome = 'Silva';",
				"const nomeCompleto = nome + ' ' + sobrenome;",
				"console.log(nomeCompleto); // Saída: João Silva",
						],
		"description": "concatenar string com +"
		},

		"javascript 3.7": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"class Exemplo {",
				" #valorPrivado = 0;",
				"",
				" get valor() {",
				"  return this.#valorPrivado;",
				" }",
				"",
				" set valor(novoValor) {",
				"  if (novoValor >= 0) {",
				"     this.#valorPrivado = novoValor;",
				"  } else {",
				"    throw new Error('O valor não pode ser negativo.');",
				"  }",
				" }",
				"}",
				"",
				"const exemplo = new Exemplo();",
				"console.log(exemplo.valor); // Saída: 0",
				"exemplo.valor = 10;",
				"console.log(exemplo.valor); // Saída: 10",
				"exemplo.valor = -5; // Lança um erro",
						],
		"description": "Uso de get/set tanto privado quanto nao privados para com propriedades privadas"
		},

		"javascript 3.8": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"let i = 0;",
				"while (i < 5) {",
				" console.log(i);",
				" i++;",
				"}",
						],
		"description": "Uso while"
		},

		"javascript 3.9": {
		"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"function dividir(dividendo, divisor) {",
				" if (divisor === 0) {",
				"  throw new Error('Não é possível dividir por zero.');",
				" }",
				"return dividendo / divisor;",
				"}",
				"",
				"try {",
				" const resultado = dividir(10, 0);",
				" console.log(resultado);",
				"} catch (error) {",
				"   console.error('Ocorreu um erro:', error.message);",
				"}",
						],
		"description": "Uso throw"
		},

		"javascript 4.1": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"// Uso de var",
				"var variavelVar = 'valor inicial';",
				"console.log(variavelVar); // Saída: valor inicial",
				"",
				"// Uso de let",
				"let variavelLet = 'valor inicial';",
				"variavelLet = 'novo valor';",
				"console.log(variavelLet); // Saída: novo valor",
				"",
				"// Uso de const",
				"const variavelConst = 'valor inicial';",
				"// variavelConst = 'novo valor'; // Isso resultaria em um erro, pois const não pode ser reatribuído",
				"console.log(variavelConst); // Saída: valor inicial",
						],
		"description": "Uso var, let e const"
		},

		"javascript 4.2": {
		"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"async function minhaFuncao() {",
				"  try {",
				"    const resultado = await algumaFuncaoAsync();",
				"    console.log(resultado);",
				"  } catch (erro) {",
				"    console.error('Ocorreu um erro:', erro);",
				"  }",
				"}",
				"minhaFuncao();",
						],
		"description": "tratamento de erro async/await"
		},

		"javascript 4.3": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"async function minhaFuncao() {",
				"  try {",
				"    const resultado = await minhaOperacaoAsync();",
				"    console.log(resultado);",
				"  } catch (erro) {",
				"    console.error('Ocorreu um erro:', erro);",
				"  }",
				"}",
				"",
				"minhaFuncao();",
						],
		"description": "usar async/await"
		},

		"javascript 4.4": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"const nome = 'Alice';",
				"const idade = 30;",
				"",
				"const mensagem = `Olá, meu nome é ${nome} e tenho ${idade} anos.`;",
				"",
				"console.log(mensagem); // Saída: Olá, meu nome é Alice e tenho 30 anos.",
						],
		"description": "template string"
		},

		"javascript 4.5": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"const valor = 42;",
				"console.log(typeof valor); // Saída: number",
				"",
				"const nome = 'João';",
				"console.log(typeof nome); // Saída: string",
				"",
				"const ativo = true;",
				"console.log(typeof ativo); // Saída: boolean",
				"",
				"const pessoa = { nome: 'Maria', idade: 25 };",
				"console.log(typeof pessoa); // Saída: object",
				"",
				"const numeros = [1, 2, 3, 4, 5];",
				"console.log(typeof numeros); // Saída: object",
				"",	
				"function soma(a, b) {",
				"  return a + b;",
				"}",
				"console.log(typeof soma); // Saída: function",
						],
		"description": "typeof"
		},

		"javascript 4.6": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"const numeros = [1, 2, 3, 4, 5];",
				"",
				"for (const numero of numeros) {",
				"  console.log(numero);",
				"}",
						],
		"description": "for...of"
		},

		"javascript 4.7": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"const dia = 3;",
				"let mensagem;",
				"",
				"switch (dia) {",
				"  case 1:",
				"    mensagem = 'Segunda-feira';",
				"    break;",
				"  case 2:",
				"    mensagem = 'Terça-feira';",
				"    break;",
				"  case 3:",
				"    mensagem = 'Quarta-feira';",
				"    break;",
				"  case 4:",
				"    mensagem = 'Quinta-feira';",
				"    break;",
				"  case 5:",
				"    mensagem = 'Sexta-feira';",
				"    break;",
				"  case 6:",
				"    mensagem = 'Sábado';",
				"    break;",
				"  case 7:",
				"    mensagem = 'Domingo';",
				"    break;",
				"  default:",
				"    mensagem = 'Dia inválido';",
				"}",
				"",
				"console.log(mensagem);",
						],
		"description": "switch"
		},

		"javascript 4.8": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"class Animal {",
				"  constructor(nome) {",
				"    this.nome = nome;",
				"  }",
				"",	
				"  emitirSom() {",
				"    console.log(`${this.nome} emitiu um som.`);",
				"  }",
				"}",
				"",
				"class Cachorro extends Animal {",
				"  constructor(nome, raca) {",
				"    super(nome);",
				"    this.raca = raca;",
				"  }",
				"",
				"  latir() {",
				"    console.log(`${this.nome} da raça ${this.raca} está latindo.`);",
				"  }",
				"}",
				"",
				"const cachorro = new Cachorro('Rex', 'Labrador');",
				"cachorro.emitirSom(); // Saída: Rex emitiu um som.",
				"cachorro.latir(); // Saída: Rex da raça Labrador está latindo.",
						],
		"description": "super e this em classes"
		},

		"javascript 4.9": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"const objeto = { a: 1, b: 2, c: 3 };",
				"",
				"for (const chave in objeto) {",
				"  console.log(`${chave}: ${objeto[chave]}`);",
				"}",
						],
		"description": "for..in"
		},

		"javascript 5.1": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"// Definindo a classe pai",
				"class Animal {",
				"  constructor(name) {",
				"    this.name = name;",
				"  }",
				"",
				"  // Método da classe pai",
				"  speak() {",
				"    console.log(`${this.name} faz um barulho.`);",
				"  }",
				"}",
				"",
				"// Definindo a classe filha que herda de Animal",
				"class Dog extends Animal {",
  			"constructor(name, breed) {",
    		"// Chamando o construtor da classe pai com super()",
    		"super(name);",
    		"this.breed = breed;",
				"  }",
				"",
				"  // Sobrescrevendo o método da classe pai",
				"  speak() {",
				"    console.log(`${this.name} é um ${this.breed} e late.`);",
				"  }",
				"}",
				"",
				"// Criando uma instância da classe filha",
				"const dog = new Dog('Fido', 'Golden Retriever');",
				"",
				"// Chamando o método da classe filha",
				"dog.speak();",
						],
		"description": "Herança em classe e override metodos da classe pai"
		},

		"javascript 5.2": {
			"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"let i = 0;",
				"",
				"do {",
				"  console.log(i);",
				"  i++;",
				"} while (i < 5);",
						],
		"description": "do while"
		},

		"javascript 5.3": {
		"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"class MinhaClasse {",
				"  // Atributos de classe (estáticos)",
				"  static variavelEstatica;",
				"",
				"  // Método estático para inicialização de variáveis estáticas",
				"  static inicializar() {",
				"    MinhaClasse.variavelEstatica = 'Valor inicial';",
				"  }",
				"",
				"  // Bloco de inicialização estático (simulado)",
				"  static {",
				"    // Chamada para o método estático de inicialização",
				"    MinhaClasse.inicializar();",
				"    console.log('Bloco estático executado');",
				"  }",
				"}",
				"",
				"// A classe pode ser usada normalmente após sua definição",
				"console.log(MinhaClasse.variavelEstatica); // Saída: Valor inicial",
						],
		"description": "campos, metodo e static block statics em uma class"
		},

		"javascript 5.4": {
		"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"class MinhaClasse {",
				"  constructor(...args) {",
				"    console.log('Construtor chamado com os seguintes argumentos:', args);",
				"  }",
				"}",
				"",
				"// Criando instância da classe com diferentes números de argumentos",
				"const instancia1 = new MinhaClasse();",
				"const instancia2 = new MinhaClasse(1, 2, 3);",
				"const instancia3 = new MinhaClasse('a', 'b', 'c', 'd');",
				"",
				"// Saída no console:",
				"// Construtor chamado com os seguint",
						],
		"description": "parametro rest em contrutor de classe"
		},

		"javascript 5.5": {
		"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"const pessoa = {",
				"  nome: 'João',",
				"  idade: 30,",
				"  profissao: 'Engenheiro'",
				"};",
				"",
				"console.log(pessoa.nome); // Saída: João",
				"console.log(pessoa.idade); // Saída: 30",
				"console.log(pessoa.profissao); // Saída: Engenheiro",
						],
		"description": "objeto literal"
		},

		"javascript 5.6": {
		"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"function saudacao(nome = 'visitante') {",
				"  console.log(`Olá, ${nome}!`);",
				"}",
				"",
				"saudacao(); // Saída: Olá, visitante!",
				"saudacao('João'); // Saída: Olá, João!",
						],
		"description": "parametro padrão"
		},

		"javascript 5.7": {
		"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"function obterDados() {",
				"  return new Promise((resolve, reject) => {",
				"    // Simulando uma requisição assíncrona",
				"    setTimeout(() => {",
				"      const sucesso = true;",
				"      if (sucesso) {",
				"        resolve('Dados foram obtidos com sucesso!');",
				"      } else {",
				"        reject(new Error('Falha ao obter os dados.'));",
				"      }",
				"    }, 2000);",
				"  });",
				"}",
				"",
				"obterDados()",
				"  .then((dados) => {",
				"    console.log('Sucesso:', dados);",
				"  })",
				"  .catch((erro) => {",
				"    console.error('Erro:', erro.message);",
				"  });",
						],
		"description": "use de then em promisse, com suas duas funções"
		},

		"javascript 5.8": {
		"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"// Declaração de função tradicional",
				"function somar(a, b) {",
				"  return a + b;",
				"}",
				"",
				"// Chamada da função",
				"console.log(somar(3, 5)); // Saída: 8",
				"",
				"// Declaração de função anônima atribuída a uma variável",
				"const multiplicar = function(a, b) {",
				"  return a * b;",
				"};",
				"",
				"// Chamada da função anônima",
				"console.log(multiplicar(4, 6)); // Saída 24",
						],
		"description": "declaração de função"
		},

		"javascript 5.9": {
		"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"// Definindo uma função construtora",
				"function Animal(nome) {",
				"  this.nome = nome;",
				"}",
				"",
				"// Adicionando um método ao protótipo do objeto Animal",
				"Animal.prototype.andar = function() {",
				"  console.log(this.nome + ' está andando...');",
				"};",
				"",
				"// Criando uma instância do objeto Animal",
				"let cachorro = new Animal('Bob');",
				"",
				"// Chamando o método adicionado ao protótipo",
				"cachorro.andar(); // Saída: Bob está andando...",
				"",
				"// Adicionando uma propriedade ao protótipo do objeto Animal",
				"Animal.prototype.tipo = 'Mamífero';",
				"",
				"// Acessando a propriedade adicionada ao protótipo",
				"console.log(cachorro.tipo); // Saída: Mamífero",
						],
		"description": "definir propriedade/metdo em prototype"
		},

		"javascript 6.1": {
		"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"let pessoa = {",
				"  // Propriedade privada",
				"  _nome: 'John Doe',",
				"",
				"  // Getter para obter o nome",
				"  get nome() {",
				"    return this._nome;",
				"  },",
				"",
				"  // Setter para definir o nome",
				"  set nome(novoNome) {",
				"    this._nome = novoNome;",
				"  }",
				"};",
				"",
				"// Usando o getter para obter o nome",
				"console.log(pessoa.nome); // Saída: John Doe",
				"",
				"// Usando o setter para definir um novo nome",
				"pessoa.nome = 'Alice';",
				"console.log(pessoa.nome); // Saída: Alice",
						],
		"description": "definir um get/set em um objeto literal"
		},

		"javascript 6.2": {
		"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
			"let pessoa = {",
			"  _nome: 'John Doe'",
			"};",
			"",
			"// Definindo um getter para a propriedade nome",
			"Object.defineProperty(pessoa, 'nome', {",
			"  get: function() {",
			"    return this._nome;",
			"  },",
			"  enumerable: true, // torna a propriedade visível durante a enumeração",
			"  configurable: true // permite reconfigurar a propriedade posteriormente",
			"});",
			"",
			"// Definindo um setter para a propriedade nome",
			"Object.defineProperty(pessoa, 'nome', {",
			"  set: function(novoNome) {",
			"    this._nome = novoNome;",
			"  },",
			"  enumerable: true, // torna a propriedade visível durante a enumeração",
			"  configurable: true // permite reconfigurar a propriedade posteriormente",
			"});",
			"",
			"// Usando o getter para obter o nome",
			"console.log(pessoa.nome); // Saída: John Doe",
			"",
			"// Usando o setter para definir um novo nome",
			"pessoa.nome = 'Alice';",
			"console.log(pessoa.nome); // Saída: Alice",
						],
		"description": "definir um get/set posteriomente em um objeto ja criado"
		},

		"javascript 6.3": {
		"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"class Pessoa {",
				"  constructor(nome, idade) {",
				"    this.nome = nome;",
				"    this.idade = idade;",
				"    this.apresentar = function() {",
				"      console.log(`Olá, meu nome é ${this.nome} e tenho ${this.idade} anos.`);",
				"    };",
				"  }",
				"}",
				"",
				"// Criando uma instância da classe Pessoa",
				"let pessoa1 = new Pessoa('João', 30);",
				"",
				"// Chamando o método apresentar",
				"pessoa1.apresentar(); // Saída: Olá, meu nome é João e tenho 30 anos.",
						],
		"description": "definir um metodo em uma classe via this"
		},

		"javascript 6.4": {
		"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"let objeto = {",
				"  // Método normal",
				"  metodoNormal: function() {",
				"    console.log('Este é um método normal');",
				"  },",
				"",  
				"  // Método abreviado",
				"  metodoAbreviado() {",
				"    console.log('Este é um método abreviado');",
				"  }",
				"};",
				"",
				"// Chamando os métodos",
				"objeto.metodoNormal();   // Saída: Este é um método normal",
				"objeto.metodoAbreviado(); // Saída: Este é um método abreviado",
						],
		"description": "definir um metodo normal e abreviado em um objeto"
		},

		"javascript 6.5": {
		"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"// Array de objetos",
				"const pessoas = [",
				"  { nome: 'Alice', idade: 30 },",
				"  { nome: 'Bob', idade: 25 },",
				"  { nome: 'Carol', idade: 35 }",
				"];",
				"",
				"// Iterando sobre o array de objetos usando for...of com destruturação",
				"for (const { nome, idade } of pessoas) {",
				"  console.log(`${nome} tem ${idade} anos.`);",
				"}",
						],
		"description": "destruturação em for..of"
		},

		"javascript 6.6": {
		"scope": "javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"class Pai {",
				"  static mensagem() {",
				"    return 'Olá do pai!'';",
				"  }",
				"}",
				"",
				"class Filho extends Pai {",
				"  static mensagem() {",
				"    return 'Olá do filho!';",
				"  }",
				"",
				"  static mensagemDoPai() {",
				"    return super.mensagem(); // Acessando a classe pai diretamente",
				"  }",
				"}",
				"",
				"console.log(Filho.mensagem()); // Saída: 'Olá do filho!'",
				"console.log(Filho.mensagemDoPai()); // Saída: 'Olá do pai!'",
						],
		"description": "substituir um membros static de uma classe, mas aprimorado com super"
		},

	"javascript 6.7": {
	"scope": "javascript, typescript",
	"prefix": "_codigo",
			"body": [
				"const obj = {",
				"  // __proto__",
				"  __proto__: theProtoObj,",
				"  // Shorthand for 'handler: handler'",
				"  handler,",
				"  // Methods",
				"  toString() {",
				"    // Super calls",
				"    return ''d'' + super.toString();",
				"  },",
				"  // Computed (dynamic) property names",
				"  ['prop_' + (() => 42)()]: 42,",
				"};",
						],
		"description": "Objeto literal com prototipo, campo e metodo"
		},
/*****************************************************************************************/
//																DOM
/*****************************************************************************************/
		"Attr ": {
		"scope": "javascript, typescript",
		"prefix": "_library DOM",
			"body": [
			"```",
			"EventTarget < Node < Attr",
			"```",
			"localName",
			"name",
			"namespaceURI",
			"ownerElement",
			"prefix",
			/*specified',*/
			"value",
			/*"- Attr"*/
			"- CharacterData",
			"- Comment",
			"- CustomEvent",
			"- Document",
	
			"- DocumentFragment",
			"- DocumentType",
			"- DOMError",
			"- DOMException",
			"- DOMImplementation",
			"- DOMString",
			"- DOMTimeStamp",
			"- DOMSettableTokenList",
			"- DOMStringList",
			"- DOMTokenList",
			"- Element",
			"- Event",
			"- EventTarget",
			"- HTMLCollection",
			"- MutationObserver",
			"- MutationRecord",
			"- Node",
			"- NodeFilter",
			"- NodeIterator",
			"- NodeList",
			"- ParentNode ⚠️",
			"- ProcessingInstruction",
			"- Range",
			"- Text",
			"- TreeWalker",
			"- URL",
			"- Window",
			"- Worker",
			"- XMLDocument",
			"```"
					],
			"description": "Este tipo representa um atributo de elemento DOM como um objeto. Na maioria dos métodos DOM, você provavelmente irá retornar diretamente o atributo como uma string (e.g., Element.getAttribute(), mas certas funções (e.g., Element.getAttributeNode() ) ou meios de iteração retornam tipos Attr"
		},
	
		"CharacterData": {
		"scope": "javascript, typescript",
		"prefix": "_library DOM",
			"body": [
				"EventTarget < Node < CharacterData",
				"data",
				"length",
				"nextElementSibling",
				"previousElementSibling",
				"after()",
				"appendData()",
				"before()",
				"deleteData()",
				"insertData()",
				"remove()",
				"replaceData()",
				"replaceWith()",
				"substringData()",
						],
			"description": "A CharacterDatainterface abstrata representa um Nodeobjeto que contém caracteres. Esta é uma interface abstrata, o que significa que não existem objetos do tipo CharacterData: ela é implementada por outras interfaces como Text, Comment, CDATASectionou ProcessingInstruction, que não são abstratas"
		},
	
		"Comment": {
		"scope": "javascript, typescript",
		"prefix": "_library DOM",
			"body": [
				"EventTarget < Node < CharacterData < Comment",
				"Comment()",
						],
			"description": "A Comment interface representa notações textuais na marcação; embora geralmente não sejam mostrados visualmente, tais comentários estão disponíveis para leitura na visualização da fonte."
		},
	
		"CustomEvent": {
		"scope": "javascript, typescript",
		"prefix": "_library DOM",
			"body": [
				"```",
				"**Event < CustomEvent**",
				"```",
				"CustomEvent()",
						],
			"description": "A interface CustomEvent representa eventos inicializados por um aplicativo para qualquer finalidade."
		},
	
		"Document": {
		"scope": "javascript, typescript",
		"prefix": "_library DOM",
			"body": [
				"Herança",
				"EventTarget < Node < Document",

				"",
				"Construtor",
				"Document()",
				
				"",
				"Propriedades de instância",
				"activeElement",
				"adoptedStyleSheets",
				// alinkColor
				// all
				// anchors
				//applets
				// bgColor
				"body",
				"characterSet",
				"childElementCount",
				"children",
				"compatMode",
				"contentType",
				"cookie",
				"currentScript",
				"defaultView",
				"designMode",
				"dir",
				"doctype",
				"documentElement",
				"documentURI",
				// domain
				"embeds",
				"featurePolicy ⚠️",
				// fgColor
				"firstElementChild",
				"fonts",
				"forms",
				"fragmentDirective ⚠️",
				// fullscreen
				"fullscreenElement",
				"fullscreenEnabled",
				"head",
				"hidden",
				"images",
				"implementation",
				"lastElementChild",
				"lastModified",
				// lastStyleSheetSet
				// linkColor
				"links",
				"location",
				"pictureInPictureElement",
				"pictureInPictureEnabled",
				"plugins",
				"pointerLockElement",
				// preferredStyleSheetSet
				"prerendering ⚠️",
				"readyState",
				"referrer",
				//rootElement
				"scripts",
				"scrollingElement",
				// selectedStyleSheetSet
				"styleSheets",
				// styleSheetSets
				"timeline",
				"title",
				"URL",
				"visibilityState",
				// vlinkColor
				// xmlEncoding
				// xmlVersion

				"",
				"Metodo",
				"adoptNode()",
				"append()",
				"caretPositionFromPoint()",
				"caretRangeFromPoint() ⚠️",
				// clear()
				"close()",
				"createAttribute()",
				"createAttributeNS()",
				"createCDATASection()",
				"createComment()",
				"createDocumentFragment()",
				"createElement()",
				"createElementNS()",
				"createEvent()",
				"createExpression()",
				"createNodeIterator()",
				"createNSResolver()",
				"createProcessingInstruction()",
				"createRange()",
				"createTextNode()",
				// createTouch()
				// createTouchList()
				"createTreeWalker()",
				"elementFromPoint()",
				"elementsFromPoint()",
				// enableStyleSheetsForSet()
				"evaluate()",
				// execCommand()
				"exitFullscreen()",
				"exitPictureInPicture()",
				"exitPointerLock()",
				"getAnimations()",
				"getElementById()",
				"getElementsByClassName()",
				"getElementsByName()",
				"getElementsByTagName() ― retorna um número HTMLCollectionde elementos com o nome da tag fornecido.",
				"getElementsByTagNameNS()",
				"getSelection()",
				"hasFocus()",
				"hasStorageAccess()",
				"importNode()",
				"mozSetImageElement() ⚠️",
				"open()",
				"prepend()",
				// queryCommandEnabled()
				// queryCommandState()
				// queryCommandSupported()
				"querySelector()",
				"querySelectorAll()",
				"releaseCapture() ⚠️",
				"replaceChildren()",
				"requestStorageAccess()",
				"startViewTransition() ⚠️",
				"write()",
				"writeln()",

				"",
				"Evento",
				"afterscriptexecute ⚠️",
				"beforescriptexecute ⚠️",
				"copy",
				"cut",
				"DOMContentLoaded",
				"fullscreenchange",
				"fullscreenerror",
				"lostpointercapture",
				"paste",
				"pointerlockchange",
				"pointerlockerror",
				"prerenderingchange ⚠️",
				"readystatechange",
				"scroll",
				"scrollend",
				"selectionchange",
				"visibilitychange",
						],
			"description": "A interface Document representa qualquer página da web carregada no navegador e serve como ponto de entrada para o conteúdo da página da web, que é a árvore DOM."
		},
	
		"Attr": {
		"scope": "javascript, typescript",
		"prefix": "_library DOM",
			"body": [
				"```",
				"- **EventTarget < Node < Attr**",
				"- localName",
				"- name",
				"- namespaceURI",
				"- ownerElement",
				"- prefix",
				/*specified',*/
				"- value",
				/*"- Attr",*/
	
				"- CharacterData",
				"- Comment",
				"- CustomEvent",
				"- Document",
				"- DocumentFragment",
				"- DocumentType",
				"- DOMError",
				"- DOMException",
				"- DOMImplementation",
				"- DOMString",
				"- DOMTimeStamp",
				"- DOMSettableTokenList",
				"- DOMStringList",
				"- DOMTokenList",
				"- Element",
				"- Event",
				"- EventTarget",
				"- HTMLCollection",
				"- MutationObserver",
				"- MutationRecord",
				"- Node",
				"- NodeFilter",
				"- NodeIterator",
				"- NodeList",
				"- ParentNode ⚠️",
				"- ProcessingInstruction",
				"- Range",
				"- Text",
				"- TreeWalker",
				"- URL",
				"- Window",
				"- Worker",
				"- XMLDocument",
				"```"
						],
			"description": "Este tipo representa um atributo de elemento DOM como um objeto. Na maioria dos métodos DOM, você provavelmente irá retornar diretamente o atributo como uma string (e.g., Element.getAttribute(), mas certas funções (e.g., Element.getAttributeNode() ) ou meios de iteração retornam tipos Attr"
		},
	
		"Element": {
		"scope": "javascript, typescript",
		"prefix": "_library DOM",
			"body": [
				"Herança",
				"Node",
				"EventTarget",

				"",
				"Propriedades de instância",
				"ariaAtomic",
				"ariaAutoComplete",
				"ariaBusy",
				"ariaChecked",
				"ariaColCount",
				"ariaColIndex",
				"ariaColIndexText⚠️",
				"ariaColSpan",
				"ariaCurrent",
				"ariaDescription",
				"ariaDisabled",
				"ariaExpanded",
				"ariaHasPopup",
				"ariaHidden",
				"ariaKeyShortcuts",
				"ariaLabel",
				"ariaLevel",
				"ariaLive",
				"ariaModal",
				"ariaMultiLine",
				"ariaMultiSelectable",
				"ariaOrientation",
				"ariaPlaceholder",
				"ariaPosInSet",
				"ariaPressed",
				"ariaReadOnly",
				"ariaRelevant⚠️",
				"ariaRequired",
				"ariaRoleDescription",
				"ariaRowCount",
				"ariaRowIndex",
				"ariaRowIndexText⚠️",
				"ariaRowSpan",
				"ariaSelected",
				"ariaSetSize",
				"ariaSort",
				"ariaValueMax",
				"ariaValueMin",
				"ariaValueNow",
				"ariaValueText",
				"assignedSlot",
				"attributes",
				"childElementCount",
				"children",
				"classList",
				"className",
				"clientHeight",
				"clientLeft",
				"clientTop",
				"clientWidth",
				"elementTiming⚠️",
				"firstElementChild",
				"id",
				"innerHTML",
				"lastElementChild",
				"localName",
				"namespaceURI",
				"nextElementSibling",
				"outerHTML",
				"part",
				"prefix",
				"previousElementSibling",
				"scrollHeight",
				"scrollLeft",
				"scrollLeftMax⚠️",
				"scrollTop",
				"scrollTopMax⚠️",
				"scrollWidth",
				"shadowRoot",
				"slot",
				"tagName",

				"",
				"Métodos de instância",
				"after()",
				"animate()",
				"append()",
				"attachShadow()",
				"before()",
				"checkVisibility()",
				"closest()",
				"computedStyleMap()",
				"getAnimations()",
				"getAttribute()",
				"getAttributeNames()",
				"getAttributeNode()",
				"getAttributeNodeNS()",
				"getAttributeNS()",
				"getBoundingClientRect()",
				"getClientRects()",
				"getElementsByClassName()",
				"getElementsByTagName()",
				"getElementsByTagNameNS()",
				"hasAttribute()",
				"hasAttributeNS()",
				"hasAttributes()",
				"hasPointerCapture()",
				"insertAdjacentElement()",
				"insertAdjacentHTML()",
				"insertAdjacentText()",
				"matches()",
				"prepend()",
				"querySelector()",
				"querySelectorAll()",
				"releasePointerCapture()",
				"remove()",
				"removeAttribute()",
				"removeAttributeNode()",
				"removeAttributeNS()",
				"replaceChildren()",
				"replaceWith()",
				"requestFullscreen()",
				"requestPointerLock()",
				"scroll()",
				"scrollBy()",
				"scrollIntoView()",
				"scrollIntoViewIfNeeded()⚠️",
				"scrollTo()",
				"setAttribute()",
				"setAttributeNode()",
				"setAttributeNodeNS()",
				"setAttributeNS()",
				"setCapture()🗑️",
				"setHTML()⚠️",
				"setPointerCapture()",
				"toggleAttribute()",
				
				"",
				"Eventos",
				"afterscriptexecute⚠️",
				"animationcancel",
				"animationend",
				"animationiteration",
				"animationstart",
				"auxclick",
				"beforeinput",
				"beforematch⚠️",
				"beforescriptexecute⚠️",
				"beforexrselect⚠️",
				"blur",
				"click",
				"compositionend",
				"compositionstart",
				"compositionupdate",
				"contentvisibilityautostatechange⚠️",
				"contextmenu",
				"copy",
				"cut",
				"dblclick",
				"DOMActivate🗑️",
				"DOMMouseScroll🗑️",
				"focus",
				"focusin",
				"focusout",
				"fullscreenchange",
				"fullscreenerror",
				"gesturechange⚠️",
				"gestureend⚠️",
				"gesturestart⚠️",
				"gotpointercapture",
				"input",
				"keydown",
				"keypress🗑️",
				"keyup",
				"lostpointercapture",
				"mousedown",
				"mouseenter",
				"mouseleave",
				"mousemove",
				"mouseout",
				"mouseover",
				"mouseup",
				"mousewheel🗑️",
				"MozMousePixelScroll🗑️",
				"paste",
				"pointercancel",
				"pointerdown",
				"pointerenter",
				"pointerleave",
				"pointermove",
				"pointerout",
				"pointerover",
				"pointerrawupdate⚠️",
				"pointerup",
				"scroll",
				"scrollend",
				"securitypolicyviolation",
				"touchcancel",
				"touchend",
				"touchmove",
				"touchstart",
				"transitioncancel",
				"transitionend",
				"transitionrun",
				"transitionstart",
				"webkitmouseforcechanged⚠️",
				"webkitmouseforcedown⚠️",
				"webkitmouseforcewillbegin⚠️",
				"webkitmouseforceup⚠️",
				"webkitmouseforcewillbegin⚠️",
						],
			"description": ""
		},
	
		"windown": {
		"scope": "javascript, typescript",
		"prefix": "_library DOM",
			"body": [
				"Herança",
				"EventTarget",

				"",
				"Propriedades de instância",
				"closed",
				"console",
				"cookieStore⚠️",
				"credentialless⚠️",
				"customElements",
				"devicePixelRatio",
				"document",
				"documentPictureInPicture⚠️",
				"event🗑️",
				"external🗑️",
				"frameElement",
				"frames",
				"fullScreen⚠️",
				"history",
				"innerHeight",
				"innerWidth",
				"launchQueue⚠️",
				"length",
				"localStorage",
				"location",
				"locationbar",
				"menubar",
				"mozInnerScreenX⚠️",
				"mozInnerScreenY⚠️",
				"name",
				"navigation⚠️",
				"navigator",
				"opener",
				"orientation🗑️",
				"originAgentCluster⚠️",
				"outerHeight",
				"outerWidth",
				"parent",
				"personalbar",
				"screen",
				"screenLeft",
				"screenTop",
				"screenX",
				"screenY",
				"scrollbars",
				"scrollMaxX⚠️",
				"scrollMaxY⚠️",
				"scrollX",
				"scrollY",
				"self",
				"sessionStorage",
				"sharedStorage⚠️",
				"sidebar🗑️",
				"speechSynthesis",
				"status🗑️",
				"statusbar",
				"toolbar",
				"top",
				"visualViewport",
				"window",

				"",
				"Métodos de instância",
				"alert()",
				"back(🗑️)",
				"blur()🗑️",
				"cancelAnimationFrame()",
				"cancelIdleCallback()",
				"captureEvents()🗑️",
				"clearImmediate()🗑️",
				"close()",
				"confirm()",
				"dump()⚠️",
				"find()⚠️",
				"focus()",
				"forward()🗑️",
				"getComputedStyle()",
				"getDefaultComputedStyle()⚠️",
				"getScreenDetails()⚠️",
				"getSelection()",
				"matchMedia()",
				"moveBy()",
				"moveTo()",
				"open()",
				"postMessage()",
				"print()",
				"prompt()",
				"queryLocalFonts()⚠️",
				"releaseEvents()🗑️",
				"requestAnimationFrame()",
				"requestFileSystem()🗑️",
				"requestIdleCallback()",
				"resizeBy()",
				"resizeTo()",
				"scroll()",
				"scrollBy()",
				"scrollByLines()⚠️",
				"scrollByPages()⚠️",
				"scrollTo()",
				"setImmediate()🗑️",
				"setResizable()🗑️",
				"showDirectoryPicker()⚠️",
				"showModalDialog()🗑️",
				"showOpenFilePicker()⚠️",
				"showSaveFilePicker()⚠️",
				"sizeToContent()⚠️",
				"stop()",
				"updateCommands()⚠️",
				"webkitConvertPointFromNodeToPage()🗑️",
				"webkitConvertPointFromPageToNode()🗑️",
				
				"",
				"Eventos",
				"afterprint",
				"appinstalled",
				"beforeinstallprompt",
				"beforeprint",
				"beforeunload",
				"blur",
				"copy",
				"cut",
				"devicemotion",
				"deviceorientation",
				"deviceorientationabsolute",
				"error",
				"focus",
				"gamepadconnected",
				"gamepaddisconnected",
				"hashchange",
				"languagechange",
				"load",
				"message",
				"messageerror",
				"offline",
				"online",
				"orientationchange🗑️",
				"pagehide",
				"pageshow",
				"paste",
				"popstate",
				"rejectionhandled",
				"resize",
				"storage",
				"unhandledrejection",
				"unload🗑️",
				"vrdisplayactivate🗑️",
				"vrdisplayconnect🗑️",
				"vrdisplaydeactivate🗑️",
				"vrdisplaydisconnect🗑️",
				"vrdisplaypresentchange🗑️",
			],
			"description": ""
		},

			
		/*"zzzzz": {
			"scope": "javascript, typescript",
			"prefix": "........................",
			"body": [
				"<>",
						],
			"description": ""
		},*/

		
/*****************************************************************************************/
//																Javascript
/*****************************************************************************************/

		/*"js   ": {
		"scope": "javascript, typescript",
		"prefix": "_javascript Blocos de construção JavaScript",
				"body": [
				"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks"
						],
		"description": "27/02/24",
		},
	
		"js    ": {
		"scope": "javascript, typescript",
		"prefix": "_javascript Apresentando objetos JavaScript",
				"body": [
					"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects"

						],
		"description": "",
		},
	
		"js     ": {
			"scope": "javascript, typescript",
			"prefix": "_javascript Apresentando objetos JavaScript",
					"body": [
						"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects"
	
							],
			"description": "",
			},*/
/*****************************************************************************************/
//																React 
/*****************************************************************************************/
	"jsx  ": {
	"scope": "javascript, typescript",
	"prefix": "_react",
	"body": [
		"https://imgur.com/A9sUPsS.png",
		"https://imgur.com/Oh6b8zO.png",
		"https://imgur.com/UJdkaSZ.png",
		"https://imgur.com/DAI796Y.png",
		"https://imgur.com/Kj8FOwz.png",
		"https://imgur.com/QDYuXK6.png",
		"https://imgur.com/DaX4btR.png",
		"https://imgur.com/HZHuahB.png",
		"https://imgur.com/ABY0kiK.png",
		"https://imgur.com/WI1Vk8c.png",
		"https://imgur.com/XJkWglY.png",
	],
	"description": ""
	},
/*****************************************************************************************/
//																React Codigo
/*****************************************************************************************/
	
		"react 1.1": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"// https://react.dev/learn/describing-the-ui",
				"function Profile() {",
				"  return (",
				"    <img",
				"      src='https://i.imgur.com/MK3eW3As.jpg'",
				"      alt='Katherine Johnson'",
				"    />",
				"  );",
				"}",
				
				"export default function Gallery() {",
				"  return (",
				"    <section>",
				"      <h1>Amazing scientists</h1>",
				"      <Profile />",
				"      <Profile />",
				"      <Profile />",
				"    </section>",
				"  );",
				"}",
	
			],
		"description": "Conceito de usar componente dentro de outros"
		},
	
		"react 1.2": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"// https://react.dev/learn/describing-the-ui",
				"export default function TodoList() {",
				"  return (",
				"    <>",
				"      <h1>Hedy Lamarr's Todos</h1>",
				"      <img",
				"        src='https://i.imgur.com/yXOvdOSs.jpg'",
				"        alt='Hedy Lamarr'",
				"        className='photo'",
				"      />",
				"      <ul>",
				"        <li>Invent new traffic lights</li>",
				"        <li>Rehearse a movie scene</li>",
				"        <li>Improve spectrum technology</li>",
				"      </ul>",
				"    </>",
				"  );",
				"}",
						],
		"description": "html embutido"
		},
	
		"react 1.3": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"> **Gallery.js**",
				"import Profile from './Profile.js';",
	
				"export default function Gallery() {",
				"  return (",
				"    <section>",
				"      <h1>Amazing scientists</h1>",
				"      <Profile />",
				"      <Profile />",
				"      <Profile />",
				"    </section>",
				"  );",
				"}",
	
				"```",
				"> **Profile.js**",
				"```",
				"export default function Profile() {",
				"  return (",
				"    <img",
				"      src='https://i.imgur.com/QIrZWGIs.jpg'",
				"      alt='Alan L. Hart'",
				"    />",
				"  );",
				"}",
						],
		"description": "Exportando e usando o componente importado"
		},
	
		"react 1.4": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"const person = {",
				"  name: 'Gregorio Y. Zara',",
				"  theme: {",
				"    backgroundColor: 'black',",
				"    color: 'pink'",
				"  }",
				"};",
	
				"export default function TodoList() {",
				"  return (",
				"    <div style={person.theme}>",
				"      <h1>{person.name}'s Todos</h1>",
				"      <img",
				"        className='avatar'",
				"        src='https://i.imgur.com/7vQD0fPs.jpg'",
				"        alt='Gregorio Y. Zara'",
				"      />",
				"      <ul>",
				"        <li>Improve the videophone</li>",
				"        <li>Prepare aeronautics lectures</li>",
				"        <li>Work on the alcohol-fuelled engine</li>",
				"      </ul>",
				"    </div>",
				"  );",
				"}",
	
						],
		"description": "Criando uma variavel com o style e entao os usando no componente"
		},
	
		"react 1.5": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"function Item({ name, isPacked }) {",
				"  return (",
				"    <li className='item'>",
				"      {name} {isPacked && '✔'}",
				"    </li>",
				"  );",
				"}",
				"",
				"export default function PackingList() {",
				"  return (",
				"    <section>",
				"      <h1>Sally Ride's Packing List</h1>",
				"      <ul>",
				"        <Item",
				"          isPacked={true}",
				"          name='Space suit'",
				"        />",
				"        <Item",
				"          isPacked={true}",
				"          name='Helmet with a golden leaf'",
				"        />",
				"        <Item",
				"          isPacked={false}",
				"          name='Photo of Tam'",
				"        />",
				"      </ul>",
				"    </section>",
				"  );",
				"}",
						],
		"description": "Renderização condicional"
		},
	
		"react 1.6": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
	
				"```",
				"> App.js",
				"```",
				"import { people } from './data.js';",
				"import { getImageUrl } from './utils.js';",
				"",
				"export default function List() {",
				"  const listItems = people.map(person =>",
				"    <li key={person.id}>",
				"      <img",
				"        src={getImageUrl(person)}",
				"        alt={person.name}",
				"      />",
				"      <p>",
				"        <b>{person.name}:</b>",
				"        {' ' + person.profession + ' '}",
				"        known for {person.accomplishment}",
				"      </p>",
				"    </li>",
				"  );",
				"  return (",
				"    <article>",
				"      <h1>Scientists</h1>",
				"      <ul>{listItems}</ul>",
				"    </article>",
				"  );",
				"}",
	
				"> Data.js",
				"export const people = [{",
				" id: 0,",
				" name: 'Creola Katherine Johnson',",
				" profession: 'mathematician',",
				" accomplishment: 'spaceflight calculations',",
				" imageId: 'MK3eW3A'",
				"}, {",
				" id: 1,",
				" name: 'Mario José Molina-Pasquel Henríquez',",
				" profession: 'chemist',",
				" accomplishment: 'discovery of Arctic ozone hole',",
				" imageId: 'mynHUSa'",
				"}, {",
				" id: 2,",
				" name: 'Mohammad Abdus Salam',",
				" profession: 'physicist',",
				" accomplishment: 'electromagnetism theory',",
				" imageId: 'bE7W1ji'",
				"}, {",
				" id: 3,",
				" name: 'Percy Lavon Julian',",
				" profession: 'chemist',",
				" accomplishment: 'pioneering cortisone drugs, steroids and birth control pills',",
				" imageId: 'IOjWm71'",
				"}, {",
				" id: 4,",
				" name: 'Subrahmanyan Chandrasekhar',",
				" profession: 'astrophysicist',",
				" accomplishment: 'white dwarf star mass calculations',",
				" imageId: 'lrWQx8l'",
				"}];",
	
				"```",
				"> utils.js",
				"```",
				"export function getImageUrl(person) {",
				" return (",
				"  'https://i.imgur.com/' +",
				"   person.imageId +",
				"  's.jpg'",
				" );",
				"}"
						],
		"description": "Renderizando listas"
		},
	
		"react 1.7": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"function Cup({ guest }) {",
				"  return <h2>Tea cup for guest #{guest}</h2>;",
				"}",
				"",
				"export default function TeaSet() {",
				"  return (",
				"    <>",
				"      <Cup guest={1} />",
				"      <Cup guest={2} />",
				"      <Cup guest={3} />",
				"    </>",
				"  );",
				"}",
						],
		"description": "Mantendo componente puro"
		},
	
		"react 1.8": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"```",
				"> Return componente de linha unica",
				"```",
	
				"return <img src='https://i.imgur.com/MK3eW3As.jpg' alt='Katherine Johnson' />;",
				"",
				"return (",
				"  <div>",
				"    <img src='https://i.imgur.com/MK3eW3As.jpg' alt='Katherine Johnson' />",
				"  </div>",
				");",
						],
		"description": "Componente com return abreviado e nao abreviado"
		},
	
		"react 1.9": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"export default function Avatar() {",
				"  const avatar = 'https://i.imgur.com/7vQD0fPs.jpg';",
				"  const description = 'Gregorio Y. Zara';",
				"  return (",
				"    <img",
				"      className='avatar'",
				"      src={avatar}",
				"      alt={description}",
				"    />",
				"  );",
				"}",
						],
		"description": "Codigo limpo, declarando os literals em variaveis e so depois nas props"
		},
	
		"react 2.1": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"export default function TodoList() {",
				"  const name = 'Gregorio Y. Zara';",
				"  return (",
				"    <h1>{name}'s To Do List</h1>",
				"  );",
				"}",
						],
		"description": "Usando variaveis javascript dentro do JSX"
		},
	
		"react 2.2": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"export default function TodoList() {",
				"  return (",
				"    <ul style={{",
				"      backgroundColor: 'black',",
				"      color: 'pink'",
				"    }}>",
				"      <li>Improve the videophone</li>",
				"      <li>Prepare aeronautics lectures</li>",
				"      <li>Work on the alcohol-fuelled engine</li>",
				"    </ul>",
				"  );",
				"}",
						],
		"description": "Usando style elemento css diretamente no html JSX"
		},
	
		"react 2.3": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"```",
				"> App.js",
				"```",
				"import Avatar from './Avatar.js';",
				"",	
				"function Card({ children }) {",
				"  return (",
				"    <div className='card'>",
				"      {children}",
				"    </div>",
				"  );",
				"}",
				"",		
				"export default function Profile() {",
				"  return (",
				"    <Card>",
				"      <Avatar",
				"        size={100}",
				"        person={{ ",
				"          name: 'Katsuko Saruhashi',",
				"          imageId: 'YfeOqp2'",
				"        }}",
				"      />",
				"    </Card>",
				"  );",
				"}",
				"```",
				"> Avatar.js",
				"```",
				"import { getImageUrl } from './utils.js';",
				"",
				"export default function Avatar({ person, size }) {",
				"  return (",
				"    <img",
				"      className='avatar'",
				"      src={getImageUrl(person)}",
				"      alt={person.name}",
				"      width={size}",
				"      height={size}",
				"    />",
				"  );",
				"}",
				"```",
				"> utils.js",
				"```",
				"export function getImageUrl(person, size = 's') {",
				"  return (",
				"    'https://i.imgur.com/' +",
				"    person.imageId +",
				"    size +",
				"    '.jpg'",
				"  );",
				"}",
						],
		"description": "Usando children propriedade passada automaticamente"
		},
	
		"react 2.4": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"function Item({ name, isPacked }) {",
				"  if (isPacked) {",
				"    return <li className='item'>{name} ✔</li>;",
				"  }",
				"  return <li className='item'>{name}</li>;",
				"}",
				"",
				"export default function PackingList() {",
				"  return (",
				"    <section>",
				"      <h1>Sally Ride's Packing List</h1>",
				"      <ul>",
				"        <Item ",
				"          isPacked={true} ",
				"          name='Space suit' ",
				"        />",
				"        <Item ",
				"          isPacked={true} ",
				"          name='Helmet with a golden leaf'",
				"        />",
				"        <Item ",
				"          isPacked={false} ",
				"          name='Photo of Tam'", 
				"        />",
				"      </ul>",
				"    </section>",
				"  );",
				"}",
						],
		"description": "Renderizando itens condicionalmente"
		},
	
		"react 2.5": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"function Item({ name, isPacked }) {",
				"  if (isPacked) {",
				"    return null;",
				"  }",
				"  return <li className='item'>{name}</li>;",
				"}",
				"",
				"export default function PackingList() {",
				"  return (",
				"    <section>",
				"      <h1>Sally Ride's Packing List</h1>",
				"      <ul>",
				"        <Item ",
				"          isPacked={true} ",
				"          name='Space suit'",
				"        />",
				"        <Item ",
				"          isPacked={true} ",
				"          name='Helmet with a golden leaf'",
				"        />",
				"        <Item ",
				"          isPacked={false} ",
				"          name='Photo of Tam'", 
				"        />",
				"      </ul>",
				"    </section>",
				"  );",
				"}",
						],
		"description": "Renderizando itens condicionalmente e retornando null para nao renderizar"
		},
	
		"react 2.6": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"function Item({ name, isPacked }) {",
				"  let itemContent = name;",
				"  if (isPacked) {",
				"    itemContent = (",
				"      <del>",
				"        {name + '✔'}",
				"      </del>",
				"    );",
				"  }",
				"  return (",
				"    <li className='item'>",
				"      {itemContent}",
				"    </li>",
				"  );",
				"}",
				"",
				"export default function PackingList() {",
				"  return (",
				"    <section>",
				"      <h1>Sally Ride's Packing List</h1>",
				"      <ul>",
				"        <Item ",
				"          isPacked={true} ",
				"          name='Space suit' ",
				"        />",
				"        <Item ",
				"          isPacked={true} ",
				"          name='Helmet with a golden leaf' ",
				"        />",
				"        <Item ",
				"          isPacked={false} ",
				"          name='Photo of Tam'", 
				"        />",
				"      </ul>",
				"    </section>",
				"  );",
				"}",
						],
		"description": "Renderizando itens condicionalmente, mas colocando JSX diretamente na variavel"
		},
	
		"react 2.7": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"function Recipe({ drinkers }) {",
				"  return (",
				"    <ol>",
				"      <li>Boil {drinkers} cups of water.</li>",
				"      <li>Add {drinkers} spoons of tea and {0.5 * drinkers} spoons of spice.</li>",
				"      <li>Add {0.5 * drinkers} cups of milk to boil and sugar to taste.</li>",
				"    </ol>",
				"  );",
				"}",
				"",
				"export default function App() {",
				"  return (",
				"    <section>",
				"      <h1>Spiced Chai Recipe</h1>",
				"      <h2>For two</h2>",
				"      <Recipe drinkers={2} />",
				"      <h2>For a gathering</h2>",
				"      <Recipe drinkers={4} />",
				"    </section>",
				"  );",
				"}",
						],
		"description": "Mantendo componente puro"
		},
	
		"react 2.8": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"js arquivo",
				"<img className='avatar' />",
				"",
				"css arquivo",
				".avatar {",
				"  border-radius: 50%;",
				"}",
						],
		"description": "Usando nome da className em arquivo css"
		},
	
		"react 2.9": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"const user = {",
				"  name: 'Hedy Lamarr',",
				"  imageUrl: 'https://i.imgur.com/yXOvdOSs.jpg',",
				"  imageSize: 90,",
				"};",
				"",
				"export default function Profile() {",
				"  return (",
				"    <>",
				"      <h1>{user.name}</h1>",
				"      <img",
				"        className='avatar'",
				"        src={user.imageUrl}",
				"        alt={'Photo of ' + user.name}",
				"        style={{",
				"          width: user.imageSize,",
				"          height: user.imageSize",
				"        }}",
				"      />",
				"    </>",
				"  );",
				"}",
						],
		"description": "Definindo style diretamente no react"
		},
	
		"react 3.1": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
				"body": [
					"const listItems = products.map(product =>",
					"  <li key={product.id}>",
					"    {product.title}",
					"  </li>",
					");",
					"",
					"return (",
					"  <ul>{listItems}</ul>",
					");",
						],
		"description": "Renderização condicional"
		},
	
		"react 3.2": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"const products = [",
				"  { title: 'Cabbage', isFruit: false, id: 1 },",
				"  { title: 'Garlic', isFruit: false, id: 2 },",
				"  { title: 'Apple', isFruit: true, id: 3 },",
				"];",
				"",
				"export default function ShoppingList() {",
				"  const listItems = products.map(product =>",
				"    <li",
				"      key={product.id}",
				"      style={{",
				"        color: product.isFruit ? 'magenta' : 'darkgreen'",
				"      }}",
				"    >",
				"      {product.title}",
				"    </li>",
				"  );",
				"",
				"  return (",
				"    <ul>{listItems}</ul>",
				"  );",
				"}",
						],
			"description": "Renderização condicional"
		},
	
		"react 3.3": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"function MyButton() {",
				"  function handleClick() {",
				"    alert('You clicked me!');",
				"  }",
				"",
				"  return (",
				"    <button onClick={handleClick}>",
				"      Click me",
				"    </button>",
				"  );",
				"}",
						],
		"description": "Responder a um evento"
		},
	
		"react 3.4": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"import { useState } from 'react';",
				"",
				"export default function MyApp() {",
				"  return (",
				"    <div>",
				"      <h1>Counters that update separately</h1>",
				"      <MyButton />",
				"      <MyButton />",
				"    </div>",
				"  );",
				"}",
				"",
				"function MyButton() {",
				"  const [count, setCount] = useState(0);",
				"",
				"  function handleClick() {",
				"    setCount(count + 1);",
				"  }",
				"",
				"  return (",
				"    <button onClick={handleClick}>",
				"      Clicked {count} times",
				"    </button>",
				"  );",
				"}",
						],
		"description": "Use status"
		},
	
		"react 3.5": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": ".codigo",
			"body": [
				"import { useState } from 'react';",
				"",
				"export default function MyApp() {",
				"  const [count, setCount] = useState(0);",
				"",
				"  function handleClick() {",
				"    setCount(count + 1);",
				"  }",
				"",
				"  return (",
				"    <div>",
				"      <h1>Counters that update together</h1>",
				"      <MyButton count={count} onClick={handleClick} />",
				"      <MyButton count={count} onClick={handleClick} />",
				"    </div>",
				"  );",
				"}",
				"",
				"function MyButton({ count, onClick }) {",
				"  return (",
				"    <button onClick={onClick}>",
				"      Clicked {count} times",
				"    </button>",
				"  );",
				"}",
				],
		"description": "Use status autualizando 2 botoes ao mesmo tempo"
		},
	
		"react 3.6": {
		"scope": "javascriptreact, javascript, typescript",
		"prefix": "_codigo",
			"body": [
				"// Arquivo App.js.",
				"import Gallery from './Gallery.js';",
				"import { Profile } from './Gallery.js';",
				"",
				"export default function App() {",
				"  return (",
				"    <Profile />",
				"  );",
				"}",
				"",
				"export function Profile() {",
				"  return (",
				"    <img",
				"      src='https://i.imgur.com/QIrZWGIs.jpg'",
				"      alt='Alan L. Hart'",
				"    />",
				"  );",
				"}",
				"",
				"export default function Gallery() {",
				"  return (",
				"    <section>",
				"      <h1>Amazing scientists</h1>",
				"      <Profile />",
				"      <Profile />",
				"      <Profile />",
				"    </section>",
				"  );",
				"}",
						],
		"description": "Exportação e nomeada no mesmo arquivo"
		},
	
				/*"zzzzz": {
			"scope": "javascriptreact, javascript, typescript",
			"prefix": ".codeReact",
			"body": [
						],
			"description": ""
		},*/

/*****************************************************************************************/
//																Express
/*****************************************************************************************/
	
		/*"                                                          ": {
			"scope": "javascript, typescript",
			"prefix": "........................",
			"body": [
				"<>",
						],
			"description": ""
		},*/
	
			/*"                                                         ": {
			"scope": "javascript, typescript",
			"prefix": "........................",
			"body": [
				"<>",
						],
			"description": ""
		},*/
	
			/*"                                                        ": {
			"scope": "javascript, typescript",
			"prefix": "........................",
			"body": [
				"<>",
						],
			"description": ""
		},*/
	
			/*"                                                       ": {
			"scope": "javascript, typescript",
			"prefix": "........................",
			"body": [
				"<>",
						],
			"description": ""
		},*/
	
		"                                                      ": {
		"scope": "javascript, typescript",
		"prefix": ".express servindo arquivos estaticos no Express",
			"body": [
					"```",
					"> https://expressjs.com/en/starter/static-files.html",
					"```",
					"```",
					"![Descrição da imagem](https://imgur.com/U721ymn.png)",
					"```",
					"```",						],
		"description": "11/23"
		},
	
		"                                                     ": {
		"scope": "javascript, typescript",
		"prefix": ".express roteamento basico",
			"body": [
					"```",
					"> https://expressjs.com/en/starter/basic-routing.html",
					"```",
					"```",
					"![Descrição da imagem](https://imgur.com/d5Ri7tV.png)",
					"```",
					"```",					],
		"description": "11/23"
		},
	
		"                                                    ": {
		"scope": "javascript, typescript",
		"prefix": ".express hello world",
			"body": [
				"```",
				"> https://expressjs.com/en/starter/hello-world.html",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/PaazbbE.png)",
				"```",
				"```",
						],
		"description": "11/23"
		},
	
		"                                                   ": {
		"scope": "javascript, typescript",
		"prefix": ".express instalacao",
			"body": [
				"```",
				"> https://expressjs.com/en/starter/installing.html",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/tR8t1Hq.png)",
				"```",
				"```",
						],
		"description": "11/23"
		},
	
		"                                        ": { // zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
		"scope": "javascript, typescript",
		"prefix": ".express atrás de proxies",
			"body": [
			/// 
					],
		"description": ""
		},
	
		"                                       ": {
		"scope": "javascript, typescript",
		"prefix": ".express manipulação de erros",
			"body": [
				"```",
				"> https://expressjs.com/en/guide/error-handling.html",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/eHtdkay.png)",
				"```",
					],
		"description": ""
		},
	
		"                                      ": {
		"scope": "javascript, typescript",
		"prefix": ".express usando o mecanismo de modelo",
			"body": [
				"```",
				"> https://expressjs.com/en/guide/using-template-engines.html",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/rK4aIUn.png)",
				"```",
					],
		"description": ""
		},
	
		"                                                                       ": {
		"scope": "javascript, typescript",
		"prefix": ".express usando o middleware",
			"body": [
				"```",
				"> https://expressjs.com/en/guide/using-middleware.html",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/Ts6EQTk.png)",
				"```",
				"```",
					],
		"description": ""
		},
	
		"                                                                        ": {
		"scope": "javascript, typescript",
		"prefix": ".express escrevendo o middleware",
			"body": [
				"```",
				"> https://expressjs.com/en/guide/writing-middleware.html",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/6A79YYm.png)",
				"```",
				"```",
					],
		"description": "11/23"
		},
	
		"                                   ": {
		"scope": "javascript, typescript",
		"prefix": ".express roteamento",
			"body": [
				"```",
				"> https://expressjs.com/en/guide/routing.html",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/hB6Vrry.png)",
				"```",
				"```",
					],
		"description": "11/23"
		},
	
		"express": {
			"scope": "javascript",
			"prefix": "_!ib",
			"body": [
				"```",
				"> express()",
				"- express.json()",
				"- express.raw()",
				"- express.Router()",
				"- express.static()",
				"- express.text()",
				"- express.urlencoded()",
	
				"> **Application**",
				"- **Properties**",
				"- app.locals",
				"- app.mountpath",
				
				"- **Events**",
				"- mount",
	
				"- **Methods**",
				"- app.all()",
				"- app.delete()",
				"- app.disable()",
				"- app.disabled()",
				"- app.enable()",
				"- app.enabled()",
				"- app.engine()",
				"- app.get()",
				"- app.get()",
				"- app.listen()",
				"- app.METHOD()",
				"- app.param()",
				"- app.path()",
				"- app.post()",
				"- app.put()",
				"- app.render()",
				"- app.route()",
				"- app.set()",
				"- app.use()",
			
				"> **Request**",
				"- **Properties**",
				"- req.app",
				"- req.baseUrl",
				"- req.body",
				"- req.cookies",
				"- req.fresh",
				"- req.hostname",
				"- req.ip",
				"- req.ips",
				"- req.method",
				"- req.originalUrl",
				"- req.params",
				"- req.path",
				"- req.protocol",
				"- req.query",
				"- req.route",
				"- req.secure",
				"- req.signedCookies",
				"- req.stale",
				"- req.subdomains",
				"- req.xhr",
				"- **Methods**",
				"- req.accepts()",
				"- req.acceptsCharsets()",
				"- req.acceptsEncodings()",
				"- req.acceptsLanguages()",
				"- req.get()",
				"- req.is()",
				"- req.param()",
				"- req.range()",
	
				"> **Response**",
				"- **Properties**",
				"- res.app",
				"- res.headersSent",
				"- res.locals",
				"- **Methods**",
				"- res.append()",
				"- res.attachment()",
				"- res.cookie()",
				"- res.clearCookie()",
				"- res.download()",
				"- res.end()",
				"- res.format()",
				"- res.get()",
				"- res.json()",
				"- res.jsonp()",
				"- res.links()",
				"- res.location()",
				"- res.redirect()",
				"- res.render()",
				"- res.send()",
				"- res.sendFile()",
				"- res.sendStatus()",
				"- res.set()",
				"- res.status()",
				"- res.type()",
				"- res.vary()",
	
				"> **Router**",
				"- **Methods**",
				"- router.all()",
				"- router.METHOD()",
				"- router.param()",
				"- router.route()",
				"- router.use()",
				"```",
						],
			"description": "last update outubro 2023"
		},
	
/*****************************************************************************************/
//																Express Codigo
/*****************************************************************************************/
	
		"express 1.1": {
			"scope": "javascript",
			"prefix": "_codigo",
			 "body": [
					"const express = require('express')",
					"const app = express()",
					"const port = 3000",
					"",
	
					"app.get('/', (req, res) => {",
					"  res.send('Hello World!')",
					"})",
					"",
					"app.listen(port, () => {",
					"  console.log('Example app listening on port $ {port}')",
					"})",
					],
			"description": "Programa mais basico express"
		},
	
		"express 1.2": {
			"scope": "javascript",
			"prefix": "_codigo",
			 "body": [
				"app.use(express.static('public'));",
				"app.use('/static', express.static('public'));",
				"app.use('/static', express.static(__dirname + '/public'));",
					],
			"description": "Servindo arquivos static"
		},
	
		"express 1.3": {
			"scope": "javascript",
			"prefix": "_codigo",
			 "body": [
				"app.get('/example/b', function (req, res, next) {",
				"  console.log('the response will be sent by the next function ...');",
				"  next();",
				"",
				"}, function (req, res) {",
				"  res.send('Hello from B!');",
				"});",
					],
			"description": "Chamando next() metodo com mais de uma função de mindlware empilhada na mesma solicitação get"
		},
	
		"express 1.4": {
			"scope": "javascript",
			"prefix": "_codigo",
			 "body": [
				"var cb0 = function (req, res, next) {",
				"  console.log('CB0');",
				"  next();",
				"}",
				"",
				"var cb1 = function (req, res, next) {",
				"  console.log('CB1');",
				"  next();",
				"}",
				"",
				"var cb2 = function (req, res) {",
				"  res.send('Hello from C!');",
				"}",
				"",
				"app.get('/example/c', [cb0, cb1, cb2]);",
					],
			"description": "Uma matriz de funções de retorno de chamada podem manipular uma rota"
		},
	
		"express 1.5": {
			"scope": "javascript",
			"prefix": "_codigo",
			 "body": [
				"var cb0 = function (req, res, next) {",
				"  console.log('CB0');",
				"  next();",
				"}",
				"",
				"var cb1 = function (req, res, next) {",
				"  console.log('CB1');",
				"  next();",
				"}",
				"",
				"app.get('/example/d', [cb0, cb1], function (req, res, next) {",
				"  console.log('the response will be sent by the next function ...');",
				"  next();",
				"",
				"}, function (req, res) {",
				"  res.send('Hello from D!');",
				"});",
					],
			"description": "Uma combinação de funções independentes e matrizes de funções podem manipular uma rota"
		},
	
		"express 1.6": {
			"scope": "javascript",
			"prefix": "_codigo",
			 "body": [
				"app.route('/book')",
				"  .get(function(req, res) {",
				"    res.send('Get a random book');",
				"  })",
				"  .post(function(req, res) {",
				"    res.send('Add a book');",
				"  })",
				"  .put(function(req, res) {",
				"    res.send('Update the book');",
				"  });",
					],
			"description": "manipuladores de rotas encadeáveis que são definidos usando app.route()"
		},
	
		"express 1.7": {
			"scope": "javascript",
			"prefix": "_codigo",
			 "body": [
				"```",
				"> **Arquivo Router**",
				"```",
				"var express = require('express');",
				"var router = express.Router();",
				"",
				"/* middleware that is specific to this router*/",
				"router.use(function timeLog(req, res, next) {",
				"  console.log('Time: ', Date.now());",
				"  next();",
				"});",
				"/* define the home page route*/",
				"router.get('/', function(req, res) {",
				"  res.send('Birds home page');",
				"});",
				"/* define the about route*/",
				"router.get('/about', function(req, res) {",
				"  res.send('About birds');",
				"});",
				"",
				"module.exports = router;",
				"",
				"```",
				"> **Arquivo Aplicativo**",
				"```",
				"var birds = require('./birds');",
				"...",
				"app.use('/birds', birds);",
					],
			"description": ""
		},
	
		"express 1.8": {
			"scope": "javascript",
			"prefix": "_codigo",
			 "body": [
				"var express = require('express');",
				"var app = express();",
				"",
				"var myLogger = function (req, res, next) {",
				"  console.log('LOGGED');",
				"  next();",
				"};",
				"",
				"app.use(myLogger);",
				"",
				"app.get('/', function (req, res) {",
				"  res.send('Hello World!');",
				"});",
				"",
				"app.listen(3000);",
					],
			"description": "Carregando uma função em app.use antes de usar get"
		},
	
		"express 1.9": {
			"scope": "javascript",
			"prefix": "_codigo",
			 "body": [
				"var express = require('express');",
				"var app = express();",
				"",
				"var requestTime = function (req, res, next) {",
				"  req.requestTime = Date.now();",
				"  next();",
				"};",
				"",
				"app.use(requestTime);",
				"",
				"app.get('/', function (req, res) {",
				"  var responseText = 'Hello World!';",
				"  responseText += 'Requested at: ' + req.requestTime + '';",
				"  res.send(responseText);",
				"});",
				"",
				"app.listen(3000);",
				],
			"description": "Alterando uma request no app.use antes de usar get"
		},
	
		"express 2.1": {
			"scope": "javascript",
			"prefix": "_codigo",
			 "body": [
				"var app = express();",
				"",
				"app.use(function (req, res, next) {",
				"  console.log('Time:', Date.now());",
				"  next();",
				"});",
					],
			"description": "Funcao de mindware diretamente no app.use sendo que a função e anonima"
		},
	
		"express 2.2": {
			"scope": "javascript",
			"prefix": "_codigo",
			 "body": [
				"app.use('/user/:id', function (req, res, next) {",
				"  console.log('Request Type:', req.method);",
				"  next();",
				"});",
					],
			"description": "App.use com um caminho especificado"
		},
	
		"express 2.3": {
			"scope": "javascript",
			"prefix": "_codigo",
			 "body": [
				"app.use('/user/:id', function(req, res, next) {",
				"console.log('Request URL:', req.originalUrl);",
				"next();",
				"}, function (req, res, next) {",
				"console.log('Request Type:', req.method);",
				"next();",
				"});",
					],
			"description": "app.use com funções empilhada de mindware"
		},
	
		/*"express                                  ": {
			"scope": "javascript",
			"prefix": "_express",
			 "body": [
				.
					],
		"description": ""
		},*/
	
/*****************************************************************************************/
//																Typescript Codigo
/*****************************************************************************************/

	"ts 1.1": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"interface MinhaInterface {",
			"    campoExistente: string;",
			"}",
			"",
			"// Adicionando um novo campo à interface existente",
			"interface MinhaInterface {",
			"    novoCampo: number;",
			"}",
			"",
			"const objeto: MinhaInterface = {",
			"    campoExistente: “valor“,",
			"    novoCampo: 42",
			"};",
						],
	"description": "adicionando novos campos a uma interface existente com interface"
	},

	"ts 1.2": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"type MeuTipo = {",
			"    campoExistente: string;",
			"};",
			"",
			"// Adicionando um novo campo ao tipo existente",
			"type MeuTipo = MeuTipo & {",
			"    novoCampo: number;",
			"};",
			"",
			"const objeto: MeuTipo = {",
			"    campoExistente: “valor“,",
			"    novoCampo: 42",
			"};",
						],
	"description": "adicionando novos campos a uma interface existente com type"
	},

	"ts 1.3": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"type FuncaoNumeroParaString = (numero: number) => string;",
			"",
			"// Exemplo de uma função que segue o tipo definido pelo alias",
			"const converterParaString: FuncaoNumeroParaString = (numero) => {",
			"    return numero.toString();",
			"};",
			"",
			"// Usando a função e o tipo de função definido pelo alias",
			"const resultado: string = converterParaString(42);",
			"console.log(resultado); // Saída: “42“",
						],
	"description": "alias de tipo para nomear um tipo de função"
	},

	"ts 1.4": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Definindo um alias de tipo para uma união de tipos",
			"type MeuTipo = string | number;",
			"",
			"// Definindo uma função que aceita o tipo definido pelo alias",
			"function minhaFuncao(parametro: MeuTipo): void {",
			"    console.log(parametro);",
			"}",
			"",
			"// Usando a função com diferentes tipos",
			"minhaFuncao(“Olá“); // Saída: Olá",
			"minhaFuncao(42);    // Saída: 42",
						],
	"description": "alias para um tipo união e depois usar o alias na função"
	},

	"ts 1.5": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Alias de tipo para um tipo primitivo",
			"type MeuNumero = number;",
			"",
			"// Alias de tipo para um objeto",
			"type MeuObjeto = {",
			"    nome: string;",
			"    idade: number;",
			"};",
			"",
			"// Alias de tipo para uma função",
			"type MeuCallback = (param: string) => void;",
			"",
			"// Exemplo de uso dos aliases de tipo",
			"const numero: MeuNumero = 10;",
			"const pessoa: MeuObjeto = { nome: “João“, idade: 30 };",
			"",
			"const minhaFuncao: MeuCallback = (mensagem) => {",
			"    console.log(“Mensagem:“, mensagem);",
			"};",
			"",
			"console.log(numero);        // Saída: 10",
			"console.log(pessoa);        // Saída: { nome: 'João', idade: 30 }",
			"minhaFuncao(“Olá mundo!“); // Saída: Mensagem: Olá mundo!",
						],
	"description": "aliases de tipo para tipos, objeto e função"
	},

	"ts 1.6": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Definindo um tipo para o objeto",
			"type Pessoa = {",
			"    nome: string;",
			"    idade: number;",
			"};",
			"",
			"// Função que recebe um objeto do tipo Pessoa como parâmetro",
			"function saudar(pessoa: Pessoa): void {",
			"    console.log(`Olá, ${pessoa.nome}! Você tem ${pessoa.idade} anos.`);",
			"}",
			"",
			"// Criando um objeto do tipo Pessoa",
			"const usuario: Pessoa = { nome: “Maria“, idade: 30 };",
			"",
			"// Chamando a função e passando o objeto como argumento",
			"saudar(usuario);",
						],
	"description": "anotação Tipos de objeto em funções"
	},

	"ts 1.7": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Função que retorna um número",
			"function dobrar(numero: number): number {",
			"    return numero * 2;",
			"}",
			"",
			"// Chamada da função",
			"const resultado: number = dobrar(5);",
			"console.log(resultado); // Saída: 10",
						],
	"description": "anotações de Tipo de Retorno"
	},

	"ts 1.8": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Anotação de tipo em uma variável",
			"let nome: string;",
			"",
			"// Atribuição de valor à variável",
			"nome = “João“;",
			"",
			"// Tentativa de atribuir um valor de tipo diferente (isso resultará em um erro)",
			"// nome = 10; // Isso causaria um erro de tipo",
			"",
			"// Usando a variável",
			"console.log(nome); // Saída: João",
						],
	"description": "anotações de tipo em variáveis"
	},

	"ts 1.9": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Declarando uma matriz de números usando colchetes",
			"let numeros: number[] = [1, 2, 3, 4, 5];",
			"",
			"// Declarando uma matriz de strings usando colchetes",
			"let nomes: string[] = [“João“, “Maria“, “Pedro“];",
			"",
			"",
			"// Declarando uma matriz de números usando o tipo de matriz",
			"let numeros: Array<number> = [1, 2, 3, 4, 5];",
			"",
			"// Declarando uma matriz de strings usando o tipo de matriz",
			"let nomes: Array<string> = [“João“, “Maria“, “Pedro“];",
						],
	"description": "as duas formas de declarar matrizes"
	},

	"ts 2.1": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Declaração de um tipo mais genérico",
			"let tipoMenosEspecifico: any = “texto“;",
			"",
			"// Usando a asserção de tipo para converter para um tipo mais específico",
			"let tipoMaisEspecifico: string = tipoMenosEspecifico as string;",
			"",
			"console.log(tipoMaisEspecifico.length); // Agora você pode acessar propriedades específicas do tipo string",
						],
	"description": "asserções de tipo com as do menos especifico para o mais especifico"
	},

	"ts 2.2": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Declaração de um tipo menos específico",
			"let tipoMenosEspecifico: any = “texto“;",
			"",
			"// Usando asserção de tipo com 'as' para converter para um tipo mais específico",
			"let tipoMaisEspecifico: string = tipoMenosEspecifico as string;",
			"",
			"console.log(tipoMaisEspecifico.length); // Agora você pode acessar propriedades específicas do tipo string",
						],
	"description": "asserções de tipo com as"
	},

	"ts 2.3": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Declaração de um tipo menos específico",
			"let tipoMenosEspecifico: any = “texto“;",
			"",
			"// Usando asserção de tipo com '<tipo>' para converter para um tipo mais específico",
			"let tipoMaisEspecifico: string = <string>tipoMenosEspecifico;",
			"",
			"console.log(tipoMaisEspecifico.length); // Agora você pode acessar propriedades específicas do tipo string",
						],
	"description": "asserções de tipo com <>"
	},

	"ts 2.4": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Definindo um tipo para uma função construtora",
			"type ConstrutorPessoa = new (nome: string, idade: number) => Pessoa;",
			"",
			"// Definindo a função construtora",
			"function Pessoa(nome: string, idade: number) {",
			"    this.nome = nome;",
			"    this.idade = idade;",
			"}",
			"",
			"// Criando uma instância usando a função construtora",
			"let criarPessoa: ConstrutorPessoa = Pessoa;",
			"let pessoa1 = new criarPessoa(“João“, 30);",
						],
	"description": "assinatura de construção"
	},
	
	"ts 2.5": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Definindo um type para construção e método normal",
			"type ConstrutorEMetodo = {",
			"    new (nome: string, idade: number): Pessoa;",
			"    metodoNormal: (a: number, b: number) => number;",
			"}",
			"",
			"// Exemplo de uso",
			"class Pessoa {",
			"    constructor(public nome: string, public idade: number) {}",
			"",
			"    static somar(a: number, b: number): number {",
			"        return a + b;",
			"    }",
			"}",
			"",
			"// Usando o type ConstrutorEMetodo",
			"let obj: ConstrutorEMetodo = Pessoa;",
			"console.log(new obj(“João“, 30)); // Construtor",
			"console.log(obj.somar(5, 3)); // Método normal",
						],
	"description": "assinatura de construção e de metodo"
	},

	"ts 2.6": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"class MinhaClasse {",
			"    itens: { [indice: number]: any } = {};",
			"",
			"    adicionarItem(indice: number, valor: any) {",
			"        this.itens[indice] = valor;",
			"    }",
			"}",
			"",
			"const minhaInstancia = new MinhaClasse();",
			"minhaInstancia.adicionarItem(0, 'valor1');",
			"minhaInstancia.adicionarItem(1, 'valor2');",
						],
	"description": "assinatura de indice em classes"
	},

	"ts 2.7": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"interface MeuObjeto {",
			"    [indice: number]: string;",
			"}",
			"",
			"const meuObjeto: MeuObjeto = {",
			"    0: 'primeiro',",
			"    1: 'segundo',",
			"    2: 'terceiro'",
			"};",
			"",
			"console.log(meuObjeto[1]); // Saída: segundo",
						],
	"description": "tipo de objeto com uma assinatura de índice"
	},

	"ts 2.8": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"class MinhaClasse {",
			"    // Campo readonly público",
			"    public readonly nome: string;",
			"",
			"    // Campo readonly privado",
			"    private readonly idade: number;",
			"",
			"    // Construtor",
			"    constructor(nome: string, idade: number) {",
			"        this.nome = nome;",
			"        this.idade = idade;",
			"    }",
			"",
			"    // Método para acessar o campo privado",
			"    getIdade(): number {",
			"        return this.idade;",
			"    }",
			"}",
			"",
			"const objeto = new MinhaClasse('João', 30);",
			"",
			"console.log(objeto.nome); // Saída: João",
			"console.log(objeto.getIdade()); // Saída: 30",
						],
	"description": "Campo reandoly em classe"
	},

	"ts 2.9": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Membro readonly sem tipo genérico explícito",
			"const readonlyName: Readonly = “João“;",
			"console.log(readonlyName); // Saída: João",
			"",
			"// Tentativa de atribuir um novo valor ao membro de apenas leitura",
			"// Isso resultará em um erro de compilação",
			"readonlyName = “Maria“; // Erro: Não é possível atribuir a 'readonlyName' porque é uma constante ou apenas leitura.",
						],
	"description": "Variavel readonly"
	},

	"ts 3.1": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"class MinhaClasse {",
			"    private minhaPropriedade: string;",
			"",
			"    constructor(valor: string) {",
			"        this.minhaPropriedade = valor;",
			"    }",
			"",
			"    // Método para obter o valor da propriedade privada",
			"    getPropriedade(): string {",
			"        return this.minhaPropriedade;",
			"    }",
			"",
			"    // Método para definir o valor da propriedade privada",
			"    setPropriedade(novoValor: string): void {",
			"        this.minhaPropriedade = novoValor;",
			"    }",
			"}",
			"",
			"// Criando uma instância da classe",
			"const obj = new MinhaClasse(“Olá“);",
			"",
			"// Acessando e alterando o valor da propriedade privada usando os métodos públicos",
			"console.log(obj.getPropriedade()); // Saída: Olá",
			"obj.setPropriedade(“Mundo“);",
			"console.log(obj.getPropriedade()); // Saída: Mundo",
						],
	"description": "classe com membro private"
	},

	"ts 3.2": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"class MinhaClasse {",
			"    protected minhaPropriedade: string;",
			"",
			"    constructor(valor: string) {",
			"        this.minhaPropriedade = valor;",
			"    }",
			"",
			"    // Método para obter o valor da propriedade protegida",
			"    getPropriedade(): string {",
			"        return this.minhaPropriedade;",
			"    }",
			"",
			"    // Método para definir o valor da propriedade protegida",
			"    setPropriedade(novoValor: string): void {",
			"        this.minhaPropriedade = novoValor;",
			"    }",
			"}",
			"",
			"// Classe derivada",
			"class MinhaClasseDerivada extends MinhaClasse {",
			"    constructor(valor: string) {",
			"        super(valor);",
			"    }",
			"",
			"    // Método para acessar a propriedade protegida da classe base",
			"    mostrarPropriedade(): void {",
			"        console.log(this.minhaPropriedade);",
			"    }",
			"}",
			"",
			"// Criando uma instância da classe derivada",
			"const obj = new MinhaClasseDerivada(“Olá“);",
			"",
			"// Acessando e alterando o valor da propriedade protegida usando os métodos públicos",
			"console.log(obj.getPropriedade()); // Saída: Olá",
			"obj.setPropriedade(“Mundo“);",
			"console.log(obj.getPropriedade()); // Saída: Mundo",
			"",
			"// Acessando a propriedade protegida diretamente através da classe derivada",
			"obj.mostrarPropriedade(); // Saída: Mundo",
						],
	"description": "classe com membro protected"
	},

	"ts 3.3": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"class MinhaClasse {",
			"    public minhaPropriedade: string;",
			"",
			"    constructor(valor: string) {",
			"        this.minhaPropriedade = valor;",
			"    }",
			"",
			"    // Métodos para acessar e alterar o valor da propriedade",
			"    getPropriedade(): string {",
			"        return this.minhaPropriedade;",
			"    }",
			"",
			"    setPropriedade(novoValor: string): void {",
			"        this.minhaPropried",
						],
	"description": "classe com membro public"
	},

	"ts 3.4": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"abstract class MinhaClasse {",
			"    // Membro abstrato",
			"    abstract minhaPropriedade: string;",
			"",
			"    // Método abstrato",
			"    abstract meuMetodo(): void;",
			"}",
			"",
			"class MinhaClasseConcreta extends MinhaClasse {",
			"    minhaPropriedade: string;",
			"",
			"    constructor(valor: string) {",
			"        super();",
			"        this.minhaPropriedade = valor;",
			"    }",
			"",
			"    meuMetodo(): void {",
			"        console.log(“Implementação do método abstrato“);",
			"    }",
			"}",
			"",
			"// Criando uma instância da classe concreta",
			"const obj = new MinhaClasseConcreta(“Olá“);",
			"",
			"// Chamando o método da instância",
			"obj.meuMetodo(); // Saída: Implementação do método abstrato",
						],
	"description": "classe e membros abstract"
	},

	"ts 3.5": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"interface Construivel {",
			"    new (valor: string): MinhaClasse;",
			"}",
			"",
			"class MinhaClasse {",
			"    constructor(public valor: string) {}",
			"}",
			"",
			"class MinhaClasseConstruivel implements Construivel {",
			"    constructor(public valor: string) {}",
			"",
			"    // Implementação da assinatura de construção",
			"    construtor(valor: string): MinhaClasse {",
			"        return new MinhaClasse(valor);",
			"    }",
			"}",
			"",
			"// Usando a classe com a assinatura de construção",
			"const obj = new MinhaClasseConstruivel(“Olá“).construtor(“Mundo“);",
			"console.log(obj.valor); // Saída: Mundo",
						],
	"description": "classe função com uma assinatura de construção, no caso, implements em uma interface com uma"
	},

	"ts 3.6": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"class Exemplo {",
			"    private static contadorPrivado: number = 0;",
			"    public static contadorPublico: number = 0;",
			"",
			"    private constructor() {}",
			"",
			"    private static incrementarContadorPrivado() {",
			"        Exemplo.contadorPrivado++;",
			"    }",
			"",
			"    public static incrementarContadorPublico() {",
			"        Exemplo.contadorPublico++;",
			"    }",
			"",
			"    public static obterContadorPrivado() {",
			"        return Exemplo.contadorPrivado;",
			"    }",
			"",
			"    public static obterContadorPublico() {",
			"        return Exemplo.contadorPublico;",
			"    }",
			"}",
			"",
			"// Uso dos membros estáticos",
			"Exemplo.incrementarContadorPrivado(); // Erro: o membro privado não é acessível fora da classe",
			"Exemplo.incrementarContadorPublico();",
			"console.log(Exemplo.obterContadorPrivado()); // Erro: o membro privado não é",
									],
	"description": "classe membros static com modificadores de acesso"
	},

	"ts 3.7": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"class Lista<T> {",
			"    private elementos: T[] = [];",
			"",
			"    adicionar(elemento: T): void {",
			"        this.elementos.push(elemento);",
			"    }",
			"",
			"    obterTodos(): T[] {",
			"        return this.elementos;",
			"    }",
			"}",
			"",
			"// Usando a classe genérica",
			"const listaDeNumeros = new Lista<number>();",
			"listaDeNumeros.adicionar(1);",
			"listaDeNumeros.adicionar(2);",
			"listaDeNumeros.adicionar(3);",
			"console.log(listaDeNumeros.obterTodos()); // Saída: [1, 2, 3]",
			"",
			"const listaDeStrings = new Lista<string>();",
			"listaDeStrings.adicionar(“Olá“);",
			"listaDeStrings.adicionar(“Mundo“);",
			"console.log(listaDeStrings.obterTodos()); // Saída: [“Olá“, “Mundo“]",
						],
	"description": "classes genericas sem construtor"
	},

	"ts 3.8": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"class Caixa<T> {",
			"    private conteudo: T;",
			"",
			"    constructor(conteudo: T) {",
			"        this.conteudo = conteudo;",
			"    }",
			"",
			"    obterConteudo(): T {",
			"        return this.conteudo;",
			"    }",
			"}",
			"",
			"// Usando a classe genérica com construtor",
			"const caixaDeNumero = new Caixa<number>(10);",
			"console.log(caixaDeNumero.obterConteudo()); // Saída: 10",
			"",
			"const caixaDeString = new Caixa<string>(“Olá, mundo!“);",
			"console.log(caixaDeString.obterConteudo()); // Saída: Olá, mundo!",
						],
	"description": "classes genericas com construtor"
	},

	"ts 3.9": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Definindo um tipo que combina uma função e uma propriedade associada",
			"type FuncaoComPropriedade = {",
			"    propriedade: string;",
			"    funcao: (parametro: number) => void;",
			"};",
			"",
			"// Função que aceita um parâmetro do tipo FuncaoComPropriedade",
			"function usarFuncaoComPropriedade(objeto: FuncaoComPropriedade): void {",
			"    console.log(objeto.propriedade); // Acessando a propriedade associada",
			"    objeto.funcao(42); // Chamando a função",
			"}",
			"",
			"// Exemplo de uso",
			"const exemplo: FuncaoComPropriedade = {",
			"    propriedade: “Exemplo“,",
			"    funcao: (valor) => {",
			"        console.log(`A função foi chamada com o valor ${valor}`);",
			"    }",
			"};",
			"",
			"// Chamando a função com o objeto que possui a função e a propriedade associada",
			"usarFuncaoComPropriedade(exemplo);",
						],
	"description": "combinação de uma função com uma propriedade associada em um tipo, que pode ser usado como parâmetro em uma função normal"
	},

	"ts 4.1": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"tsc seu-arquivo.ts"
						],
	"description": ""
	},

	"ts 4.2": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"class Pessoa {",
			"    constructor(public nome: string, public idade: number) {",
			"        // Nenhuma lógica adicional necessária",
			"    }",
			"}",
			"",
			"// Exemplo de uso",
			"const pessoa1 = new Pessoa('João', 30);",
			"console.log(pessoa1.nome); // Saída: João",
			"console.log(pessoa1.idade); // Saída: 30",
						],
	"description": "construtor com campos publicos diretamente inserido"
	},

	"ts 4.3": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"class Pessoa {",
			"    // Campos",
			"    nome: string;",
			"    idade: number;",
			"",
			"    // Construtor",
			"    constructor(nome: string, idade: number) {",
			"        this.nome = nome;",
			"        this.idade = idade;",
			"    }",
			"",
			"    // Método",
			"    exibirInformacoes(): void {",
			"        console.log(`Nome: ${this.nome}, Idade: ${this.idade}`);",
			"    }",
			"}",
			"",
			"// Exemplo de uso",
			"const pessoa1 = new Pessoa('João', 30);",
			"pessoa1.exibirInformacoes(); // Saída: Nome: João, Idade: 30",
						],
	"description": "declarar uma classe com campos, construtor e metodos"
	},

	"ts 4.4": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Interface com a função que pode ser chamada de duas maneiras diferentes",
			"interface FuncaoEConstrutor {",
			"    (x: number): void; // Assinatura da função normal",
			"    new (x: number): FuncaoEConstrutor; // Assinatura do construtor",
			"}",
			"",
			"// Implementação da classe que usa a interface",
			"class MinhaClasse implements FuncaoEConstrutor {",
			"    constructor(public x: number) {} // Implementação do construtor",
			"",
			"    // Implementação da função normal",
			"    callMe(x: number): void {",
			"        console.log(`Chamada da função normal com ${x}`);",
			"    }",
			"}",
			"",
			"// Exemplo de uso",
			"const instancia = new MinhaClasse(10);",
			"instancia.callMe(20); // Saída: Chamada da função normal com 20",
						],
	"description": "declarar uma função que pode ser chamada com ou sem new, no caso, uma função normal e outra construtora em uma interface. Implementado por uma classe"
	},

	"ts 4.5": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Objeto literal com uma função que pode ser chamada com ou sem new",
			"const meuObjeto: {",
			"    funcao: {",
			"        (x: number): void; // Assinatura da função normal",
			"        new (x: number): { x: number }; // Assinatura do construtor",
			"    };",
			"} = {",
			"    // Implementação da função normal",
			"    funcao(x: number): void {",
			"        console.log(`Chamada da função normal com ${x}`);",
			"    },",
			"",
			"    // Implementação do construtor",
			"    funcao: class {",
			"        constructor(public x: number) {}",
			"    }",
			"};",
			"",
			"// Exemplo de uso",
			"const instancia1 = new meuObjeto.funcao(10);",
			"console.log(instancia1.x); // Saída: 10",
			"",
			"meuObjeto.funcao(20); // Saída: Chamada da função normal com 20",
						],
	"description": "declarar uma função que pode ser chamada com ou sem new, no caso, uma função normal e outra construtora em uma interface. Implementado por um objeto literal"
	},

	"ts 4.6": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Definindo o tipo de união para os parâmetros da função",
			"type Parametro = string | number;",
			"",
			"// Definindo a função com o tipo de união nos parâmetros",
			"function minhaFuncao(param1: Parametro, param2: Parametro): void {",
			"    // Exemplo simples de uso",
			"    console.log(`Param1: ${param1}, Param2: ${param2}`);",
			"}",
			"",
			"// Exemplos de chamadas da função",
			"minhaFuncao(“Olá“, 42); // Saída: Param1: Olá, Param2: 42",
			"minhaFuncao(100, “Mundo“); // Saída: Param1: 100, Param2: Mundo",
			"minhaFuncao(true, null); // Erro de compilação, pois os tipos não são compatíveis com o tipo de união",
						],
	"description": "definindo um tipo de união em uma função"
	},

	"ts 4.7": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Definindo uma tupla",
			"const minhaTupla: [number, string, boolean] = [42, “Olá“, true];",
			"",
			"// Desestruturando a tupla e atribuindo os valores a variáveis constantes",
			"const [numero, texto, booleano] = minhaTupla;",
			"",
			"// Exibindo os valores das variáveis",
			"console.log(`Número: ${numero}, Texto: ${texto}, Booleano: ${booleano}`);.",
						],
	"description": "desestruturar tuplas, const com tipo tupla"
	},

	"ts 4.8": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Função com parâmetro de tupla",
			"function processarTupla([a, b]: [number, string]) {",
			"    console.log(`Número: ${a}, Texto: ${b}`);",
			"}",
			"",
			"// Chamando a função com uma tupla como argumento",
			"const minhaTupla: [number, string] = [42, “Olá“];",
			"processarTupla(minhaTupla);",
						],
	"description": "desestruturar tupla como parametro de uma função"
	},

	"ts 4.9": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Definição da função com desestruturação de parâmetros",
			"function exibirDadosUsuario({ nome, idade }: { nome: string; idade: number }) {",
			"    console.log(`Nome: ${nome}, Idade: ${idade}`);",
			"}",
			"",
			"// Chamando a função com um objeto contendo os dados do usuário",
			"const usuario = { nome: “João“, idade: 30 };",
			"exibirDadosUsuario(usuario);",
						],
	"description": "função com desestruturação de parâmetros"
	},

	"ts 5.1": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Definição de enum",
			"enum DiasDaSemana {",
			"    Domingo,",
			"    Segunda,",
			"    Terca,",
			"    Quarta,",
			"    Quinta,",
			"    Sexta,",
			"    Sabado",
			"}",
			"",
			"// Uso da enum",
			"let dia: DiasDaSemana = DiasDaSemana.Quarta;",
			"console.log(“Dia:“, dia); // Saída: Dia: 3 (Índice da enum para Quarta)",
			"",
			"// Atribuição direta de valores numéricos para enum",
			"enum Numeros {",
			"    Um = 1,",
			"    Dois = 2,",
			"    Tres = 3,",
			"    Quatro = 4",
			"}",
			"",
			"let numero: Numeros = Numeros.Tres;",
			"console.log(“Número:“, numero); // Saída: Número: 3",
						],
	"description": "Enums"
	},

	"ts 5.2": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Função genérica",
			"function imprimir<T>(arg: T): void {",
			"    console.log(arg);",
			"}",
			"",
			"// Chamando a função com tipo string",
			"imprimir<string>(“Olá, mundo!“); // Saída: Olá, mundo!",
			"",
			"// Chamando a função com tipo number",
			"imprimir<number>(42); // Saída: 42",
						],
	"description": "especificar o argumento passado para a função génerica"
	},

	"ts 5.3": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Definição da interface",
			"interface Animal {",
			"    nome: string;",
			"    som(): void;",
			"}",
			"",
			"// Classe base",
			"class Mamifero {",
			"    constructor(public nome: string) {}",
			"}",
			"",
			"// Classe derivada que estende a classe Mamifero e implementa a interface Animal",
			"class Cachorro extends Mamifero implements Animal {",
			"    constructor(nome: string) {",
			"        super(nome);",
			"    }",
			"",
			"    som(): void {",
			"        console.log(“Au au!“);",
			"    }",
			"}",
			"",
			"// Instância da classe Cachorro",
			"const cachorro = new Cachorro(“Fido“);",
			"console.log(cachorro.nome); // Saída: Fido",
			"cachorro.som(); // Saída: Au au!",
						],
	"description": "estendendo e tambem implementando uma interface"
	},

	"ts 5.4": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Definição dos tipos",
			"interface Carro {",
			"    marca: string;",
			"    modelo: string;",
			"}",
			"",
			"interface Veiculo {",
			"    rodas: number;",
			"    motor: string;",
			"}",
			"",
			"// Definição de um novo tipo combinando as propriedades de Carro e Veiculo",
			"type CarroComRodas = Carro & Veiculo;",
			"",
			"// Exemplo de uso",
			"const meuCarro: CarroComRodas = {",
			"    marca: “Toyota“,",
			"    modelo: “Corolla“,",
			"    rodas: 4,",
			"    motor: “1.8L“",
			"};",
			"",
			"console.log(meuCarro); // Saída: { marca: 'Toyota', modelo: 'Corolla', rodas: 4, motor: '1.8L' }",
						],
	"description": "estendendo um tipo por meio de interseções"
	},

	"ts 5.5": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Definindo uma união de tipos",
			"type NumeroOuString = number | string;",
			"",
			"// Função que verifica o tipo da variável",
			"function verificarTipo(valor: NumeroOuString) {",
			"    if (typeof valor === “number“) {",
			"        // Aqui, TypeScript estreita o tipo de valor para number",
			"        console.log(“É um número:“, valor.toFixed(2));",
			"    } else {",
			"        // Aqui, TypeScript estreita o tipo de valor para string",
			"        console.log(“É uma string:“, valor.toUpperCase());",
			"    }",
			"}",
			"",
			"// Exemplo de uso",
			"verificarTipo(42);    // Sa",
						],
	"description": "estreitamento em tipos de união"
	},

	"ts 5.6": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"function exibirMensagem(this: { nome: string }) {",
			"    console.log(“Olá,“, this.nome);",
			"}",
			"",
			"// Chamando a função com o contexto especificado",
			"exibirMensagem.call({ nome: “João“ }); // Saída: Olá, João",
						],
	"description": "declare o tipo this no corpo da função"
	},

	"ts 5.7": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Definição da classe base",
			"class Animal {",
			"    nome: string;",
			"",
			"    constructor(nome: string) {",
			"        this.nome = nome;",
			"    }",
			"",
			"    mover(distancia: number = 0) {",
			"        console.log(`${this.nome} moveu ${distancia} metros.`);",
			"    }",
			"}",
			"",
			"// Classe derivada que estende a classe base Animal",
			"class Cachorro extends Animal {",
			"    latir() {",
			"        console.log(“Au Au!“);",
			"    }",
			"}",
			"",
			"// Criando uma instância da classe derivada Cachorro",
			"const meuCachorro = new Cachorro(“Fido“);",
			"",
			"// Chamando métodos da classe base",
			"meuCachorro.mover(10); // Saída: Fido moveu 10 metros.",
			"",
			"// Chamando métodos da classe derivada",
			"meuCachorro.latir(); // Saída: Au Au!",
						],
	"description": "extends em classe"
	},

	"ts 5.8": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Função com parâmetro padrão",
			"function saudacao(nome: string = “mundo“) {",
			"    console.log(`Olá, ${nome}!`);",
			"}",
			"",
			"// Chamando a função sem argumentos",
			"saudacao(); // Saída: Olá, mundo!",
			"",
			"// Chamando a função com um argumento",
			"saudacao(“amigo“); // Saída: Olá, amigo!",
						],
	"description": ""
	},

	"ts 5.9": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Função genérica que recebe e retorna o mesmo tipo de argumento",
			"function identidade<T>(arg: T): T {",
			"    return arg;",
			"}",
			"",
			"// Chamadas da função identidade com tipos diferentes",
			"let numero = identidade<number>(10); // Passando um número",
			"let texto = identidade<string>(“Olá“); // Passando uma string",
			"",
			"console.log(numero); // Saída: 10",
			"console.log(texto); // Saída: Olá",
						],
	"description": "função Genérica"
	},

	"ts 6.1": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Função genérica com vários parâmetros",
			"function mesclarObjetos<T, U>(obj1: T, obj2: U): T & U {",
			"    return { ...obj1, ...obj2 };",
			"}",
			"",
			"// Chamada da função mesclarObjetos com diferentes tipos de objetos",
			"let objeto1 = { nome: “João“ };",
			"let objeto2 = { idade: 30 };",
			"",
			"let objetoMesclado = mesclarObjetos(objeto1, objeto2);",
			"",
			"console.log(objetoMesclado); // Saída: { nome: “João“, idade: 30 }",
						],
	"description": "funções Genéricas com varios parameotros"
	},

	"ts 6.2": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"class Pessoa {",
			"    private _nome: string;",
			"    private _idade: number;",
			"",
			"    constructor(nome: string, idade: number) {",
			"        this._nome = nome;",
			"        this._idade = idade;",
			"    }",
			"",
			"    // Getter para o nome",
			"    get nome(): string {",
			"        return this._nome;",
			"    }",
			"",
			"    // Setter para o nome",
			"    set nome(novoNome: string) {",
			"        this._nome = novoNome;",
			"    }",
			"",
			"    // Getter para a idade",
			"    get idade(): number {",
			"        return this._idade;",
			"    }",
			"",
			"    // Setter para a idade",
			"    set idade(novaIdade: number) {",
			"        this._idade = novaIdade;",
			"    }",
			"}",
			"",
			"// Exemplo de uso",
			"let pessoa = new Pessoa(“João“, 30);",
			"console.log(pessoa.nome); // Saída: João",
			"console.log(pessoa.idade); // Saída: 30",
			"",
			"pessoa.nome = “Maria“;",
			"pessoa.idade = 25;",
			"",
			"console.log(pessoa.nome); // Saída: Maria",
			"console.log(pessoa.idade); // Saída: 25",
						],
	"description": "get/set em classes"
	},

	"ts 6.3": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"interface Animal {",
			"    tipo: string;",
			"    som(): void;",
			"}",
			"",
			"class Cachorro implements Animal {",
			"    tipo: string;",
			"",
			"    constructor(tipo: string) {",
			"        this.tipo = tipo;",
			"    }",
			"",
			"    som(): void {",
			"        console.log(“Au au!“);",
			"    }",
			"}",
			"",
			"// Exemplo de uso",
			"let cachorro = new Cachorro(“Cachorro“);",
			"console.log(cachorro.tipo); // Saída: Cachorro",
			"cachorro.som(); // Saída: Au au!",
						],
	"description": "implements em classes"
	},

	"ts 6.4": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Função genérica",
			"function mostrarTipo<T>(arg: T): void {",
			"    console.log(typeof arg);",
			"}",
			"",
			"// Chamando a função com tipo explícito",
			"mostrarTipo<string>(“Olá“); // Saída: string",
			"mostrarTipo<number>(42);    // Saída: number",
			"mostrarTipo<boolean>(true); // Saída: boolean",
						],
	"description": "inferencia explicita ao chamar uma função génerica"
	},

	"ts 6.5": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Definição de uma interface",
			"interface Pessoa {",
			"    nome: string;",
			"    idade: number;",
			"    saudacao(): void;",
			"}",
			"",
			"// Implementação da interface em uma classe",
			"class Aluno implements Pessoa {",
			"    nome: string;",
			"    idade: number;",
			"",
			"    constructor(nome: string, idade: number) {",
			"        this.nome = nome;",
			"        this.idade = idade;",
			"    }",
			"",
			"    saudacao() {",
			"        console.log(`Olá, meu nome é ${this.nome} e tenho ${this.idade} anos.`);",
			"    }",
			"}",
			"",
			"// Criando uma instância da classe Aluno",
			"const aluno = new Aluno(“João“, 20);",
			"aluno.saudacao(); // Saída: Olá, meu nome é João e tenho 20 anos.",
						],
	"description": "interface"
	},

	"ts 6.6": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Definição de uma interface com um tipo genérico",
			"interface Caixa<Tipo> {",
			"    valor: Tipo;",
			"}",
			"",
			"// Exemplo de uso da interface com um tipo genérico",
			"const caixaNumero: Caixa<number> = { valor: 10 };",
			"const caixaString: Caixa<string> = { valor: “Olá“ };",
			"",
			"console.log(caixaNumero.valor); // Saída: 10",
			"console.log(caixaString.valor); // Saída: Olá",
						],
	"description": "interface com um tipo generico"
	},

	"ts 6.7": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"// Definição de uma interface com membros normais e uma assinatura de índice",
			"interface Pessoa {",
			"    nome: string;",
			"    idade: number;",
			"    [propriedadeExtra: string]: any; // Assinatura de índice para propriedades adicionais",
			"}",
			"",
			"// Exemplo de uso da interface Pessoa",
			"const pessoa: Pessoa = {",
			"    nome: “João“,",
			"    idade: 30,",
			"    email: “joao@example.com“, // Propriedade adicional definida usando a assinatura de índice",
			"    telefone: “123456789“",
			"};",
			"",
			"console.log(pessoa.nome); // Saída: João",
			"console.log(pessoa.idade); // Saída: 30",
			"console.log(pessoa.email); // Saída: joao@example.com",
			"console.log(pessoa.telefone); // Saída: 123456789",
						],
	"description": "membros normais e uma assinatura de indice para caso eu precise mais propriedades extra"
	},

	"ts 6.8": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"class Exemplo {",
			"    // Membros estáticos",
			"    static valorEstatico: number = 10;",
			"    static metodoEstatico(): void {",
			"        console.log(“Método estático“);",
			"    }",
			"",
			"    // Membros públicos",
			"    public nome: string;",
			"    public idade: number;",
			"",
			"    constructor(nome: string, idade: number) {",
			"        this.nome = nome;",
			"        this.idade = idade;",
			"    }",
			"",
			"    // Métodos públicos",
			"    public saudacao(): void {",
			"        console.log(`Olá, meu nome é ${this.nome} e tenho ${this.idade} anos.`);",
			"    }",
			"",
			"    // Método privado",
			"    private metodoPrivado(): void {",
			"        console.log(“Método privado“);",
			"    }",
			"",
			"    // Método protegido",
			"    protected metodoProtegido(): void {",
			"        console.log(“Método protegido“);",
			"    }",
			"}",
			"",
			"// Uso da classe Exemplo",
			"const instancia = new Exemplo(“Alice“, 25);",
			"console.log(instancia.nome); // Saída: Alice",
			"console.log(instancia.idade); // Saída: 25",
			"instancia.saudacao(); // Saída: Olá, meu nome é Alice e tenho 25 anos.",
			"Exemplo.metodoEstatico(); // Saída: Método estático",
						],
	"description": "metodos em classes com tipagem em todos os tipos diferentes de membros possiveis"
	},

	"ts 6.9": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"let exemplo: string | null = “Olá Mundo“;",
			"// Vamos assegurar ao TypeScript que 'exemplo' não é nulo",
			"const comprimento: number = exemplo!.length;",
			"console.log(comprimento); // Saída: 9",
						],
	"description": "operador de Asserção Não Nulo (Postfix !)"
	},

	"ts 7.1": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"class Exemplo {",
			"    constructor();",
			"    constructor(nome: string);",
			"    constructor(nome?: string) {",
			"        if (nome) {",
			"            console.log(`Olá, ${nome}!`);",
			"        } else {",
			"            console.log(“Olá, mundo!“);",
			"        }",
			"    }",
			"}",
			"",
			"// Usando a sobrecarga do construtor",
			"const exemplo1 = new Exemplo(); // Saída: Olá, mundo!",
			"const exemplo2 = new Exemplo(“João“); // Saída: Olá, João!",
						],
	"description": "overloads em construtores de classe"
	},

	"ts 7.2": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"function saudacao(nome?: string) {",
			"    if (nome) {",
			"        console.log(`Olá, ${nome}!`);",
			"    } else {",
			"        console.log(“Olá, mundo!“);",
			"    }",
			"}",
			"",
			"saudacao(); // Saída: Olá, mundo!",
			"saudacao(“João“); // Saída: Olá, João!",
			"",
			"",
			"function saudacao(nome: string = “mundo“) {",
			" console.log(`Olá, ${nome}!`);",
			"}",
			"",
			"saudacao(); // Saída: Olá, mundo!",
			"saudacao(“João“); // Saída: Olá, João!",
					],
	"description": "parametro de funções opcionais com ? e valor padrão"
	},

	"ts 7.3": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"function somar(...numeros: number[]): number {",
			"    return numeros.reduce((total, numero) => total + numero, 0);",
			"}",
			"",
			"console.log(somar(1, 2, 3)); // Saída: 6",
			"console.log(somar(1, 2, 3, 4, 5)); // Saída: 15",
						],
	"description": "parametro rest em função"
		},

	"ts 7.4": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
			"type Callback = (resultado: string, erro?: Error) => void;",
			"",
			"function executarOperacao(callback: Callback) {",
			"    // Simulando uma operação",
			"    const sucesso = Math.random() < 0.5;",
			"    if (sucesso) {",
			"        callback(“Operação bem-sucedida“);",
			"    } else {",
			"        callback(““, new Error(“Erro durante a operação“));",
			"    }",
			"}",
			"",
			"// Exemplo de uso",
			"executarOperacao((resultado, erro) => {",
			"    if (erro) {",
			"        console.error(“Erro:“, erro.message);",
			"    } else {",
			"        console.log(“Resultado:“, resultado);",
			"    }",
			"});",
						],
	"description": "parâmetros opcionais em retornos de chamada/calback"
		},

	"texteeeeeeeeeeeeeeeeeeeeeeeee": {
	"scope": "typescript, csharp, javascript",
	"prefix": "_testeeeeeeee",
		"body": [
			"// A skeleton of a C# program\r\nusing System;\r\n\r\n// Your program starts here:\r\nConsole.WriteLine(\"Hello world!\");\r\n\r\nnamespace YourNamespace\r\n{\r\n    class YourClass\r\n    {\r\n    }\r\n\r\n    struct YourStruct\r\n    {\r\n    }\r\n\r\n    interface IYourInterface\r\n    {\r\n    }\r\n\r\n    delegate int YourDelegate();\r\n\r\n    enum YourEnum\r\n    {\r\n    }\r\n\r\n    namespace YourNestedNamespace\r\n    {\r\n        struct YourStruct\r\n        {\r\n        }\r\n    }\r\n}"
						],
	"description": ""
		},

	/*"ts": {
	"scope": "typescript",
	"prefix": "_codigo",
		"body": [
	.

	.
							],
		"description": ""
			},*/

		/*"ts": {
		"scope": "typescript",
		"prefix": "_codigo",
			"body": [
	.

	.
							],
		"description": ""
			},*/
/*****************************************************************************************/
//																SQL
/*****************************************************************************************/
	

	
			"sql": {
			"scope": "markdown, plaintext",
			"prefix": "_library",
			"body": [
				"> **Palavras-chave SQL**\n",
				"- **ADD** Adiciona uma coluna em uma tabela existente",
				"- **ADD CONSTRAINT** Adiciona uma restrição depois que uma tabela já foi criada",
				"- **ALL** Retorna verdadeiro se todos os valores da subconsulta atenderem à condição",
				"- **ALTER** Adiciona, exclui ou modifica colunas em uma tabela ou altera o tipo de dados de uma coluna em uma tabela",
				"- **ALTER COLUMN** Altera o tipo de dados de uma coluna em uma tabela",
				"- **ALTER TABLE** Adiciona, exclui ou modifica colunas em uma tabela",
				"- **AND** Inclui apenas linhas onde ambas as condições são verdadeiras",
				"- **ANY** Retorna verdadeiro se algum dos valores da subconsulta atender à condição",
				"- **AS** Renomeia uma coluna ou tabela com um alias",
				"- **ASC** Classifica o conjunto de resultados em ordem crescente",
				"- **BACKUP DATABASE** Cria um backup de um banco de dados existente",
				"- **BETWEEN** Seleciona valores dentro de um determinado intervalo",
				"- **CASE** Cria diferentes resultados com base nas condições",
				"- **CHECK** Uma restrição que limita o valor que pode ser colocado em uma coluna",
				"- **COLUMN** Altera o tipo de dados de uma coluna ou exclui uma coluna de uma tabela",
				"- **CONSTRAINT** Adiciona ou exclui uma restrição",
				"- **CREATE** Cria um banco de dados, índice, visualização, tabela ou procedimento",
				"- **CREATE DATABASE** Cria um novo banco de dados SQL",
				"- **CREATE INDEX** Cria um índice em uma tabela (permite valores duplicados)",
				"- **CREATE OR REPLACE VIEW** Atualiza uma visualização",
				"- **CREATE TABLE** Cria uma nova tabela no banco de dados",
				"- **CREATE PROCEDURE** Cria um procedimento armazenado",
				"- **CREATE UNIQUE INDEX** Cria um índice exclusivo em uma tabela (sem valores duplicados)",
				"- **CREATE VIEW** Cria uma visualização baseada no conjunto de resultados de uma instrução SELECT",
				"- **DATABASE** Cria ou exclui um banco de dados SQL",
				"- **DEFAULT** Uma restrição que fornece um valor padrão para uma coluna",
				"- **DELETE** Exclui linhas de uma tabela",
				"- **DESC** Classifica o conjunto de resultados em ordem decrescente",
				"- **DISTINCT** Seleciona apenas valores distintos (diferentes)",
				"- **DROP** Exclui uma coluna, restrição, banco de dados, índice, tabela ou visualização",
				"- **DROP COLUMN** Exclui uma coluna em uma tabela",
				"- **DROP CONSTRAINT** Exclui uma restrição UNIQUE, PRIMARY KEY, FOREIGN KEY ou CHECK",
				"- **DROP DATABASE** Exclui um banco de dados SQL existente",
				"- **DROP DEFAULT** Exclui uma restrição DEFAULT",
				"- **DROP INDEX** Exclui um índice em uma tabela",
				"- **DROP TABLE** Exclui uma tabela existente no banco de dados",
				"- **DROP VIEW** Exclui uma visualização",
				"- **EXEC** Executa um procedimento armazenado",
				"- **EXISTS** Testes para a existência de qualquer registro em uma subconsulta",
				"- **FOREIGN KEY** Uma restrição que é uma chave usada para vincular duas tabelas",
				"- **FROM** Especifica de qual tabela selecionar ou excluir dados",
				"- **FULL OUTER JOIN** Retorna todas as linhas quando há uma correspondência na tabela esquerda ou na tabela direita",
				"- **GROUP BY** Agrupa o conjunto de resultados (usado com funções agregadas: COUNT, MAX, MIN, SUM, AVG)",
				"- **HAVING** Usado em vez de WHERE com funções agregadas",
				"- **IN** Permite especificar vários valores em uma cláusula WHERE",
				"- **INDEX** Cria ou exclui um índice em uma tabela",
				"- **INNER JOIN** Retorna linhas que possuem valores correspondentes em ambas as tabelas",
				"- **INSERT INTO** Insere novas linhas em uma tabela",
				"- **INSERT INTO SELECT** Copia dados de uma tabela para outra tabela",
				"- **IS NULL** Testes para valores vazios",
				"- **IS NOT NULL** Testes para valores não vazios",
				"- **JOIN** Junta-se a tabelas",
				"- **LEFT JOIN** Retorna todas as linhas da tabela esquerda e as linhas correspondentes da tabela direita",
				"- **LIKE** Procura um padrão especificado em uma coluna",
				"- **LIMIT** Especifica o número de registros a serem retornados no conjunto de resultados",
				"- **NOT** Inclui apenas linhas onde uma condição não é verdadeira",
				"- **NOT NULL** Uma restrição que impõe uma coluna para não aceitar valores NULL",
				"- **OR** Inclui linhas onde qualquer uma das condições é verdadeira",
				"- **ORDER BY** Classifica o conjunto de resultados em ordem crescente ou decrescente",
				"- **OUTER JOIN** Retorna todas as linhas quando há uma correspondência na tabela esquerda ou na tabela direita",
				"- **PRIMARY KEY** Uma restrição que identifica exclusivamente cada registro em uma tabela de banco de dados",
				"- **PROCEDURE** Um procedimento armazenado",
				"- **RIGHT JOIN** Retorna todas as linhas da tabela direita e as linhas correspondentes da tabela esquerda",
				"- **ROWNUM** Especifica o número de registros a serem retornados no conjunto de resultados",
				"- **SELECT** Seleciona dados de um banco de dados",
				"- **SELECT DISTINCT** Seleciona apenas valores distintos (diferentes)",
				"- **SELECT INTO** Copia dados de uma tabela para uma nova tabela",
				"- **SELECT TOP** Especifica o número de registros a serem retornados no conjunto de resultados",
				"- **SET** Especifica quais colunas e valores devem ser atualizados em uma tabela",
				"- **TABLE** Cria uma tabela ou adiciona, exclui ou modifica colunas em uma tabela ou exclui uma tabela ou dados dentro de uma tabela",
				"- **TOP** Especifica o número de registros a serem retornados no conjunto de resultados",
				"- **TRUNCATE TABLE** Exclui os dados de uma tabela, mas não a própria tabela",
				"- **UNION** Combina o conjunto de resultados de duas ou mais instruções SELECT (somente valores distintos)",
				"- **UNION ALL** Combina o conjunto de resultados de duas ou mais instruções SELECT (permite valores duplicados)",
				"- **UNIQUE** Uma restrição que garante que todos os valores em uma coluna sejam únicos",
				"- **UPDATE** Atualiza linhas existentes em uma tabela",
				"- **VALUES** Especifica os valores de uma instrução INSERT INTO",
				"- **VIEW** Cria, atualiza ou exclui uma visualização",
				"- **WHERE** Filtra um conjunto de resultados para incluir apenas registros que atendem a uma condição especificada"
						],
			"description": "last update outubro 2023"
		},
	
	
/*****************************************************************************************/
//																GIT
/*****************************************************************************************/
	
	"git": {
	"scope": "markdown, plaintext",
	"prefix": "_!ib",
	"body": [
		"```",
		"> **Comandos de alto nível**\n",
		"Separamos os comandos do porcelana nos comandos principais e em alguns utilitários auxiliares do usuário.\n",

		"**Principais comandos**\n",
		"- **git-add** Adicione o conteúdo do arquivo ao índice",
		"- **git-am** Aplicar uma série de patches de uma caixa de correio",
		"- **git-archive** Crie um arquivo de arquivos de uma árvore nomeada",
		"- **git-bisect** Use a pesquisa binária para encontrar o commit que introduziu um bug",
		"- **git-branch** Listar, criar ou excluir ramificações",
		"- **git-bundle** Mover objetos e referências por arquivo",
		"- **git-checkout** Troque de ramificação ou restaure arquivos da árvore de trabalho",
		"- **git-cherry-pick** Aplicar as alterações introduzidas por alguns commits existentes",
		"- **git-citool** Alternativa gráfica para git-commit",
		"- **git-clean** Remova arquivos não rastreados da árvore de trabalho",
		"- **git-clone** Clonar um repositório em um novo diretório",
		"- **git-commit** Registrar alterações no repositório",
		"- **git-describe** Dê a um objeto um nome legível por humanos com base em uma referência disponível",
		"- **git-diff** Mostrar alterações entre commits, commit e árvore de trabalho, etc.",
		"- **git-fetch** Baixe objetos e referências de outro repositório",
		"- **git-format-patch** Preparar patches para envio por e-mail",
		"- **git-gc** Limpe arquivos desnecessários e otimize o repositório local",
		"- **git-grep** Imprimir linhas que correspondam a um padrão",
		"- **git-gui** Uma interface gráfica portátil para Git",
		"- **git-init** Crie um repositório Git vazio ou reinicialize um existente",
		"- **git-log** Mostrar registros de commit",
		"- **git-maintenance** Execute tarefas para otimizar os dados do repositório Git",
		"- **git-merge** Junte duas ou mais histórias de desenvolvimento",
		"- **git-mv** Mover ou renomear um arquivo, diretório ou link simbólico",
		"- **git-notes** Adicionar ou inspecionar notas de objeto",
		"- **git-pull** Buscar e integrar com outro repositório ou filial local",
		"- **git-push** Atualizar referências remotas junto com objetos associados",
		"- **git-range-diff** Compare dois intervalos de commit (por exemplo, duas versões de um branch)",
		"- **git-rebase** Reaplicar commits em cima de outra dica base",
		"- **git-reset** Redefinir o HEAD atual para o estado especificado",
		"- **git-restore** Restaurar arquivos da árvore de trabalho",
		"- **git-revert** Reverter alguns commits existentes",
		"- **git-rm** Remova arquivos da árvore de trabalho e do índice",
		"- **git-shortlog** Resuma a saída do git log",
		"- **git-show** Mostrar vários tipos de objetos",
		"- **git-sparse-checkout** Reduza sua árvore de trabalho a um subconjunto de arquivos rastreados",
		"- **git-stash** Armazene as alterações em um diretório de trabalho sujo",
		"- **git-status** Mostrar o status da árvore de trabalho",
		"- **git-submodule** Inicialize, atualize ou inspecione submódulos",
		"- **git-switch** Mudar de ramo",
		"- **git-tag** Crie, liste, exclua ou verifique um objeto de tag assinado com GPG",
		"- **git-worktree** Gerenciar múltiplas árvores de trabalho",
		"- **gitk** O navegador do repositório Git",
		"- **scalar** Uma ferramenta para gerenciar grandes repositórios Git\n",

		"**Comandos Auxiliares (Principais comandos)**\n",
		"- **git-config** Obtenha e defina repositório ou opções globais",
		"- **git-fast-export** Exportador de dados Git",
		"- **git-fast-import** Back-end para importadores rápidos de dados Git",
		"- **git-filter-branch** Reescrever ramificações",
		"- **git-mergetool** Execute ferramentas de resolução de conflitos de mesclagem para resolver conflitos de mesclagem",
		"- **git-pack-refs** Pack heads e tags para acesso eficiente ao repositório",
		"- **git-prune** Remover todos os objetos inacessíveis do banco de dados de objetos",
		"- **git-reflog** Gerenciar informações de reflog",
		"- **git-remote** Gerenciar conjunto de repositórios rastreados",
		"- **git-repack** Empacotar objetos descompactados em um repositório",
		"- **git-replace** Crie, liste e exclua referências para substituir objetos",
		"- **git-annotate** Anote linhas de arquivo com informações de commit",
		"- **git-blame** Mostrar qual revisão e autor modificou pela última vez cada linha de um arquivo",
		"- **git-bugreport** Coletar informações para o usuário registrar um relatório de bug",
		"- **git-count-objects** Conte o número de objetos descompactados e seu consumo de disco",
		"- **git-diagnose** Gere um arquivo zip de informações de diagnóstico",
		"- **git-difftool** Mostrar alterações usando ferramentas de comparação comuns",
		"- **git-fsck Verifica a conectividade e validade dos objetos no banco de dados",
		"- **git-help** Exibir informações de ajuda sobre o Git",
		"- **git-instaweb** Navegue instantaneamente em seu repositório de trabalho no gitweb",
		"- **git-merge-tree** Execute a mesclagem sem tocar no índice ou na árvore de trabalho",
		"- **git-rerere** Reutilizar resolução gravada de mesclagens conflitantes",
		"- **git-show-branch** Mostrar filiais e seus commits",
		"- **git-verify-commit** Verifique a assinatura GPG dos commits",
		"- **git-verify-tag** Verifique a assinatura GPG das tags",
		"- **git-version** Exibir informações de versão sobre o Git",
		"- **git-whatchanged** Mostrar logs com a diferença que cada commit apresenta",
		"- **gitweb** Interface web Git (frontend web para repositórios Git)\n",

		"**Interagindo com outras pessoas**\n",
		"Esses comandos servem para interagir com SCM estrangeiros e com outras pessoas via patch por e-mail.\n",
		
		"- **git-archimport** Importe um repositório GNU Arch para o Git",
		"- **git-cvsexportcommit** Exporte um único commit para um checkout CVS",
		"- **git-cvsimport** Salve seus dados de outro SCM que as pessoas adoram odiar",
		"- **git-cvsserver** Um emulador de servidor CVS para Git",
		"- **git-imap-send** Envie uma coleção de patches do stdin para uma pasta IMAP",
		"- **git-p4** Importar e enviar para repositórios Perforce",
		"- **git-quiltimport** Aplica um patchset de quilt no branch atual",
		"- **git-request-pull** Gera um resumo das alterações pendentes",
		"- **git-send-email** Envie uma coleção de patches como e-mails",
		"- **git-svn** Operação bidirecional entre um repositório Subversion e Git\n",

		"**Redefinir, restaurar e reverter**\n",
		"- **git-revert** trata de fazer um novo commit que reverte as alterações feitas por outros commits.",
		"- **git-restore** trata de restaurar arquivos na árvore de trabalho a partir do índice ou de outro commit. Este comando não atualiza seu branch. O comando também pode ser usado para restaurar arquivos no índice de outro commit.",
		"- **git-reset** trata de atualizar seu branch, movendo a dica para adicionar ou remover commits do branch. Esta operação altera o histórico de commits. git resettambém pode ser usado para restaurar o índice, sobrepondo-se ao git restore.",

		"```",
				],
	"description": ""
	},

		"git ": {
			"scope": "markdown, plaintext",
			"prefix": "_!ib",
			"body": [
				"```",
				"> **Comandos de alto nível**\n",
				"Separamos os comandos do porcelana nos comandos principais e em alguns utilitários auxiliares do usuário.\n",
	
				"**Principais comandos**\n",
				"- **git-add** Adicione o conteúdo do arquivo ao índice",
				"- **git-am** Aplicar uma série de patches de uma caixa de correio",
				"- **git-archive** Crie um arquivo de arquivos de uma árvore nomeada",
				"- **git-bisect** Use a pesquisa binária para encontrar o commit que introduziu um bug",
				"- **git-branch** Listar, criar ou excluir ramificações",
				"- **git-bundle** Mover objetos e referências por arquivo",
				"- **git-checkout** Troque de ramificação ou restaure arquivos da árvore de trabalho",
				"- **git-cherry-pick** Aplicar as alterações introduzidas por alguns commits existentes",
				"- **git-citool** Alternativa gráfica para git-commit",
				"- **git-clean** Remova arquivos não rastreados da árvore de trabalho",
				"- **git-clone** Clonar um repositório em um novo diretório",
				"- **git-commit** Registrar alterações no repositório",
				"- **git-describe** Dê a um objeto um nome legível por humanos com base em uma referência disponível",
				"- **git-diff** Mostrar alterações entre commits, commit e árvore de trabalho, etc.",
				"- **git-fetch** Baixe objetos e referências de outro repositório",
				"- **git-format-patch** Preparar patches para envio por e-mail",
				"- **git-gc** Limpe arquivos desnecessários e otimize o repositório local",
				"- **git-grep** Imprimir linhas que correspondam a um padrão",
				"- **git-gui** Uma interface gráfica portátil para Git",
				"- **git-init** Crie um repositório Git vazio ou reinicialize um existente",
				"- **git-log** Mostrar registros de commit",
				"- **git-maintenance** Execute tarefas para otimizar os dados do repositório Git",
				"- **git-merge** Junte duas ou mais histórias de desenvolvimento",
				"- **git-mv** Mover ou renomear um arquivo, diretório ou link simbólico",
				"- **git-notes** Adicionar ou inspecionar notas de objeto",
				"- **git-pull** Buscar e integrar com outro repositório ou filial local",
				"- **git-push** Atualizar referências remotas junto com objetos associados",
				"- **git-range-diff** Compare dois intervalos de commit (por exemplo, duas versões de um branch)",
				"- **git-rebase** Reaplicar commits em cima de outra dica base",
				"- **git-reset** Redefinir o HEAD atual para o estado especificado",
				"- **git-restore** Restaurar arquivos da árvore de trabalho",
				"- **git-revert** Reverter alguns commits existentes",
				"- **git-rm** Remova arquivos da árvore de trabalho e do índice",
				"- **git-shortlog** Resuma a saída do git log",
				"- **git-show** Mostrar vários tipos de objetos",
				"- **git-sparse-checkout** Reduza sua árvore de trabalho a um subconjunto de arquivos rastreados",
				"- **git-stash** Armazene as alterações em um diretório de trabalho sujo",
				"- **git-status** Mostrar o status da árvore de trabalho",
				"- **git-submodule** Inicialize, atualize ou inspecione submódulos",
				"- **git-switch** Mudar de ramo",
				"- **git-tag** Crie, liste, exclua ou verifique um objeto de tag assinado com GPG",
				"- **git-worktree** Gerenciar múltiplas árvores de trabalho",
				"- **gitk** O navegador do repositório Git",
				"- **scalar** Uma ferramenta para gerenciar grandes repositórios Git\n",
	
				"**Comandos Auxiliares (Principais comandos)**\n",
				"- **git-config** Obtenha e defina repositório ou opções globais",
				"- **git-fast-export** Exportador de dados Git",
				"- **git-fast-import** Back-end para importadores rápidos de dados Git",
				"- **git-filter-branch** Reescrever ramificações",
				"- **git-mergetool** Execute ferramentas de resolução de conflitos de mesclagem para resolver conflitos de mesclagem",
				"- **git-pack-refs** Pack heads e tags para acesso eficiente ao repositório",
				"- **git-prune** Remover todos os objetos inacessíveis do banco de dados de objetos",
				"- **git-reflog** Gerenciar informações de reflog",
				"- **git-remote** Gerenciar conjunto de repositórios rastreados",
				"- **git-repack** Empacotar objetos descompactados em um repositório",
				"- **git-replace** Crie, liste e exclua referências para substituir objetos",
				"- **git-annotate** Anote linhas de arquivo com informações de commit",
				"- **git-blame** Mostrar qual revisão e autor modificou pela última vez cada linha de um arquivo",
				"- **git-bugreport** Coletar informações para o usuário registrar um relatório de bug",
				"- **git-count-objects** Conte o número de objetos descompactados e seu consumo de disco",
				"- **git-diagnose** Gere um arquivo zip de informações de diagnóstico",
				"- **git-difftool** Mostrar alterações usando ferramentas de comparação comuns",
				"- **git-fsck Verifica a conectividade e validade dos objetos no banco de dados",
				"- **git-help** Exibir informações de ajuda sobre o Git",
				"- **git-instaweb** Navegue instantaneamente em seu repositório de trabalho no gitweb",
				"- **git-merge-tree** Execute a mesclagem sem tocar no índice ou na árvore de trabalho",
				"- **git-rerere** Reutilizar resolução gravada de mesclagens conflitantes",
				"- **git-show-branch** Mostrar filiais e seus commits",
				"- **git-verify-commit** Verifique a assinatura GPG dos commits",
				"- **git-verify-tag** Verifique a assinatura GPG das tags",
				"- **git-version** Exibir informações de versão sobre o Git",
				"- **git-whatchanged** Mostrar logs com a diferença que cada commit apresenta",
				"- **gitweb** Interface web Git (frontend web para repositórios Git)\n",
	
				"**Interagindo com outras pessoas**\n",
				"Esses comandos servem para interagir com SCM estrangeiros e com outras pessoas via patch por e-mail.\n",
				
				"- **git-archimport** Importe um repositório GNU Arch para o Git",
				"- **git-cvsexportcommit** Exporte um único commit para um checkout CVS",
				"- **git-cvsimport** Salve seus dados de outro SCM que as pessoas adoram odiar",
				"- **git-cvsserver** Um emulador de servidor CVS para Git",
				"- **git-imap-send** Envie uma coleção de patches do stdin para uma pasta IMAP",
				"- **git-p4** Importar e enviar para repositórios Perforce",
				"- **git-quiltimport** Aplica um patchset de quilt no branch atual",
				"- **git-request-pull** Gera um resumo das alterações pendentes",
				"- **git-send-email** Envie uma coleção de patches como e-mails",
				"- **git-svn** Operação bidirecional entre um repositório Subversion e Git\n",
	
				"**Redefinir, restaurar e reverter**\n",
				"- **git-revert** trata de fazer um novo commit que reverte as alterações feitas por outros commits.",
				"- **git-restore** trata de restaurar arquivos na árvore de trabalho a partir do índice ou de outro commit. Este comando não atualiza seu branch. O comando também pode ser usado para restaurar arquivos no índice de outro commit.",
				"- **git-reset** trata de atualizar seu branch, movendo a dica para adicionar ou remover commits do branch. Esta operação altera o histórico de commits. git resettambém pode ser usado para restaurar o índice, sobrepondo-se ao git restore.",
	
				"```",
						],
			"description": ""
		},
	
	
		"                               ": {
		"scope": "markdown, plaintext",
		"prefix": ".git 1.1 Sobre Controle de Versao",
			"body": [
				"```",
				"> https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/A1C8mWT.png)",
				"```",
						],
			"description": ""
		},
	
		"                              ": {
		"scope": "markdown, plaintext",
		"prefix": ".git 1.3 O Basico do Git",
			"body": [
				"```",
				"> https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/XBbcYt2.png)",
				"```",
						],
			"description": ""
		},
	
		"                                    ": {
		"scope": "markdown, plaintext",
		"prefix": ".git 1.4 Primeiros passos - A linha de comando",
			"body": [
				"```",
				"> https://git-scm.com/book/en/v2/Getting-Started-The-Command-Line",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/JCh5fPW.png)",
				"```",
						],
			"description": ""
		},
	
		"                                     ": {
		"scope": "markdown, plaintext",
		"prefix": ".git 1.6 Primeiros passos - Configuração inicial do Git",
			"body": [
				"```",
				"> https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/IyLC14R.png)",
				"```",
						],
			"description": ""
		},
	
		"                                         ": {
		"scope": "markdown, plaintext",
		"prefix": ".git 1.7 Primeiros passos - Obtendo ajuda",
			"body": [
				"```",
				"> https://git-scm.com/book/en/v2/Getting-Started-Getting-Help",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/6ygB5QJ.png)",
				"```",
						],
			"description": ""
		},
	
		"                                           ": {
		"scope": "markdown, plaintext",
		"prefix": ".git 2.1 Noções básicas do Git – Obtendo um repositório Git",
			"body": [
				"```",
				"> https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/8ADQFyY.png)",
				"```",
						],
			"description": ""
		},
	
		"                                            ": {
		"scope": "markdown, plaintext",
		"prefix": ".git 2.2 Noções básicas do Git - Registrando alterações no repositório",
			"body": [
				"```",
				"> https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/dZyATFv.png)",
				"```",
						],
			"description": ""
		},
	
		"                                                  ": {
		"scope": "markdown, plaintext",
		"prefix": ".git 2.3 Noções básicas do Git – Visualizando o histórico de commits",
			"body": [
				"```",
				"> https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/NfhmFNF.png)",
				"```",
						],
			"description": ""
		},
	
		"                                                           ": {
		"scope": "markdown, plaintext",
		"prefix": ".git 2.4 Noções básicas do Git - Desfazendo coisas",
			"body": [
				"```",
				"> zzzz",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/qTY14Rj.png)",
				"```",
						],
			"description": ""
		},
	
		"                                                            ": {
		"scope": "markdown, plaintext",
		"prefix": ".git 2.5 Noções básicas do Git – Trabalhando com controles remotos",
			"body": [
				"```",
				"> https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/HBMAOu3.png)",
				"```",
						],
			"description": ""
		},
	
		"                                                             ": {
		"scope": "markdown, plaintext",
		"prefix": ".git 2.6 Noções básicas do Git - Marcação",
			"body": [
				"```",
				"> https://git-scm.com/book/en/v2/Git-Basics-Tagging",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/HjlV7Jd.png)",
				"```",
						],
			"description": ""
		},
	
		"                                                              ": {
		"scope": "markdown, plaintext",
		"prefix": ".git 2.7 Noções básicas do Git - Aliases do Git",
			"body": [
				"```",
				"> https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases",
				"```",
				"```",
				"![Descrição da imagem](https://imgur.com/6DJ7uLa.png)",
				"```",
						],
			"description": ""
		},
	
		/*".git ": {
		"scope": "markdown, plaintext",
		"prefix": ".git",
			"body": [
				"```",
				"> zzzz",
				"```",
				"```",
				"![Descrição da imagem](zzz)",
				"```",
						],
			"description": ""
		},*/

	
/***************************************************************************************************/
//  															HTML
/***************************************************************************************************/

		"html": {
		"scope": "html",
		"prefix": "_library",
		"body": [
			"HTML elements",
			"<a>",
			"<abbr",
			"<acronym>🗑️",
			"<address>",
			"<area>",
			"<article>",
			"<aside>",
			"<audio>",
			"<b>",
			"<base>",
			"<bdi>",
			"<bdo>",
			"<big>🗑️",
			"<blockquote>",
			"<body>",
			"<br>",
			"<button>",
			"<canvas>",
			"<caption>",
			"<center>🗑️",
			"<cite>",
			"<code>",
			"<col>",
			"<colgroup>",
			"<data>",
			"<datalist>",
			"<dd>",
			"<del>",
			"<details>",
			"<dfn>",
			"<dialog>",
			"<dir>🗑️",
			"<div>",
			"<dl>",
			"<dt>",
			"<em>",
			"<embed>",
			"<fieldset>",
			"<figcaption>",
			"<figure>",
			"<font>🗑️",
			"<footer>",
			"<form>",
			"<frame>🗑️",
			"<frameset>🗑️",
			"<h1>",
			"<head>",
			"<header>",
			"<hgroup>",
			"<hr>",
			"<html>",
			"<i>",
			"<iframe>",
			"<image>🗑️",
			"<img>",
			"<input>",
			"<ins>",
			"<kbd>",
			"<label>",
			"<legend>",
			"<li>",
			"<link>",
			"<main>",
			"<map>",
			"<mark>",
			"<marquee>🗑️",
			"<menu>",
			"<menuitem>🗑️",
			"<meta>",
			"<meter>",
			"<nav>",
			"<nobr>🗑️",
			"<noembed>🗑️",
			"<noframes>🗑️",
			"<noscript>",
			"<object>",
			"<ol>",
			"<optgroup>",
			"<option>",
			"<output>",
			"<p>",
			"<param>🗑️",
			"<picture>",
			"<plaintext>🗑️",
			"<portal>⚠️",
			"<pre>",
			"<progress>",
			"<q>",
			"<rb>🗑️",
			"<rp>",
			"<rt>",
			"<rtc>🗑️",
			"<ruby>",
			"<s>",
			"<samp>",
			"<script>",
			"<search>",
			"<section>",
			"<select>",
			"<slot>",
			"<small>",
			"<source>",
			"<span>",
			"<strike>🗑️",
			"<strong>",
			"<style>",
			"<sub>",
			"<summary>",
			"<sup>",
			"<table>",
			"<tbody>",
			"<td>",
			"<template>",
			"<textarea>",
			"<tfoot>",
			"<th>",
			"<thead>",
			"<time>",
			"<title>",
			"<tr>",
			"<track>",
			"<tt>🗑️",
			"<u>",
			"<ul>",
			"<var>",
			"<video>",
			"<wbr>",
			"<xmp>🗑️",

			"",
			"Global attributes",
			"accesskey",
			"autocapitalize",
			"autofocus",
			"class",
			"contenteditable",
			"contextmenu🗑️",
			"data-*",
			"dir",
			"draggable",
			"enterkeyhint",
			"exportparts",
			"hidden",
			"id",
			"inert",
			"inputmode",
			"is",
			"itemid",
			"itemprop",
			"itemref",
			"itemscope",
			"itemtype",
			"lang",
			"nonce",
			"part",
			"popover",
			"slot",
			"spellcheck",
			"style",
			"tabindex",
			"title",
			"translate",
			"virtualkeyboardpolicy⚠️",

			"",
			"Attributes",
			"accept",
			"autocomplete",
			"capture",
			"crossorigin",
			"dirname",
			"disabled",
			"elementtiming",
			"for",
			"max",
			"maxlength",
			"min",
			"minlength",
			"multiple",
			"pattern",
			"placeholder",
			"readonly",
			"rel",
			"required",
			"size",
			"step",
		],
		"description": ""
		},

/***************************************************************************************************/
//  															CSS
/***************************************************************************************************/

	"Pseudo classe": {
		"scope": "css",
		"prefix": "_library",
		"body": [
			":-moz-broken⚠️",
			":-moz-drag-over⚠️",
			":-moz-first-node⚠️",
			":-moz-handler-blocked⚠️",
			":-moz-handler-crashed⚠️",
			":-moz-handler-disabled⚠️",
			":-moz-last-node⚠️",
			":-moz-loading⚠️",
			":-moz-locale-dir(ltr)⚠️",
			":-moz-locale-dir(rtl)⚠️",
			":-moz-only-whitespace⚠️",
			":-moz-submit-invalid⚠️",
			":-moz-suppressed⚠️",
			":-moz-user-disabled⚠️",
			":-moz-window-inactive⚠️",
			":active — usado para selecionar e estilizar o link ativo. Um link se torna ativo quando você clica nele",
			":any-link — corresponde a cada elemento <a> ou <area> que possui um atributo href",
			":autofill — permite estilizar <input>elementos que contêm conteúdo preenchido automaticamente pelo navegador",
			":blank⚠️",
			":buffering⚠️",
			":checked — representa qualquer elemento de rádio (<input type='radio'>), caixa de seleção (<input type='checkbox'>) ou opção (<option> em um <select>) que está marcado ou alternado para um estado ativado",
			":current⚠️",
			":default — seleciona elementos de formulário que são padrão em um grupo de elementos relacionados",
			":defined (num sei)",
			":dir() — combina elementos com base na direcionalidade do texto neles contido",
			":disabled — representa qualquer elemento desabilitado. Um elemento é desabilitado se não puder ser ativado (selecionado, clicado, digitado, etc.) ou aceitar o foco",
			":empty — representa qualquer elemento que não tenha filho",
			":enabled — representa qualquer elemento ativado. Um elemento é ativado se puder ser ativado (selecionado, clicado, digitado etc.) ou aceitar o foco",
			":first (num sei)",
			":first-child — representa qualquer elemento que seja o primeiro filho de seus pais",
			":first-of-type — representa o primeiro elemento de seu tipo entre os filhos de seu elemento pai",
			":focus — aplicada quando um elemento recebe foco, o que pode ocorrer quando o usuário seleciona o elemento utilizando o teclado ou ativando o mesmo com o mouse",
			":focus-visible — aplica quando você realmente deseja um indicador visual para ajudar o usuário a ver onde está o foco",
			":focus-within — corresponde a um elemento se o elemento ou qualquer um de seus descendentes estiver em foco",
			":fullscreen — corresponde a cada elemento que está atualmente no modo de tela cheia.",
			":future (nao sei)",
			":has() (nao sei)",
			":host (nao sei)",
			":host-context() (nao sei)",
			":host() (nao sei)",
			":hover — corresponde quando o usuário interage com um elemento com um dispositivo apontador, mas não necessariamente o ativa. Geralmente é acionado quando o usuário passa o cursor sobre um elemento (ponteiro do mouse)",
			":in-range — representa um elemento <input> cujo valor atual está dentro dos limites de intervalo especificados pelos atributos min e max.",
			":indeterminate — seleciona elementos do formulário que estão em estado indeterminado",
			":invalid — representa qualquer elemento <form>, <fieldset>, <input> ou outro elemento <form> cujo conteúdo não foi validado.",
			":is() (nao sei)",
			":lang() combina elementos com base no idioma em que eles estão determinados",
			":last-child — representa o último elemento entre um grupo de elementos irmãos",
			":last-of-type — representa o último elemento de seu tipo entre um grupo de elementos irmãos.",
			":left (nao sei)",
			":link — representa um elemento que ainda não foi visitado. Ele corresponde a todos os elementos <a> ou <area> não visitados que possuem um atributo href",
			":local-link (nao sei)",
			":modal — corresponde a um elemento que está em um estado no qual exclui toda interação com elementos externos até que a interação seja descartada",
			":muted — representa um elemento que é capaz de emitir som, como <audio> ou <video>, mas está silenciado (silêncio forçado)",
			":not() (nao sei)",
			":nth-child() — O seletor corresponde a cada elemento que é o enésimo filho de seu pai",
			":nth-last-child() — combina elementos com base em sua posição entre um grupo de irmãos, contando a partir do final",
			":nth-last-of-type() — combina elementos com base em sua posição entre irmãos do mesmo tipo (nome da tag), contando a partir do final.",
			":nth-of-type() — combina elementos com base em sua posição entre irmãos do mesmo tipo (nome da tag)",
			":only-child — representa um elemento sem irmãos",
			":only-of-type — representa um elemento que não possui irmãos do mesmo tipo",
			":optional",
			":out-of-range",
			":past",
			":paused",
			":picture-in-picture",
			":placeholder-shown",
			":playing",
			":popover-open",
			":read-only",
			":read-write",
			":required",
			":right",
			":root",
			":scope",
			":seeking",
			":stalled",
			":state()⚠️",
			":target",
			":target-within⚠️",
			":user-invalid",
			":user-valid",
			":valid",
			":visited",
			":volume-locked",
			":where()",
		],
		"description": " "
	},

	"Pseudo elements": {
		"scope": "css",
		"prefix": "_library",
		"body": [
			"Pseudo-elements",
			"::-moz-color-swatch⚠️",
			"::-moz-focus-inner⚠️",
			"::-moz-list-bullet⚠️",
			"::-moz-list-number⚠️",
			"::-moz-page⚠️",
			"::-moz-page-sequence⚠️",
			"::-moz-progress-bar⚠️",
			"::-moz-range-progress⚠️",
			"::-moz-range-thumb⚠️",
			"::-moz-range-track⚠️",
			"::-moz-scrolled-page-sequence⚠️",
			"::-webkit-inner-spin-button⚠️",
			"::-webkit-meter-bar⚠️",
			"::-webkit-meter-even-less-good-value⚠️",
			"::-webkit-meter-inner-element⚠️",
			"::-webkit-meter-optimum-value⚠️",
			"::-webkit-meter-suboptimum-value⚠️",
			"::-webkit-progress-bar⚠️",
			"::-webkit-progress-inner-element⚠️",
			"::-webkit-progress-value⚠️",
			"::-webkit-scrollbar⚠️",
			"::-webkit-search-cancel-button⚠️",
			"::-webkit-search-results-button⚠️",
			"::-webkit-slider-runnable-track⚠️",
			"::-webkit-slider-thumb⚠️",
			"::after",
			"::backdrop",
			"::before",
			"::cue",
			"::cue-region",
			"::file-selector-button",
			"::first-letter",
			"::first-line",
			"::grammar-error",
			"::highlight()",
			"::marker",
			"::part()",
			"::placeholder",
			"::selection",
			"::slotted()",
			"::spelling-error",
			"::target-text⚠️",
			"::view-transition⚠️",
			"::view-transition-group⚠️",
			"::view-transition-image-pair⚠️",
			"::view-transition-new⚠️",
			"::view-transition-old⚠️",
		],
		"description": " "
	},

	"Functions": {
		"scope": "css",
		"prefix": "_library",
		"body": [
			"-moz-image-rect🗑️",
			"abs()",
			"acos()",
			"asin()",
			"atan()",
			"atan2()",
			"attr()",
			"calc()",
			"clamp()",
			"cos()",
			"counter()",
			"counters()",
			"cross-fade()",
			"element()⚠️",
			"env()",
			"exp()",
			"fit-content()",
			"hypot()",
			"log()",
			"max()",
			"min()",
			"minmax()",
			"mod()",
			"path()",
			"pow()",
			"ray()",
			"rem()",
			"repeat()",
			"round()",
			"sign()",
			"sin()",
			"sqrt()",
			"symbols()",
			"tan()",
			"url()",
			"var()",
		],
		"description": " "
	},

	"Seletores e Combinatores": {
		"scope": "css",
		"prefix": "_library",
		"body": [
			"Seletores de atributos",
			"[attr]",			
			"[attr=value]",			
			"[attr~=value]",			
			"[attr|=value]",			
			"[attr^=value]",			
			"[attr$=value]",			
			"[attr*=value]",			
			"[attr operator value i]",		
			"[attr operator value s]⚠️",

			"",
			"Seletores de classe",
			"Seletores de ID",
			"& seletor de aninhamento",
			"Seletores de tipo",
			"Seletores universais",

			"",
			"child combinator (>)",
			"column combinator (||)⚠️",
			"descendant combinator ( )",
			"namespace separator (|)",
			"next-sibling combinator (+)",
			"selector list (,)",
			"subsequent-sibling combinator (~)",
		],
		"description": " "
	},

	"UI": {
		"scope": "css",
		"prefix": "_UI Designer",
		"body": [
			"# <Material-designer>",
			"`Fonte`https://fonts.google.com/",
			"`Gradiant`https://cssgradient.io/",
			"`Gradient`https://app.haikei.app/",
			"`Icon`https://css.gg/",
			"`Font`https://www.fontsquirrel.com/",
			"`Font`https://www.dafont.com/pt/",
			"`Font`https://everythingfonts.com/",
			"`Font`https://fonts.google.com/",
			"# <Inspiração>",
			"https://hype4.academy/",
			"https://freebiesbug.com/",
			"figma.com/community",
			"# <Artigos>",
			"https://cssgradient.io/blog/",
			"http://www.linhadecodigo.com.br/css.aspx",
			"https://css-tricks.com/archives/",
			"# <Geradores-de-codigo>",
			"https://animista.net/play/basic/shadow-drop-2",
			"`Grid`https://cssgrid-generator.netlify.app/",
			"`Botao`https://www.bestcssbuttongenerator.com/#/0",
			"`Flex`https://angrytools.com/css-flex/",
			"`Clip`https://bennettfeely.com/clippy/",
			"`Misc`https://10015.io/css-tools",
			"# <Projetos-completos-codigo>",
			"https://www.loopnerd.com.br/codigos-css-prontos/",
			"https://startbootstrap.com/",
			"https://styleshout.com/",
			"https://html5up.net/",
			"https://freehtml5.co/",
			"https://www.tooplate.com/",
			"https://themewagon.com/themes/",
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ": {
	"scope": "css", 
	"prefix": "#-moz-image-region⚠️",
			"body": [
			],
			"description": " "
	},
	
	"                                                                                                                                                                                                                                                                                                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#-moz-orient⚠️",
			"body": [
			],
			"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#-webkit-border-before⚠️",
		"body": [
		],
		"description": " "
	},


	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#-webkit-box-reflect⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                   ": {
	"scope": "css",
	"prefix": "#-webkit-line-clamp",
			"body": [
			],
			"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ": {
	"scope": "css", 
	"prefix": "#-webkit-mask-attachment⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#-webkit-mask-box-image⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ": {
	"scope": "css", 
	"prefix": "#-webkit-mask-composite⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#-webkit-mask-position-x⚠️",
		"body": [
		],
		"description": " "
	},
	
	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#-webkit-mask-position-y⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#-webkit-mask-repeat-x⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#-webkit-mask-repeat-y⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#-webkit-overflow-scrolling⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#-webkit-tap-highlight-color⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                    ": {
	"scope": "css",
	"prefix": "#-webkit-text-fill-color",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ": {
	"scope": "css", 
	"prefix": "#-webkit-text-security",
		"body": [
		],
		"description": " "
	},

	"                                                                     ": {
	"scope": "css",
	"prefix": "#-webkit-text-stroke",
		"body": [
		],
		"description": " "
	},

	"                                                                      ": {
	"scope": "css",
	"prefix": "#-webkit-text-stroke-color",
		"body": [
		],
		"description": " "
	},

	"                                                                         ": {
	"scope": "css",
	"prefix": "#-webkit-text-stroke-width",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#-webkit-touch-callout⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                          ": {
	"scope": "css",    
	"prefix": "#accent-color",
		"body": [
			"accent-color: red;"
		],
		"description": ""
	},

	"                                                                           ": {
	"scope": "css", 
	"prefix": "#align-content",
		"body": [
			"align-content: start;"
		],
		"description": " "
	},

	"                                                                            ": {
	"scope": "css", 
	"prefix": "#align-items",
		"body": [
			"align-items: start;"
		],
		"description": " "
	},

	"                                                                             ": {
	"scope": "css",
	"prefix": "#align-self: start;",
		"body": [
			"align-self"
		],
		"description": " "
	},

	"                                                                              ": {
	"scope": "css",
	"prefix": "#align-tracks⚠️",
		"body": [
			"align-tracks: start;"
		],
	"description": " "
	},

	"                                                                               ": {
	"scope": "css",
	"prefix": "#all",
		"body": [
			"all: initial;"
		],
	"description": " "
	},

	"                                                                                ": {
	"scope": "css", 
	"prefix": "#animation (shorthand)",
		"body": [
			"animation: 3s ease-in 1s infinite reverse both running slidein;"
		],
	"description": " "
	},

	"                                                                                 ": {
	"scope": "css",
	"prefix": "#animation-composition;",
		"body": [
			"animation-composition: add;"
		],
	"description": " "
	},

	"                                                                                  ": {
	"scope": "css",
	"prefix": "#animation-delay",
		"body": [
			"animation-delay: 2s;"
		],
	"description": " especifica o tempo de espera desde a aplicação da animação a um elemento antes de começar a executar a animação"
	},

	"                                                                                   ": {
	"scope": "css",
	"prefix": "#animation-direction",
		"body": [
			"animation-direction: normal;"
		],
	"description": "define se uma animação deve ser reproduzida para frente, para trás ou alternar entre a reprodução da sequência para frente e para trás"
	},

	"                                                                                    ": {
	"scope": "css",
	"prefix": "#animation-duration",
		"body": [
			"animation-duration: 2s;"
		],
	"description": "define o tempo que uma animação leva para completar um ciclo"
	},

	"                                                                                     ": {
	"scope": "css",
	"prefix": "#animation-fill-mode",
		"body": [
			"animation-fill-mode: none;"
		],
	"description": "especifica um estilo para o elemento quando a animação não está sendo reproduzida (antes de começar, depois de terminar ou ambos)"
	},


	"                                                                                      ": {
	"scope": "css", 
	"prefix": "#animation-iteration-count",
		"body": [
			"animation-iteration-count: 0;"
		],
	"description": "especifica o número de vezes que uma animação deve ser reproduzida"
	},

	"                                                                                       ": {
	"scope": "css",
	"prefix": "#animation-name",
		"body": [
			"animation-name: none;"
		],
	"description": "especifica um nome para a animação (arroba)keyframes"
	},

	"                                                                                        ": {
	"scope": "css",
	"prefix": "#animation-play-state",
		"body": [
			"animation-play-state: paused;"
		],
	"description": "especifica se a animação está em execução ou pausada"
	},

	"                                                                                         ": {
	"scope": "css",
	"prefix": "#animation-range⚠️",
		"body": [
			"animation-range: normal;"
		],
	"description": " "
	},

	"                                                                                          ": {
	"scope": "css",
	"prefix": "#animation-range-end⚠️",
		"body": [
			"#animation-range-end: normal;"
		],
	"description": " "
	},

	"                                                                                           ": {
	"scope": "css",
	"prefix": "#animation-range-start⚠️",
		"body": [
			"animation-range-start: normal;"
		],
	"description": " "
	},

	"                                                                                            ": {
	"scope": "css",
	"prefix": "#animation-timeline⚠️",
		"body": [
			"animation-timeline: none;"
		],
	"description": " "
	},

	"                                                                                             ": {
	"scope": "css",          
	"prefix": "#animation-timing-function",
		"body": [
			"animation-timing-function"
		],
	"description": "especifica a curva de velocidade de uma animação"
	},

	"                                                                                                ": {
	"scope": "css",
	"prefix": "#appearance",
		"body": [
			"appearance"
		],
	"description": "— usada para exibir elementos de UI com estilo específico da plataforma, com base no tema do sistema operacional"
	},

	"                                                                                                 ": {
	"scope": "css", 
	"prefix": "#aspect-ratio",
		"body": [
			"aspect-ratio"
		],
	"description": "permite definir a proporção desejada entre largura e altura da caixa de um elemento"
	},

	"                                                                                                  ": {
	"scope": "css",
	"prefix": "#backdrop-filter",
		"body": [
			"backdrop-filter"
		],
	"description": "permite aplicar efeitos gráficos, como desfoque ou mudança de cor, à área atrás de um elemento"
	},

	"                                                                                                   ": {
	"scope": "css", 
	"prefix": "#backface-visibility",
		"body": [
			"backface-visibility"
		],
	"description": "backface-visibility define se a face posterior de um elemento fica visível quando voltada para o usuário"
	},

	"                                                                                                    ": {
	"scope": "css",
	"prefix": "#background",
		"body": [
			"background"
		],
	"description": " "
	},

	"                                                                                                     ": {
	"scope": "css", 
	"prefix": "#background-attachment",
		"body": [
			"background-attachment"
		],
	"description": "define se a posição de uma imagem de fundo é fixa na janela de visualização ou rola com o bloco que a contém"
	},

	"                                                                                                      ": {
	"scope": "css",
	"prefix": "#background-blend-mode",
		"body": [
			"background-blend-mode"
		],
	"description": "define como as imagens de fundo de um elemento devem se misturar entre si e com a cor de fundo do elemento"
	},

	"                                                                                                       ": {
	"scope": "css", 
	"prefix": "#background-clip",
		"body": [
			"background-clip"
		],
	"description": "define se o plano de fundo de um elemento se estende abaixo de sua caixa de borda, caixa de preenchimento ou caixa de conteúdo"
	},

	"                                                                                              ": {
	"scope": "css",
	"prefix": "#background-color",
		"body": [
			"background-color"
		],
	"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#background-image",
		"body": [
			"background-image"
		],
		"description": " "
	},

	"                                                                                                        ": {
	"scope": "css", 
	"prefix": "#background-origin",
		"body": [
			"background-origin"
		],
		"description": " "
	},

	"                                                                                                         ": {
	"scope": "css", 
	"prefix": "#background-position (shorthand)",
		"body": [
			"background-position (shorthand)"
		],
		"description": " "
	},

	"                                                                                                          ": {
	"scope": "css",   
	"prefix": "#background-repeat",
		"body": [
			"background-repeat"
		],
		"description": " "
	},

	"                                                                                                           ": {
	"scope": "css",  
	"prefix": "#background-size",
		"body": [
			"background-size"
				],
		"description": " "
	},

	"                                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#block-size ",
			"body": [
				"block-size"
			],
		"description": "define o tamanho horizontal ou vertical do bloco de um elemento, dependendo do seu modo de escrita"
	},

	"                                                                                                            ": {
	"scope": "css", 
	"prefix": "#border (shorthand)",
		"body": [
			"border"
		],
		"description": " "
	},

	"                                                                                                                             ": {
	"scope": "css", 
	"prefix": "#border-block (shorthand)",
		"body": [
			"border-block"
		],
		"description": " "
	},

	"                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#border-block-end (shorthand)",
		"body": [
			"border-block-end"
		],
		"description": " "
	},

	"                                                                                                                           ": {
	"scope": "css",  
	"prefix": "#border-block-start (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                          ": {
	"scope": "css",   
	"prefix": "#border-bottom (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                         ": {
	"scope": "css",  
	"prefix": "#border-bottom-left-radius",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#border-bottom-right-radius",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#border-collapse",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                      ": {
	"scope": "css", 
	"prefix": "#border-end-end-radius",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#border-image",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                               ": {
	"scope": "css", 
	"prefix": "#border-image-outset",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#border-image-repeat",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#border-image-slice",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#border-image-source",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#border-image-width",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                    ": {
	"scope": "css", 
	"prefix": "#border-inline",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#border-inline-color",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                      ": {
	"scope": "css", 
	"prefix": "#border-inline-end",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#border-inline-end-color",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#border-inline-end-style",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#border-inline-end-width",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#border-inline-start",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#border-inline-start-color",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                             ": {
	"scope": "css", 
	"prefix": "#border-inline-start-style",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#border-inline-start-width",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                               ": {
	"scope": "css", 
	"prefix": "#border-inline-style",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#border-inline-width",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#border-left (shorthand)",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#border-radius",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#border-right (shorthand)",
		"body": [
		],
	"description": " "
	},

	"                                                                                               ": {
	"scope": "css", 
	"prefix": "#border-spacing",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#border-start-end-radius",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#border-start-start-radius",
			"body": [
			],
	"description": " "
	},
	
	"                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#border-top",
			"body": [
			],
	"description": " "
	},
	
	"                                                                                                                                                             ": {
	"scope": "css",  
	"prefix": "#border-top-color",
			"body": [
			],
	"description": " "
	},
	
	"                                                                                                                                                               ": {
	"scope": "css", 
	"prefix": "#border-top-left-radius",
			"body": [
			],
	"description": " "
	},

	"                                                                                                                                                      ": {
	"scope": "css",  
	"prefix": "#border-top-right-radius",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#border-top-style",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#border-top-width",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#box-decoration-break",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#box-shadow",
		"body": [
		],
	"description": "A propriedade CSS box-shadow adiciona efeitos de sombra ao redor do quadro de um elemento"
	},

	"                                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#box-sizing",
		"body": [
		],
	"description": "A propriedade CSS box-sizing define como a largura e altura totais de um elemento são calculadas"
	},

	"                                                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#break-after",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                ": {
	"scope": "css",  
	"prefix": "#break-before",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#break-inside",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#caption-side",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                    ": {
	"scope": "css",   
	"prefix": "#caret-color",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                      ": {
	"scope": "css", 
	"prefix": "#clear",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#clip-path",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#color",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#color-interpolation",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                             ": {
	"scope": "css", 
	"prefix": "#color-scheme",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#column-count",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#column-fill",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                ": {
	"scope": "css",  
	"prefix": "#column-gap",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                               ": {
	"scope": "css",  
	"prefix": "#column-rule (shorthand)",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#column-span",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                         ": {
	"scope": "css",   
	"prefix": "#column-width",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#columns",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#contain",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#contain-intrinsic-block-size",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                             ": {
	"scope": "css",  
	"prefix": "#contain-intrinsic-height",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#contain-intrinsic-inline-size",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#contain-intrinsic-size",
		"body": [
		],
	"description": " "
	},

		"                                                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#contain-intrinsic-width",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#container (shorthand)",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#content",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                      ": {
	"scope": "css",  
	"prefix": "#content-visibility⚠️",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#counter-increment",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#counter-reset",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                    ": {
	"scope": "css", 
	"prefix": "#counter-set",
		"body": [
		],
	"description": " "
	},

	
	"                                                                                                                                                                                               ": {
	"scope": "css", 
	"prefix": "#cursor",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#direction⚠️",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#display",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#empty-cells",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#filter",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#flex",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#flex-basis",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                      ": {
	"scope": "css", 
	"prefix": "#flex-direction",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#flex-flow (shorthand)",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                    ": {
	"scope": "css", 
	"prefix": "#flex-grow",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#flex-shrink",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#flex-wrap",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#float",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#font",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                               ": {
	"scope": "css", 
	"prefix": "#font-family",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#font-feature-settings",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#font-kerning",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#font-language-override",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#font-optical-sizing",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                                    ": {
	"scope": "css", 
	"prefix": "#font-palette",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#font-size",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#font-size-adjust",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                                      ": {
	"scope": "css", 
	"prefix": "#font-stretch",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#font-style",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                                        ": {
	"scope": "css",  
	"prefix": "#font-synthesis (shorthand)",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#font-synthesis-position",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#font-synthesis-small-caps",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                                           ": {
	"scope": "css",  
	"prefix": "#font-synthesis-style",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#font-synthesis-weight",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                                             ": {
	"scope": "css", 
	"prefix": "#font-variant",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#font-variant-alternates",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                                               ": {
		"scope": "css", 
		"prefix": "#font-variant-caps",
			"body": [
			],
		"description": " "
		},

	"                                                                                                                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#font-variant-east-asian",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#font-variant-emoji",
		"body": [
		],
	"description": " "
	},

	"                                                                                                                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#font-variant-ligatures",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#font-variant-numeric",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                    ": {
	"scope": "css", 
	"prefix": "#font-variant-position",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#font-variation-settings",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                      ": {
	"scope": "css", 
	"prefix": "#font-weight",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#forced-color-adjust",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#gap (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#grid (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#grid-area (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                      ": {
	"scope": "css", 
	"prefix": "#grid-auto-columns",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#grid-auto-flow",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                    ": {
	"scope": "css", 
	"prefix": "#grid-auto-rows",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#grid-column",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#grid-column-end",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#grid-column-start",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                               ": {
	"scope": "css",   
	"prefix": "#grid-row",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#grid-row-end",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#grid-row-start",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                             ": {
	"scope": "css",  
	"prefix": "#grid-template",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#grid-template-areas",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#grid-template-columns",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#grid-template-rows",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#hanging-punctuation",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#height",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#hyphenate-character",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#hyphenate-limit-chars",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                               ": {
	"scope": "css", 
	"prefix": "#hyphens",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#image-orientation",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                             ": {
	"scope": "css",  
	"prefix": "#image-rendering",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#image-resolution⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#initial-letter⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#initial-letter-align⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#inline-size",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#inset (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#inset-block (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                      ": {
	"scope": "css",    
	"prefix": "#inset-inline (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#isolation",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                    ": {
	"scope": "css", 
	"prefix": "#justify-content",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#justify-items",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#justify-self",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#justify-tracks⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#left",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                               ": {
	"scope": "css", 
	"prefix": "#letter-spacing",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#line-break",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#line-height",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                             ": {
	"scope": "css", 
	"prefix": "#line-height-step⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#list-style",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#list-style-image",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#list-style-position",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#list-style-type",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#margin",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                      ": {
	"scope": "css", 
	"prefix": "#margin-block (Shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#margin-bottom",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                    ": {
	"scope": "css", 
	"prefix": "#margin-inline",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#margin-left",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#margin-right",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#margin-top",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#margin-trim⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                               ": {
	"scope": "css",  
	"prefix": "#mask",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#mask-border",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                             ": {
	"scope": "css", 
	"prefix": "#mask-border-mode",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#mask-border-outset",
		"body": [
		],
		"description": " "
	},
 
	"                                                                                                                                                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#mask-border-repeat",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                    ": {
	"scope": "css", 
	"prefix": "#mask-border-slice",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                     ": {
	"scope": "css",  
	"prefix": "#mask-border-source",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                      ": {
	"scope": "css", 
	"prefix": "#mask-border-width",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#mask-clip",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#mask-composite",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#mask-image",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#mask-mode",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#mask-origin",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#mask-position",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                             ": {
	"scope": "css", 
	"prefix": "#mask-repeat",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                              ": {
	"scope": "css",  
	"prefix": "#mask-size",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                               ": {
	"scope": "css", 
	"prefix": "#mask-type",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#masonry-auto-flow⚠️luu",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#math-depth",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#math-shift⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                      ": {
	"scope": "css", 
	"prefix": "#math-style",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#max-block-size",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#max-height",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                    ": {
	"scope": "css", 
	"prefix": "#max-inline-size",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#max-width",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                               ": {
	"scope": "css", 
	"prefix": "#min-block-size",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#min-height",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#min-inline-size",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#min-width",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                             ": {
	"scope": "css", 
	"prefix": "#mix-blend-mode",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#object-fit",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#object-position",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                          ": {
	"scope": "css",  
	"prefix": "#offset ",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#offset-anchor",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#offset-distance",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#offset-path",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                      ": {
	"scope": "css", 
	"prefix": "#offset-position",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#offset-rotate",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                    ": {
	"scope": "css", 
	"prefix": "#opacity",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#order",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#orphans",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#outline (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#outline-color",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                               ": {
	"scope": "css", 
	"prefix": "#outline-offset",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#outline-style",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                             ": {
	"scope": "css", 
	"prefix": "#outline-width",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#overflow",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#overflow-anchor",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#overflow-block",
		"body": [
		],
		"description": " "
	},
	
	"                                                                                                                                                                                                                                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#overflow-clip-margin",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#overflow-inline",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                      ": {
	"scope": "css",  
	"prefix": "#overflow-wrap",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#overflow-x",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#overflow-y",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#overlay⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                    ": {
	"scope": "css",  
	"prefix": "#overscroll-behavior (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#overscroll-behavior-block",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#overscroll-behavior-inline",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#padding (shorthand)",
		"body": [
		],
		"description": " "
	},
	
	"                                                                                                                                                                                                                                                                                                                                               ": {
	"scope": "css", 
	"prefix": "#padding-block (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#padding-inline (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                             ": {
	"scope": "css", 
	"prefix": "#page",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#page-break-after",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#page-break-before",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#page-break-inside",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                 ": {
	"scope": "css",  
	"prefix": "#paint-order",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#perspective",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                               ": {
	"scope": "css", 
	"prefix": "#perspective-origin",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                             ": {
	"scope": "css",  
	"prefix": "#place-content",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#place-items (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#place-self (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#pointer-events",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#position",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#print-color-adjust",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#quotes",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#resize",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#right",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                      ": {
	"scope": "css", 
	"prefix": "#rotate",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                    ": {
	"scope": "css", 
	"prefix": "#row-gap",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#ruby-align⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#ruby-position",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                               ": {
	"scope": "css", 
	"prefix": "#scale",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#scroll-behavior",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                ": {
	"scope": "css",  
	"prefix": "#scroll-margin (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                             ": {
	"scope": "css", 
	"prefix": "#scroll-margin-block (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#scroll-margin-inline (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#scroll-padding (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#scroll-padding-block (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#scroll-padding-inline (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#scroll-snap-align",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#scroll-snap-stop",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#scroll-snap-type",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                      ": {
	"scope": "css", 
	"prefix": "#scroll-timeline⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                    ": {
	"scope": "css", 
	"prefix": "#scroll-timeline-axis⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#scroll-timeline-name⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#scrollbar-color",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#scrollbar-gutter",
		"body": [
		],
		"description": " "
	},

		"                                                                                                                                                                                                                                                                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#scrollbar-width",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#shape-image-threshold",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#shape-margin",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                               ": {
	"scope": "css", 
	"prefix": "#shape-outside",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                             ": {
	"scope": "css", 
	"prefix": "#tab-size",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#table-layout",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#text-align",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#text-align-last",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#text-combine-upright",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#text-decoration",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#text-decoration-color",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                      ": {
	"scope": "css", 
	"prefix": "#text-decoration-line",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#text-decoration-skip⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                    ": {
	"scope": "css", 
	"prefix": "#text-decoration-skip-ink",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#text-decoration-style",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#text-decoration-thickness",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#text-emphasis",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#text-emphasis-color",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                               ": {
	"scope": "css", 
	"prefix": "#text-emphasis-position",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#text-emphasis-style",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                             ": {
	"scope": "css", 
	"prefix": "#text-indent",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#text-justify",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#text-orientation",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#text-overflow",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#text-rendering",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#text-shadow",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#text-size-adjust⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                      ": {
	"scope": "css", 
	"prefix": "#text-transform",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#text-underline-offset",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                    ": {
	"scope": "css", 
	"prefix": "#text-underline-position",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#text-wrap",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#timeline-scope⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#top",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#touch-action",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                               ": {
	"scope": "css", 
	"prefix": "#transform",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#transform-box",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                             ": {
	"scope": "css", 
	"prefix": "#transform-origin",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#transform-style",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#transition (shorthand)",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#transition-behavior",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#transition-delay",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#transition-duration",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#transition-property",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                      ": {
	"scope": "css", 
	"prefix": "#transition-timing-function",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#translate",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                    ": {
	"scope": "css", 
	"prefix": "#unicode-bidi",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#user-select",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                  ": {
	"scope": "css", 
	"prefix": "#vertical-align",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                 ": {
	"scope": "css", 
	"prefix": "#view-timeline⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                                ": {
	"scope": "css", 
	"prefix": "#view-timeline-axis⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                               ": {
	"scope": "css", 
	"prefix": "#view-timeline-inset⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                              ": {
	"scope": "css", 
	"prefix": "#view-timeline-name⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                             ": {
	"scope": "css", 
	"prefix": "#view-transition-name⚠️",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                            ": {
	"scope": "css", 
	"prefix": "#visibility",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                           ": {
	"scope": "css", 
	"prefix": "#white-space",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                          ": {
	"scope": "css", 
	"prefix": "#white-space-collapse",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                         ": {
	"scope": "css", 
	"prefix": "#widows",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                        ": {
	"scope": "css", 
	"prefix": "#width",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                       ": {
	"scope": "css", 
	"prefix": "#will-change",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                      ": {
	"scope": "css", 
	"prefix": "#word-break",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                     ": {
	"scope": "css", 
	"prefix": "#word-spacing",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                    ": {
	"scope": "css", 
	"prefix": "#writing-mode",
		"body": [
		],
		"description": " "
	},

	"                                                                                                                                                                                                                                                                                                                                                                                                                   ": {
	"scope": "css",  
	"prefix": "#z-index",
		"body": [
		],
		"description": " "
	},

	/*
	"                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ": {
	"scope": "css", 
	"prefix": "#",
		"body": [
		],
		"description": " "
	},*/
	
/***************************************************************************************************/
//																C# Codigo
/***************************************************************************************************/

	"C# 1.1": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"class Program",
			"{",
			"    static async Task<int> Main(string[] args)",
			"    {",
			"        return await AsyncConsoleWork();",
			"    }",
			"",
			"    private static async Task<int> AsyncConsoleWork()",
			"    {",
			"        // main body here ",
			"        return 0;",
			"    }",
			"}",
		],
	"description": "Main declarado async"
	},

	"C# 1.2": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"MyClass.TestMethod();",
			"MyNamespace.MyClass.MyMethod();",
			"",
			"public class MyClass",
			"{",
			"    public static void TestMethod()",
			"    {",
			"        Console.WriteLine('Hello World!');",
			"    }",
			"}",
			"",
			"namespace MyNamespace",
			"{",
			"    class MyClass",
			"    {",
			"        public static void MyMethod()",
			"        {",
			"            Console.WriteLine('Hello World from MyNamespace.MyClass.MyMethod!');",
			"        }",
			"    }",
			"}",
					],
	"description": "Instruição de nivel superior"
	},

	"C# 1.3": {
	"scope": "csharp",
	"prefix": "_codigo",
			"body": [
				"public enum FileMode",
				"{",
				"    CreateNew = 1,",
				"    Create = 2,",
				"    Open = 3,",
				"    OpenOrCreate = 4,",
				"    Truncate = 5,",
				"    Append = 6,",
				"}",
						],
	"description": "Enum"
	},

	"C# 1.4": {
	"scope": "csharp",
	"prefix": "_codigo",
				"body": [
				"System.Console.WriteLine('Hello World!');",
				"",
				"using System;",
				"Console.WriteLine('Hello World!');",
							],
	"description": "Diretiva using em ação eliminando o uso de System no codigo"
	},

	"C# 1.5": {
	"scope": "csharp",
	"prefix": "_codigo",
					"body": [
					"namespace SampleNamespace",
					"{",
					"    class SampleClass",
					"    {",
					"        public void SampleMethod()",
					"        {",
					"            System.Console.WriteLine(",
					"                'SampleMethod inside SampleNamespace');",
					"        }",
					"    }",
					"}",
								],
	"description": "Namespace com chaves"
	},

	"C# 1.6": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
		"namespace SampleNamespace;",
		"",
		"class AnotherSampleClass",
		"{",
		"    public void AnotherSampleMethod()",
		"    {",
		"       System.Console.WriteLine(",
		"            'SampleMethod inside SampleNamespace');",
		"    }",
		"}",
									],
	"description": "Namespace global"
	},

	"C# 1.7": {
	"scope": "csharp",
	"prefix": "_codigo",
			"body": [
				"public class Person",
				"{",
				"    public required string LastName { get; set; }",
				"    public required string FirstName { get; set; }",
				"}",
				"",
				"var p1 = new Person(); // Error! Required properties not set",
				"var p2 = new Person() { FirstName = 'Grace', LastName = 'Hopper' };",
										],
	"description": "Membro com required e inicializador de objeto"
	},


	"C# 1.8": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class Container(int capacity)",
			"{",
			"    private int _capacity = capacity;",
			"}",
				],
	"description": "Classe com construtor primario"
	},


	"C# 1.9": {
	"scope": "csharp",
	"prefix": "_codigo",
			"body": [
				"public record Person(string FirstName, string LastName);",
				"",
				"public static class Program",
				"{",
				"    public static void Main()",
				"    {",
				"        Person person = new('Nancy', 'Davolio');",
				"        Console.WriteLine(person);",
				"        // output: Person { FirstName = Nancy, LastName = Davolio }",
				"    }",
				"",
				"}",				
						],
	"description": "Uso simples de record"
	},

	"C# 2.1": {
	"scope": "csharp",
	"prefix": "_codigo",
			"body": [
				"public record Person(string FirstName, string LastName)",
				"{",
				"    public required string[] PhoneNumbers { get; init; }",
				"}",
				"",
				"public class Program",
				"{",
				"    public static void Main()",
				"    {",
				"        Person person1 = new('Nancy', 'Davolio') { PhoneNumbers = new string[1] };",
				"        Console.WriteLine(person1);",
				"        // output: Person { FirstName = Nancy, LastName = Davolio, PhoneNumbers = System.String[] }",
				"",
				"        Person person2 = person1 with { FirstName = 'John' };",
				"        Console.WriteLine(person2);",
				"        // output: Person { FirstName = John, LastName = Davolio, PhoneNumbers = System.String[] }",
				"        Console.WriteLine(person1 == person2); // output: False",
				"",
				"        person2 = person1 with { PhoneNumbers = new string[1] };",
				"        Console.WriteLine(person2);",
				"        // output: Person { FirstName = Nancy, LastName = Davolio, PhoneNumbers = System.String[] }",
				"        Console.WriteLine(person1 == person2); // output: False",
				"",
				"        person2 = person1 with { };",
				"        Console.WriteLine(person1 == person2); // output: True",
				"    }",
				"}",		
						],
	"description": "Uso record com with"
	},

	"C# 2.2": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public record Person(string FirstName, string LastName)",
			"{",
			"    public required string[] PhoneNumbers { get; init; }",
			"}",
			"",
			"public class Program",
			"{",
			"    public static void Main()",
			"    {",
			"        Person person1 = new('Nancy', 'Davolio') { PhoneNumbers = new string[1] };",
			"        Console.WriteLine(person1);",
			"        // output: Person { FirstName = Nancy, LastName = Davolio, PhoneNumbers = System.String[] }",
			"",
			"        Person person2 = person1 with { FirstName = 'John' };",
			"        Console.WriteLine(person2);",
			"        // output: Person { FirstName = John, LastName = Davolio, PhoneNumbers = System.String[] }",
			"        Console.WriteLine(person1 == person2); // output: False",
			"",
			"        person2 = person1 with { PhoneNumbers = new string[1] };",
			"        Console.WriteLine(person2);",
			"        // output: Person { FirstName = Nancy, LastName = Davolio, PhoneNumbers = System.String[] }",
			"        Console.WriteLine(person1 == person2); // output: False",
			"",
			"        person2 = person1 with { };",
			"        Console.WriteLine(person1 == person2); // output: True",
			"    }",
			"}",						
			],
	"description": "Uso record mais complicadinho"
	},

	"C# 2.3": {
	"scope": "csharp",
	"prefix": "_codigo",
			"body": [
				"var v = new { Amount = 108, Message = 'Hello' };",
				"",
				"Console.WriteLine(v.Amount + v.Message);",
				],
	"description": "Tipo anonimo"
		},

	"C# 2.4": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"var product = new Product();",
			"var bonus = new { note = 'You won!' };",
			"var shipment = new { address = 'Nowhere St.', product };",
			"var shipmentWithBonus = new { address = 'Somewhere St.', product, bonus };",
			],
	"description": "Tipo anonimo com um membro mais complexo"
	},

	"C# 2.5": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"var anonArray = new[] { new { name = 'apple', diam = 4 }, new { name = 'grape', diam = 1 }}"
			],
	"description": "Matriz com tipo anonimo"
	},

	"C# 2.6": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"var apple = new { Item = '0apples', Price = 1.35 };",
			"var onSale = apple with { Price = 0.79 };",
			"Console.WriteLine(apple);",
			"Console.WriteLine(onSale);",
			],
	"description": "Mutação com with em tipo anonimo"
	},

	"C# 2.7": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"using System;",
			"",
			"namespace Example",
			"{",
			"    public struct Person",
			"    {",
			"        public string Name;",
			"        public int Age;",
			"        public Person(string name, int age)",
			"        {",
			"            Name = name;",
			"            Age = age;",
			"        }",
			"    }",
			"",
			"    public class Application",
			"    {",
			"        static void Main()",
			"        {",
			"            // Crie uma instância de struct e inicialize usando 'new'.",
			"            // A memória é alocada na pilha de threads",
			"            Person p1 = new Person('Alex', 9);",
			"            Console.WriteLine('p1 Name = {0} Age = {1}', p1.Name, p1.Age);",
			"",
			"            // cria um novo objeto struct. Observe que struct pode ser inicializado",
			"            // sem usar 'novo'.",
			"            Person p2 = p1;",
			"",
			"            // Assign values to p2 members.",
			"            p2.Name = 'Spencer';",
			"            p2.Age = 7;",
			"            Console.WriteLine('p2 Name = {0} Age = {1}', p2.Name, p2.Age);",
			"",
			"            // p1 values remain unchanged because p2 is  copy.",
			"            Console.WriteLine('p1 Name = {0} Age = {1}', p1.Name, p1.Age);",
			"        }",
			"    }",
			"",
			"        Output:",
			"        p1 Name = Alex Age = 9",
			"        p2 Name = Spencer Age = 7",
			"        p1 Name = Alex Age = 9",
			"",    
			" }",						
			],
	"description": "Criando uma struct com new e tambem a partir de um objeto struct ja criado sem usar new"
	},

	"C# 2.8": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class Shape",
			"{",
			"    // A few example members",
			"    public int X { get; private set; }",
			"    public int Y { get; private set; }",
			"    public int Height { get; set; }",
			"    public int Width { get; set; }",
			"",
			"    // Virtual method",
			"    public virtual void Draw()",
			"    {",
			"        Console.WriteLine('Performing base class drawing tasks');",
			"    }",
			"}",
			"",
			"public class Circle : Shape",
			"{",
			"    public override void Draw()",
			"    {",
			"        // Code to draw a circle...",
			"        Console.WriteLine('Drawing a circle');",
			"        base.Draw();",
			"    }",
			"}",
			"public class Rectangle : Shape",
			"{",
			"    public override void Draw()",
			"    {",
			"        // Code to draw a rectangle...",
			"        Console.WriteLine('Drawing a rectangle');",
			"        base.Draw();",
			"    }",
			"}",
			"public class Triangle : Shape",
			"{",
			"    public override void Draw()",
			"    {",
			"        // Code to draw a triangle...",
			"        Console.WriteLine('Drawing a triangle');",
			"        base.Draw();",
			"    }",
			"}",			
			],
	"description": "Override em metodo virtual"
	},

	"C# 2.9": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class BaseClass",
			"{",
			"    public void DoWork() { WorkField++; }",
			"    public int WorkField;",
			"    public int WorkProperty",
			"    {",
			"        get { return 0; }",
			"    }",
			"}",
			"",
			"public class DerivedClass : BaseClass",
			"{",
			"    public new void DoWork() { WorkField++; }",
			"    public new int WorkField;",
			"    public new int WorkProperty",
			"    {",
			"        get { return 0; }",
			"    }",
			"}",						
			],
	"description": "Ocultar membro com new"
	},

	"C# 3.1": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"DerivedClass B = new DerivedClass();",
			"B.DoWork();  // Calls the new method.",
			"",
			"BaseClass A = (BaseClass)B;",
			"A.DoWork();  // Calls the old method.",
			],
	"description": "Membro ocultado com new sendo convertido para chamar o metodo da classe base que foi ocultado"
	},

	"C# 3.2": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class A",
			"{",
    	"public virtual void DoWork() { }",
			"}",
			"public class B : A",
			"{",
    	"public override void DoWork() { }",
			"}",		
			"",
			"public class C : B",
			"{",
    	"public sealed override void DoWork() { }",
			"}",
			],
	"description": "Polimorfismo e selead"
	},

	"C# 3.3": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class Base",		
			"{",		
			"    public virtual void DoWork() {////}",		
			"}",		
			"public class Derived : Base",		
			"{",		
			"    public override void DoWork()",		
			"    {",		
			"        //Perform Derived's work here",		
			"        //...",		
			"        // Call DoWork on base class",		
			"        base.DoWork();",		
			"    }",		
			"}",						
			],
	"description": "Usando base palavra chave"
	},

	"C# 3.4": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class Example",
			"{",
			"    public static void Main()",
			"    {",
			"        var result = QueryCityData('New York City');",
			"",
			"        var city = result.Item1;",
			"        var pop = result.Item2;",
			"        var size = result.Item3;",
			"",
			"         // Do something with the data.",
			"    }",
			"",
			"    private static (string, int, double) QueryCityData(string name)",
			"    {",
			"        if (name == 'New York City)",
			"            return (name, 8175133, 468.48);",
			"",
			"        return ('', 0, 0);",
			"    }",
			"}",		
			"",
			"",
			"public static void Main()",
			"{",
			"    (string city, int population, double area) = QueryCityData(''New York City'');",
			"",
			"    // Do something with the data.",
			"}",
			"",
			"///////////////////////////////////////////////////////////////",
			"",
			"public static void Main()",
			"{",
			"    var (city, population, area) = QueryCityData('New York City');",
			"",
			"    // Do something with the data.",
			"}",
			"",
			"///////////////////////////////////////////////////////////////",
			"",
			"public static void Main()",
			"{",
			"    string city = 'Raleigh';",
			"    int population = 458880;",
			"",
			"    (city, population, double area) = QueryCityData('New York City');",
			"",
			"    // Do something with the data.",
			"}",
			],
	"description": "Usando tupla +1 forma"
	},

	"C# 3.5": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"using System;",
			"",
			"public class ExampleDiscard",
			"{",
			"    public static void Main()",
			"    {",
			"        var (_, _, _, pop1, _, pop2) = QueryCityDataForYears('New York City', 1960, 2010);",
			"",
			"       Console.WriteLine($'Population change, 1960 to 2010: {pop2 - pop1:N0}');",
			"    }",
			"",
			"    private static (string, double, int, int, int, int) QueryCityDataForYears(string name, int year1, int year2)",
			"    {",
			"        int population1 = 0, population2 = 0;",
			"        double area = 0;",
			"",
			"        if (name == 'New York City')",
			"        {",
			"            area = 468.48;",
			"            if (year1 == 1960)",
			"            {",
			"                population1 = 7781984;",
			"            }",
			"            if (year2 == 2010)",
			"            {",
			"                population2 = 8175133;",
			"            }",
			"            return (name, area, year1, population1, year2, population2);",
			"        }",
			"",
			"       return ('', 0, 0, 0, 0, 0);",
			"    }",
			"}",
			"// The example displays the following output:",
			"//      Population change, 1960 to 2010: 393,149",

			],
	"description": "Desconstruindo tupla"
	},

	"C# 3.6": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"using System;",
			"",
			"public class Person",
			"{",
			"    public string FirstName { get; set; }",
			"    public string MiddleName { get; set; }",
			"    public string LastName { get; set; }",
			"    public string City { get; set; }",
			"    public string State { get; set; }",
			"",
			"    public Person(string fname, string mname, string lname,",
			"                  string cityName, string stateName)",
			"    {",
			"        FirstName = fname;",
			"        MiddleName = mname;",
			"        LastName = lname;",
			"        City = cityName;",
			"        State = stateName;",
			"    }",
			"",
			"    // Return the first and last name.",
			"    public void Deconstruct(out string fname, out string lname)",
			"    {",
			"        fname = FirstName;",
			"        lname = LastName;",
			"    }",
			"",
			"    public void Deconstruct(out string fname, out string mname, out string lname)",
			"    {",
			"        fname = FirstName;",
			"        mname = MiddleName;",
			"        lname = LastName;",
			"    }",
			"",
			"    public void Deconstruct(out string fname, out string lname,",
			"                            out string city, out string state)",
			"    {",
			"        fname = FirstName;",
			"        lname = LastName;",
			"        city = City;",
			"        state = State;",
			"    }",
			"}",
			"",
			"public class ExampleClassDeconstruction",
			"{",
			"    public static void Main()",
			"    {",
			"        var p = new Person('John', 'Quincy', 'Adams', 'Boston', 'MA');",
			"",
			"        // Deconstruct the person object.",
			"        var (fName, lName, city, state) = p;",
			"        Console.WriteLine($'Hello {fName} {lName} of {city}, {state}!');",
			"    }",
			"}",
			"// The example displays the following output:",
			"//    Hello John Adams of Boston, MA!",
			],
	"description": "Desconstruindo tupla com Desconstruct metodo"
	},

	"C# 3.7": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"class Person",
			"{",
			"    public string Name { get; set; }",
			"   public int Age { get; set; }",
			"",
			"    public override string ToString()",
			"    {",
			"        return 'Person: ' + Name + ' ' + Age;'",
			"    }",
			"}",						
			],
	"description": "Override metodo toString() object"
	},

	"C# 3.8": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public abstract class A",
			"{",
			"    public abstract void DoWork(int i);",
			"}",							
			],
	"description": "Classe e metodo abstract"
	},

	"C# 3.9": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"// compile with: -target:library",
			"public class D",
			"{",
			"    public virtual void DoWork(int i)",
			"    {",
			"        // Original implementation.",
			"    }",
			"}",
			"",
			"public abstract class E : D",
			"{",
			"    public abstract override void DoWork(int i);",
			"}",
			"",
			"public class F : E",
			"{",
			"    public override void DoWork(int i)",
			"    {",
			"       // New implementation.",
			"    }",
			"}",						
			],
	"description": "Classe abstract transformando um metodo virtual em abstract"
	},

	"C# 4.1": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class D : C",
			"{",
			"    public sealed override void DoWork() { }",
			"}",
			],
	"description": "Acabando com a herança virtual com selead"
	},

	"C# 4.2": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public sealed class D : C",
			"{",
    		"public sealed override void DoWork() { }",
			"    // Class members here.",
			"}",
			],
	"description": "Classe e metodo selead"
	},

	"C# 4.3": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"class Calendar2",
			"{",	
			"    public const int Months = 12, Weeks = 52, Days = 365;",
			"}",
			"",
			"int birthstones = Calendar.Months;",
			],
	"description": "Criar e acessar uma constante"
	},

	"C# 4.4": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"// compile with: csc -target:library abstractshape.cs",
			"public abstract class Shape",
			"{",
			"    private string name;",
			"",
			"    public Shape(string s)",
			"    {",
			"        // calling the set accessor of the Id property.",
			"        Id = s;",
			"   }",
			"",
			"    public string Id",
			"   {",
			"        get",
			"        {",
			"            return name;",
			"        }",
			"",
			"        set",
			"        {",
			"            name = value;",
			"        }",
			"    }",
			"",
			"    // Area is a read-only property - only a get accessor is needed:",
			"    public abstract double Area",
			"    {",
			"        get;",
			"    }",
			"",
			"    public override string ToString()",
			"    {",
			"        return $'{Id} Area = {Area:F2}'';",
			"    }",
			"}",			
			"",
			"",
			"public class Square : Shape",
			"{",
			"   private int side;",
			"",
			"    public Square(int side, string id)",
			"        : base(id)",
			"    {",
			"        this.side = side;",
			"    }",
			"",
			"    public override double Area",
			"    {",
			"        get",
			"        {",
			"            // Given the side, return the area of a square:",
			"            return side * side;",
			"        }",
			"    }",
			"}",
			],
	"description": "Classe abstract"
	},

	"C# 4.5": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"static class Constants",
			"{",
			"    public const double Pi = 3.14159;",
			"    public const int SpeedOfLight = 300000; // km per sec.",
			"}",
			"",
			"class Program",
			"{",
			"    static void Main()",
			"    {",
			"        double radius = 5.3;",
			"        double area = Constants.Pi * (radius * radius);",
			"        int secsFromSun = 149476000 / Constants.SpeedOfLight; // in km",
			"        Console.WriteLine(secsFromSun);",
			"    }",
			"}",
			],
	"description": "Class constante"
	},

	"C# 4.6": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"using System;",
			"",
			"public class ",
			"{",
			"    // Declaração de um campo readonly e static",
			"    public static readonly int Numero = 10;",
			"}",
			"",
			"class Program",
			"{",
			"    static void Main(string[] args)",
			"    {",
			"       // Acesso ao campo readonly e static",
			"        Console.WriteLine(MyClass.Numero); // Saída: 10",
			"",
			"        // Tentativa de modificar o valor do campo (não é possível, pois é readonly)",
			"        // MyClass.Numero = 20; // Isso resultará em um erro de compilação",
			"    }",
			"}",						
			],
	"description": "Campo static reandoly"
	},

	"C# 4.7": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class TimePeriod",
			"{",
			"    private double _seconds;",
			"",
			"    public double Hours",
			"    {",
			"        get { return _seconds / 3600; }",
			"        set",
			"        {",
			"            if (value < 0 || value > 24)",
			"                throw new ArgumentOutOfRangeException(nameof(value),",
			"                     'The valid range is between 0 and 24.');",
			"",
			"            _seconds = value * 3600;",
			"        }",
			"    }",
			"}",						
			],
	"description": "Propriedade"
	},

	"C# 4.8": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class Person",
			"{",
			"    private string _firstName;",
			"    private string _lastName;",
			"",
			"    public Person(string first, string last)",
			"    {",
			"        _firstName = first;",
			"        _lastName = last;",
			"    }",
			"",
			"    public string Name => $'{_firstName} {_lastName}';",
			"}",						
			],
	"description": "Sintaxe simples para propriedade somente leitura com membro apto de expressao"
	},

	"C# 4.9": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class SaleItem",
			"{",
			"    string _name;",
			"    decimal _cost;",
			"",
			"    public SaleItem(string name, decimal cost)",
			"    {",
			"        _name = name;",
			"        _cost = cost;",
			"    }",
			"",
			"    public string Name",
			"    {",
			"        get => _name;",
			"        set => _name = value;",
			"    }",
			"",
			"    public decimal Price",
			"    {",
			"        get => _cost;",
			"        set => _cost = value;",
			"    }",
			"}",						
			],
	"description": "Propriedade com membro apto de expressao"
	},

	"C# 5.1": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class SaleItem",
			"{",	
			"    public string Name",
			"    { get; set; }",
			"",
			"    public decimal Price",
			"   { get; set; }",
			"}",						
			],
	"description": "Propriedade auto-implementada"
	},

	"C# 5.2": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class SaleItem",
			"{",
			"    public required string Name",
			"    { get; set; }",
			"",
			"    public required decimal Price",
			"    { get; set; }",
			"}",
			],
	"description": "Propriedade auto-implementada required"
	},

	"C# 5.3": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"interface IEmployee",
			"{",
			"    string Name",
			"    {",
			"        get;",
			"        set;",
			"    }",
			"",
			"    int Counter",
			"    {",
			"        get;",
			"    }",
			"}",
			"",
			"public class Employee : IEmployee",
			"{",
			"    public static int numberOfEmployees;",
			"",
			"   private string _name;",
			"    public string Name  // read-write instance property",
			"    {",
			"        get => _name;",
			"        set => _name = value;",
			"   }",
			"",
			"    private int _counter;",
			"    public int Counter  // read-only instance property",
			"    {",
			"        get => _counter;",
			"    }",
			"",
			"    // constructor",
			"    public Employee() => _counter = ++numberOfEmployees;",
			"}",

			],
	"description": "Propriedade em interface"
	},


	"C# 5.4": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"private string _name = 'Hello';",
			"",
			"public string Name",
			"{",
			"    get",
			"    {",
			"        return _name;",
			"    }",
			"    protected set",
			"    {",
			"        _name = value;",
			"    }",
			"}",						
			],
	"description": "Propriedade com modificador de acesso"
	},

	"C# 5.5": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public string FirstName { get; set; } = 'Jane';",
			],
	"description": "Inicializar propriedade auto-implementada"
	},

	"C# 5.6": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public ref double GetEstimatedDistance()",
			"{",
			"    return ref estDistance;",
			"}",
			],
	"description": "Retornar valor por ref"
	},

	"C# 5.7": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"ref double distance = ref Planet.GetEstimatedDistance();",
			],
	"description": "Usar uma ref local"
	},

	"C# 5.8": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"class Program",
			"{",
			"    static Task Main() => DoSomethingAsync();",
			"",
			"    static async Task DoSomethingAsync()",
			"    {",
			"        Task<int> delayTask = DelayAsync();",
			"        int result = await delayTask;",
			"",
			"        // The previous two statements may be combined into",
			"        // the following statement.",
			"        //int result = await DelayAsync();",
			"",
			"        Console.WriteLine($'Result: {result}');",
			"    }",
			"",
			"    static async Task<int> DelayAsync()",
			"    {",
			"        await Task.Delay(100);",
			"        return 5;",
			"    }",
			"}",
			"// Example output:",
			"//   Result: 5",			
			],
	"description": "Metodo async"
	},

	"C# 5.9": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"namespace ExtensionMethods",
			"{",
			"    public static class MyExtensions",
			"    {",
			"        public static int WordCount(this string str)",
			"        {",
			"            return str.Split(new char[] { ' ', '.', '?' },",
			"                             StringSplitOptions.RemoveEmptyEntries).Length;",
			"        }",
			"    }",
			"}",
			"",
			"",
			"using ExtensionMethods;",
			"",
			"string s = 'Hello Extension Methods';",
			"int i = s.WordCount();",
			],
	"description": "Metodo de extensao"
	},

	"C# 6.1": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"class Car",
			"{",
			"    ~Car()  // finalizer",
			"    {",
			"        // cleanup statements...",
			"    }",
			"}",						
			],
	"description": "Finalizador"
	},

	"C# 6.2": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"// A skeleton of a C# program",
			"using System;",
			"",
			"// Your program starts here:",
			"Console.WriteLine('Hello world!');",
			"",
			"namespace YourNamespace",
			"{",
			"    class YourClass",
			"    {",
			"    }",
			"",
			"    struct YourStruct",
			"    {",
			"    }",
			"",
			"    interface IYourInterface",
			"    {",
			"    }",
			"",
			"    delegate int YourDelegate();",
			"",
			"    enum YourEnum",
			"    {",
			"    }",
			"",
			"    namespace YourNestedNamespace",
			"    {",
			"        struct YourStruct",
			"        {",
			"        }",
			"    }",
			"}",
			],
	"description": "Um namespace dentro aninhado em outro namespace"
	},

	"C# 6.3": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"class Program",
			"{",
			"    static async Task<int> Main(string[] args)",
			"    {",
			"        return await AsyncConsoleWork();",
			"    }",
			"",
			"    private static async Task<int> AsyncConsoleWork()",
			"    {",
			"        // main body here ",
			"        return 0;",
			"    }",
			"}",
			],
	"description": "Main async return"
	},

	"C# 6.4": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public record Person(string FirstName, string LastName);",
			"",
			"public static class Program",
			"{",
			"    public static void Main()",
			"    {",
			"        Person person = new('Nancy', 'Davolio');",
			"        Console.WriteLine(person);",
			"        // output: Person { FirstName = Nancy, LastName = Davolio }",
			"    }",
			"",
			"}",						
			],
	"description": "Record simples"
	},

	"C# 6.5": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public record Person(string FirstName, string LastName)",
			"{",
			"    public required string[] PhoneNumbers { get; init; }",
			"}",
			"",
			"public class Program",
			"{",
			"    public static void Main()",
			"    {",
			"        Person person1 = new('Nancy', 'Davolio') { PhoneNumbers = new string[1] };",
			"        Console.WriteLine(person1);",
			"        // output: Person { FirstName = Nancy, LastName = Davolio, PhoneNumbers = System.String[] }",
			"",
			"        Person person2 = person1 with { FirstName = 'John' };",
			"        Console.WriteLine(person2);",
			"        // output: Person { FirstName = John, LastName = Davolio, PhoneNumbers = System.String[] }",
			"        Console.WriteLine(person1 == person2); // output: False",
			"",
			"        person2 = person1 with { PhoneNumbers = new string[1] };",
			"        Console.WriteLine(person2);",
			"        // output: Person { FirstName = Nancy, LastName = Davolio, PhoneNumbers = System.String[] }",
			"        Console.WriteLine(person1 == person2); // output: False",
			"",
			"        person2 = person1 with { };",
			"        Console.WriteLine(person1 == person2); // output: True",
			"    }",
			"}",
			],
	"description": "Record com propriedade required"
	},

	"C# 6.6": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"using System;",
			"",
			"public class Person",
			"{",
			"    public string Name { get; set; }",
			"    public int Age { get; set; }",
			"    public Person(string name, int age)",
			"    {",
			"        Name = name;",
			"        Age = age;",
			"    }",
			"    // Other properties, methods, events...",
			"}",
			"",
			"class Program",
			"{",
			"    static void Main()",
			"    {",
			"        Person person1 = new Person('Leopold', 6);",
			"        Console.WriteLine('person1 Name = {0} Age = {1}', person1.Name, person1.Age);",
			"",
			"        // Declare new person, assign person1 to it.",
			"        Person person2 = person1;",
			"",
			"        // Change the name of person2, and person1 also changes.",
			"        person2.Name = 'Molly';",
			"        person2.Age = 16;",
			"",
			"        Console.WriteLine('person2 Name = {0} Age = {1}', person2.Name, person2.Age);",
			"        Console.WriteLine('person1 Name = {0} Age = {1}', person1.Name, person1.Age);",
			"    }",
			"}",
			"/*",
			"    Output:",
			"    person1 Name = Leopold Age = 6",
			"    person2 Name = Molly Age = 16",
			"    person1 Name = Molly Age = 16",
			"*/",
			],
	"description": "Codigo simples e basico com uma class, construtor e propriedades"
	},

	"C# 6.7": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class BaseClass",
			"{",
			"    public void DoWork() { WorkField++; }",
			"    public int WorkField;",
			"    public int WorkProperty",
			"    {",
			"        get { return 0; }",
			"    }",
			"}",
			"",
			"public class DerivedClass : BaseClass",
			"{",
			"    public new void DoWork() { WorkField++; }",
			"    public new int WorkField;",
			"    public new int WorkProperty",
			"    {",
			"        get { return 0; }",
			"    }",
			"}",						
			],
	"description": "Uso do modificador new em metodos nao virtuais"
	},

	"C# 6.8": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"class Person",
			"{",
			"    public string Name { get; set; }",
			"    public int Age { get; set; }",
			"",
			"    public override string ToString()",
			"    {",
			"        return 'Person: ' + Name + ' ' + Age;'",
			"    }",
			"}",						
			],
	"description": "Substituir metodo toString()"
	},

	"C# 6.9": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"// compile with: -target:library",
			"public class D",
			"{",
			"    public virtual void DoWork(int i)",
			"    {",
			"        // Original implementation.",
			"    }",
			"}",
			"",
			"public abstract class E : D",
			"{",
			"    public abstract override void DoWork(int i);",
			"}",
			"",
			"public class F : E",
			"{",
			"    public override void DoWork(int i)",
			"    {",
			"        // New implementation.",
			"    }",
			"}",						
			],
	"description": "Abstract herdando de uma classe e transformando um metodo virtual em abstract, para depois quem herdar do metodo abstract dar override"
	},

	"C# 7.1": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"switch (selection)",
			"        {",
			"            case '1':",
			"                Console.Write('Please enter the Celsius temperature: ');",
			"                F = TemperatureConverter.CelsiusToFahrenheit(Console.ReadLine() ?? '0');",
			"                Console.WriteLine(''Temperature in Fahrenheit: {0:F2}'', F);",
			"                break;",
			"",
			"            case ''2'':",
			"                Console.Write(''Please enter the Fahrenheit temperature: '');",
			"                C = TemperatureConverter.FahrenheitToCelsius(Console.ReadLine() ?? ''0'');",
			"                Console.WriteLine(''Temperature in Celsius: {0:F2}'', C);",
			"                break;",
			"",
			"            default:",
			"                Console.WriteLine(''Please select a convertor.'');",
			"                break;",
			"        }",
			"",						
			],
	"description": "switch"
	},

	"C# 7.2": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class Automobile",
			"{",
			"    public static int NumberOfWheels = 4;",
			"",
			"    public static int SizeOfGasTank",
			"    {",
			"        get",
			"        {",
			"            return 15;",
			"        }",
			"    }",
			"",
			"    public static void Drive() { }",
			"",
			"    public static event EventType? RunOutOfGas;",
			"",
			"    // Other non-static fields and properties...",
			"}",						
			],
	"description": "Campo, propriedade e metodo static"
	},

	"C# 7.3": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"class Calendar3",
			"{",
			"    public const int Months = 12;",
			"    public const int Weeks = 52;",
			"    public const int Days = 365;",
			"",
			"    public const double DaysPerWeek = (double) Days / (double) Weeks;",
			"    public const double DaysPerMonth = (double) Days / (double) Months;",
			"}",						
			],
	"description": "Campos const"
	},

	"C# 7.4": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"// compile with: csc -target:library abstractshape.cs",
			"public abstract class Shape",
			"{",
			"    private string name;",
			"",
			"    public Shape(string s)",
			"    {",
			"        // calling the set accessor of the Id property.",
			"        Id = s;",
			"    }",
			"",
			"    public string Id",
			"    {",
			"        get",
			"        {",
			"            return name;",
			"        }",
			"",
			"        set",
			"        {",
			"            name = value;",
			"        }",
			"    }",
			"",
			"    // Area is a read-only property - only a get accessor is needed:",
			"    public abstract double Area",
			"    {",
			"        get;",
			"    }",
			"",
			"    public override string ToString()",
			"    {",
			"        return $''{Id} Area = {Area:F2}'';",
			"    }",
			"}",
			"",
			"",
			"",
			"// compile with: csc -target:library -reference:abstractshape.dll shapes.cs",
			"public class Square : Shape",
			"{",
			"    private int side;",
			"",
			"    public Square(int side, string id)",
			"        : base(id)",
			"    {",
			"        this.side = side;",
			"    }",
			"",
			"    public override double Area",
			"    {",
			"        get",
			"        {",
			"            // Given the side, return the area of a square:",
			"            return side * side;",
			"        }",
			"    }",
			"}",
			"",
			"public class Circle : Shape",
			"{",
			"    private int radius;",
			"",
			"    public Circle(int radius, string id)",
			"        : base(id)",
			"    {",
			"        this.radius = radius;",
			"    }",
			"",
			"    public override double Area",
			"    {",
			"        get",
			"        {",
			"            // Given the radius, return the area of a circle:",
			"            return radius * radius * System.Math.PI;",
			"        }",
			"    }",
			"}",
			"",
			"public class Rectangle : Shape",
			"{",
			"    private int width;",
			"    private int height;",
			"",
			"    public Rectangle(int width, int height, string id)",
			"        : base(id)",
			"    {",
			"        this.width = width;",
			"        this.height = height;",
			"    }",
			"",
			"    public override double Area",
			"    {",
			"        get",
			"        {",
			"            // Given the width and height, return the area of a rectangle:",
			"            return width * height;",
			"        }",
			"    }",
			"}",						
			],
	"description": "Classe base abstract com propriedade abstract que entao sera override por classes derivadas"
	},

	"C# 7.5": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class Employee",
			"{",
			"    private string _name;",
			"    public string Name",
			"    {",
			"        get => _name;",
			"        set => _name = value;",
			"    }",
			"}",
			"",
			"public class Manager : Employee",
			"{",
			"    private string _name;",
			"",
			"    // Notice the use of the new modifier:",
			"    public new string Name",
			"    {",
			"        get => _name;",
			"        set => _name = value + '', Manager'';",
			"    }",
			"}",
			"",
			"class TestHiding",
			"{",
			"    public static void Test()",
			"    {",
			"        Manager m1 = new Manager();",
			"",
			"        // Derived class property.",
			"        m1.Name = ''John'';",
			"",
			"        // Base class property.",
			"        ((Employee)m1).Name = ''Mary'';",
			"",
			"        System.Console.WriteLine(''Name in the derived class is: {0}'', m1.Name);",
			"        System.Console.WriteLine(''Name in the base class is: {0}'', ((Employee)m1).Name);",
			"    }",
			"}",
			"/* Output:",
			"    Name in the derived class is: John, Manager",
			"    Name in the base class is: Mary",
			],
	"description": "Nova implementação com new operador sem o uso de virtual"
	},

	"C# 7.6": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"private string _name = ''Hello'';",
			"",
			"public string Name",
			"{",
			"    get",
			"    {",
			"       return _name;",
			"    }",
			"    protected set",
			"    {",
			"        _name = value;",
			"    }",
			"}",						
			],
	"description": "Propriedade com acessibilidade diferente"
	},

	"C# 7.7": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public ref double GetEstimatedDistance()",
			"{",
			"    return ref estDistance;",
			"}",
			],
	"description": "Valor retornado por ref"
	},

	"C# 7.8": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"ref double distance = ref Planet.GetEstimatedDistance();",
			],
	"description": "ref recebendo uma ref"
	},

	"C# 7.9": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public static class IntExtensions",
			"{",
			"    public static void Increment(this int number)",
			"        => number++;",
			"",
			"    // Take note of the extra ref keyword here",
			"    public static void RefIncrement(this ref int number)",
			"        => number++;",
			"}",
			"",
			"public static class IntProgram",
			"{",
			"    public static void Test()",
			"    {",
			"        int x = 1;",
			"",
			"        // Takes x by value leading to the extension method",
			"        // Increment modifying its own copy, leaving x unchanged",
			"        x.Increment();",
			"        Console.WriteLine($''x is now {x}''); // x is now 1",
			"",
			"        // Takes x by reference leading to the extension method",
			"        // RefIncrement changing the value of x directly",
			"        x.RefIncrement();",
			"        Console.WriteLine($''x is now {x}''); // x is now 2",
			"    }",
			"}",						
			],
	"description": "Metodo de extensao com ref e sem ref"
	},

	"C# 8.1": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public struct Account",
			"{",
			"    public uint id;",
			"    public float balance;",
			"",
			"    private int secret;",
			"}",
			"",
			"public static class AccountExtensions",
			"{",
			"    // ref keyword can also appear before the this keyword",
			"    public static void Deposit(ref this Account account, float amount)",
			"    {",
			"        account.balance += amount;",
			"",
			"        // The following line results in an error as an extension",
			"        // method is not allowed to access private members",
			"        // account.secret = 1; // CS0122",
			"    }",
			"}",
			"",
			"public static class AccountProgram",
			"{",
			"    public static void Test()",
			"    {",
			"        Account account = new()",
			"        {",
			"            id = 1,",
			"            balance = 100f",
			"        };",
			"",
			"        Console.WriteLine($''I have ${account.balance}''); // I have $100",
			"",
			"        account.Deposit(50f);",
			"        Console.WriteLine($''I have ${account.balance}''); // I have $150",
			"    }",
			"}",						
			],
	"description": "Metodo de extensao"
	},

	"C# 8.2": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"namespace CustomExtensions",
			"{",
			"    // Extension methods must be defined in a static class.",
			"    public static class StringExtension",
			"    {",
			"        // This is the extension method.",
			"        // The first parameter takes the ''this'' modifier",
			"        // and specifies the type for which the method is defined.",
			"        public static int WordCount(this string str)",
			"        {",
			"            return str.Split(new char[] {' ', '.','?'}, StringSplitOptions.RemoveEmptyEntries).Length;",
			"        }",
			"    }",
			"}",
			"namespace Extension_Methods_Simple",
			"{",
			"    // Import the extension method namespace.",
			"   using CustomExtensions;",
			"    class Program",
			"    {",
			"        static void Main(string[] args)",
			"        {",
			"            string s = ''The quick brown fox jumped over the lazy dog.'';",
			"            // Call the method as if it were an",
			"            // instance method on the type. Note that the first",
			"            // parameter is not specified by the calling code.",
			"            int i = s.WordCount();",
			"            System.Console.WriteLine(''Word count of s is {0}'', i);",
			"        }",
			"    }",
			"}",
			],
	"description": "Metodo de extensao para string"
	},

	"C# 8.3": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"using System;",
			"",
			"    namespace EnumExtension",
			"    {",
			"        // Define an extension method in a non-nested static class.",
			"        public static class Extensions",
			"    {",
			"        public static Grades minPassing = Grades.D;",
			"        public static bool Passing(this Grades grade)",
			"        {",
			"            return grade >= minPassing;",
			"        }",
			"    }",
			"",
			"    public enum Grades { F = 0, D=1, C=2, B=3, A=4 };",
			"    class Program",
			"    {",
			"        static void Main(string[] args)",
			"        {",
			"            Grades g1 = Grades.D;",
			"            Grades g2 = Grades.F;",
			"            Console.WriteLine(''First {0} a passing grade.'', g1.Passing() ? ''is'' : ''is not'');",
			"           Console.WriteLine(''Second {0} a passing grade.'', g2.Passing() ? ''is'' : ''is not'');",
			"",
			"            Extensions.minPassing = Grades.C;",
			"            Console.WriteLine(''\r\nRaising the bar!\r\n'');",
			"            Console.WriteLine(''First {0} a passing grade.'', g1.Passing() ? ''is'' : ''is not'');",
			"            Console.WriteLine(''Second {0} a passing grade.'', g2.Passing() ? ''is'' : ''is not'');",
			"        }",
			"    }",
			"  }",
			"/* Output:",
			"    First is a passing grade.",
			"    Second is not a passing grade.",
			"",
			"    Raising the bar!",
			"",
			"    First is not a passing grade.",
			"    Second is not a passing grade.",
			],
	"description": "Usando enum"
	},

	"C# 8.4": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"class NamedExample",
			"{",
			"    static void Main(string[] args)",
			"    {",
			"        // The method can be called in the normal way, by using positional arguments.",
			"        PrintOrderDetails(''Gift Shop'', 31, ''Red Mug'');",
			"",
			"        // Named arguments can be supplied for the parameters in any order.",
			"        PrintOrderDetails(orderNum: 31, productName: ''Red Mug'', sellerName: ''Gift Shop'');",
			"        PrintOrderDetails(productName: ''Red Mug'', sellerName: ''Gift Shop'', orderNum: 31);",
			"",
			"        // Named arguments mixed with positional arguments are valid",
			"        // as long as they are used in their correct position.",
			"        PrintOrderDetails(''Gift Shop'', 31, productName: ''Red Mug'');",
			"        PrintOrderDetails(sellerName: ''Gift Shop'', 31, productName: ''Red Mug''); ",
			"        PrintOrderDetails(''Gift Shop'', orderNum: 31, ''Red Mug'');",
			"",
			"        // However, mixed arguments are invalid if used out-of-order.",
			"        // The following statements will cause a compiler error.",
			"        // PrintOrderDetails(productName: ''Red Mug'', 31, ''Gift Shop'');",
			"        // PrintOrderDetails(31, sellerName: ''Gift Shop'', ''Red Mug'');",
			"        // PrintOrderDetails(31, ''Red Mug'', sellerName: ''Gift Shop'');",
			"    }",
			"",
			"    static void PrintOrderDetails(string sellerName, int orderNum, string productName)",
			"    {",
			"        if (string.IsNullOrWhiteSpace(sellerName))",
			"        {",
			"            throw new ArgumentException(message: ''Seller name cannot be null or empty.'', paramName: nameof(sellerName));",
			"        }",
			"",
			"        Console.WriteLine($''Seller: {sellerName}, Order #: {orderNum}, Product: {productName}'');",
			"    }",
			"}",						
			],
	"description": "Argumento nomeado e posicional"
	},

	"C# 8.5": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class Person",
			"{",
			"   private string last;",
			"   private string first;",
			"",
			"   public Person(string lastName, string firstName)",
			"   {",
			"      last = lastName;",
			"      first = firstName;",
			"   }",
			"",
			"   // Remaining implementation of Person class.",
			"}",
			],
	"description": "Construtor simples"
	},

	"C# 8.6": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class Adult : Person",
			"{",
			"   private static int minimumAge;",
			"",
			"   public Adult(string lastName, string firstName) : base(lastName, firstName)",
			"   { }",
			"",
			"   static Adult()",
			"   {",
			"      minimumAge = 18;",
			"   }",
			"",
			"   // Remaining implementation of Adult class.",
			"}",
			],
	"description": "Construtor com : base"
	},

	"C# 8.7": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class Employee",
			"{",
			"    public int Salary;",
			"",
			"    public Employee() { }",
			"",
			"    public Employee(int annualSalary)",
			"    {",
			"        Salary = annualSalary;",
			"    }",
			"",
			"    public Employee(int weeklySalary, int numberOfWeeks)",
			"    {",
			"        Salary = weeklySalary * numberOfWeeks;",
			"    }",
			"}",
			"",
			"",
			"Employee e1 = new Employee(30000);",
			"Employee e2 = new Employee(500, 52);",	
			],
	"description": "Sobrecarga de construtor"
	},


	"C# 8.8": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public Employee(int weeklySalary, int numberOfWeeks)",
			"    : this(weeklySalary * numberOfWeeks)",
			"{",
			"}",			
			],
	"description": "Construtor com : this"
	},

	"C# 8.9": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"abstract class Shape",
			"{",
			"    public const double pi = Math.PI;",
			"    protected double x, y;",
			"",
			"    public Shape(double x, double y)",
			"    {",
			"        this.x = x;",
			"        this.y = y;",
			"    }",
			"",
			"    public abstract double Area();",
			"}",
			"",
			"class Circle : Shape",
			"{",
			"    public Circle(double radius)",
			"        : base(radius, 0)",
			"    {  }",
			"",
			"    public override double Area() => pi * x * x;",
			"}",
			"",
			"class Cylinder : Circle",
			"{",
			"    public Cylinder(double radius, double height)",
			"        : base(radius)",
			"    {",
			"        y = height;",
			"    }",
			"",
			"    public override double Area() => (2 * base.Area()) + (2 * pi * x * y);",
			"}",
			"",
			"class Example",
			"{",
			"    static void Main()",
			"    {",
			"        double radius = 2.5;",
			"        double height = 3.0;",
			"",
			"        var ring = new Circle(radius);",
			"        Console.WriteLine($''Area of the circle = {ring.Area():F2}'');",
			"        // Output: Area of the circle = 19.63",
			"",        
			"        var tube = new Cylinder(radius, height);",
			"        Console.WriteLine($''Area of the cylinder = {tube.Area():F2}'');",
			"        // Output: Area of the cylinder = 86.39",
			"    }",
			"}",						
			],
	"description": "Classe abstract com construtor sendo acessado quando derivado"
	},

	"C# 9.1": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class Bus",
			"{",
			"    // Static variable used by all Bus instances.",
			"   // Represents the time the first bus of the day starts its route.",
			"    protected static readonly DateTime globalStartTime;",
			"",
			"    // Property for the number of each bus.",
			"    protected int RouteNumber { get; set; }",
			"",
			"    // Static constructor to initialize the static variable.",
			"    // It is invoked before the first instance constructor is run.",
			"    static Bus()",
			"    {",
			"        globalStartTime = DateTime.Now;",
			"",
			"        // The following statement produces the first line of output,",
			"        // and the line occurs only once.",
			"        Console.WriteLine(''Static constructor sets global start time to {0}'',",
			"            globalStartTime.ToLongTimeString());",
			"    }",
			"",
			"    // Instance constructor.",
			"    public Bus(int routeNum)",
			"    {",
			"        RouteNumber = routeNum;",
			"        Console.WriteLine(''Bus #{0} is created.'', RouteNumber);",
			"    }",
			"",
			"    // Instance method.",
			"    public void Drive()",
			"    {",
			"        TimeSpan elapsedTime = DateTime.Now - globalStartTime;",
			"",
			"        // For demonstration purposes we treat milliseconds as minutes to simulate",
			"        // actual bus times. Do not do this in your actual bus schedule program!",
			"        Console.WriteLine(''{0} is starting its route {1:N2} minutes after global start time {2}.'',",
			"                                this.RouteNumber,",
			"                                elapsedTime.Milliseconds,",
			"                                globalStartTime.ToShortTimeString());",
			"    }",
			"}",
			"",
			"class TestBus",
			"{",
			"    static void Main()",
			"    {",
			"        // The creation of this instance activates the static constructor.",
			"        Bus bus1 = new Bus(71);",
			"",
			"        // Create a second bus.",
			"        Bus bus2 = new Bus(72);",
			"",
			"        // Send bus1 on its way.",
			"       bus1.Drive();",
			"",
			"        // Wait for bus2 to warm up.",
			"        System.Threading.Thread.Sleep(25);",
			"",
			"        // Send bus2 on its way.",
			"        bus2.Drive();",
			"",
			"        // Keep the console window open in debug mode.",
			"        Console.WriteLine(''Press any key to exit.'');",
			"        Console.ReadKey();",
			"    }",
			"}",			
			],
	"description": "Construtor static"
	},

	"C# 9.2": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"class Car",
			"{",
			"    ~Car()  // finalizer",
			"    {",
			"        // cleanup statements...",
			"    }",
			"}",			
			],
	"description": "Finalizador"
	},

	"C# 9.3": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class Cat",
			"{",
			"    // Auto-implemented properties.",
			"    public int Age { get; set; }",
			"    public string? Name { get; set; }",
			"",
			"    public Cat()",
			"    {",
			"    }",
			"",
			"    public Cat(string name)",
			"    {",
			"        this.Name = name;",
			"    }",
			"}",
			"",
			"",
			"Cat cat = new Cat { Age = 10, Name = ''Fluffy'' };",
			"Cat sameCat = new Cat(''Fluffy''){ Age = 10 };",					
			],
	"description": "As duas sintaxe de inicializador de objeto"
	},

	"C# 9.4": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public class Container",
			"{",
			"    public class Nested",
			"    {",
			"        private Container? parent;",
			"",
			"        public Nested()",
			"        {",
			"        }",
			"        public Nested(Container parent)",
			"        {",
			"            this.parent = parent;",
			"        }",
			"    }",
			"}",			
			],
	"description": "Tipo aninhado"
	},

	"C# 9.5": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public partial class Employee",
			"{",
			"    public void DoWork()",
			"    {",
			"    }",
			"}",
			"",
			"public partial class Employee",
			"{",
			"    public void GoToLunch()",
			"    {",
			"    }",
			"}",	
			],
	"description": "Class partial"
	},

	"C# 9.6": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"// Definition in file1.cs",
			"partial void OnNameChanged();",
			"",
			"// Implementation in file2.cs",
			"partial void OnNameChanged()",
			"{",
			"  // method body",
			"}",
			],
	"description": "Metodos partial"
	},

	"C# 9.7": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"string columns = ''Column 1\tColumn 2\tColumn 3'';",
			"//Output: Column 1        Column 2        Column 3",
			"",
			"string rows = ''Row 1\r\nRow 2\r\nRow 3'';",
			"/* Output:",
			"    Row 1",
			"    Row 2",
			"    Row 3",
			"*/",
			"",
			"string title = ''/''The /u00C6olean Harp/'', by Samuel Taylor Coleridge'';",
			"//Output: ''The Æolean Harp'', by Samuel Taylor Coleridge",
			],
	"description": "literais de cadeia de caracteres entre aspas"
	},


	"C# 9.8": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"string filePath = @'C:/Users/scoleridge/Document/';",
			"//Output: C:/Users/scoleridge/Documents/",
			"",
			"string text = @''My pensive SARA ! thy soft cheek reclined",
			"    Thus on mine arm, most soothing sweet it is",
			"    To sit beside our Cot,...'';",
			"/* Output:",
			"My pensive SARA ! thy soft cheek reclined",
			"    Thus on mine arm, most soothing sweet it is",
			"    To sit beside our Cot,...",
			"*/",
			"",
			"string quote = @''Her name was ''''Sara.'''';",
			"//Output: Her name was ''Sara.''",
			],
	"description": "Literais de cadeia de caracteres textuais"
	},

	"C# 9.9": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"string singleLine = “““Friends say “hello“ as they pass by.“““;",
			"string multiLine = “““",
			"    “Hello World!“ is typically the first program someone writes.",
			"    “““;",
			"string embeddedXML = “““",
			"       <element attr = “content“>",
			"           <body style=“normal“>",
			"               Here is the main text",
			"           </body>",
			"           <footer>",
			"               Excerpts from “An amazing story“",
			"           </footer>",
			"       </element >",
			"       “““;",
			"// The line “<element attr = “content“>“ starts in the first column.",
			"// All whitespace left of that column is removed from the string.",
			"",
			"string rawStringLiteralDelimiter = “““",
			"    Raw string literals are delimited ",
			"    by a string of at least three double quotes,",
			"    like this: “““",
			"    “““;",
			"",	
			],
	"description": "Literais de cadeia de caracteres bruta"
	},

	"C# A 1.1": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"var jh = (firstName: “Jupiter“, lastName: “Hammon“, born: 1711, published: 1761);",
			"Console.WriteLine($“{jh.firstName} {jh.lastName} was an African American poet born in {jh.born}.“);",
			"Console.WriteLine($“He was first published in {jh.published} at the age of {jh.published - jh.born}.“);",
			"Console.WriteLine($“He'd be over {Math.Round((2018d - jh.born) / 100d) * 100d} years old today.“);",
			"",
			"// Output:",
			"// Jupiter Hammon was an African American poet born in 1711.",
			"// He was first published in 1761 at the age of 50.",
			"// He'd be over 300 years old today.",
			],
	"description": "cadeias de caracteres interpoladas "
	},

	"C# A 1.2": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"int X = 2;",
			"int Y = 3;",
			"",
			"var pointMessage = $$“““The point {{{X}}, {{Y}}} is {{Math.Sqrt(X * X + Y * Y)}} from the origin.“““;",
			"",
			"Console.WriteLine(pointMessage);",
			"// Output:",
			"// The point {2, 3} is 3.605551275463989 from the origin.",
			],
	"description": "literais de cadeia de caracteres bruta com interpolações de cadeia de caracteres"
	},
	
	"C# A 1.3": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"var pw = (firstName: “Phillis“, lastName: “Wheatley“, born: 1753, published: 1773);",
			"Console.WriteLine(“{0} {1} was an African American poet born in {2}.“, pw.firstName, pw.lastName, pw.born);",
			"Console.WriteLine(“She was first published in {0} at the age of {1}.“, pw.published, pw.published - pw.born);",
			"Console.WriteLine(“She'd be over {0} years old today.“, Math.Round((2018d - pw.born) / 100d) * 100d);",
			"",
			"// Output:",
			"// Phillis Wheatley was an African American poet born in 1753.",
			"// She was first published in 1773 at the age of 20.",
			"// She'd be over 300 years old today.",
			],
	"description": "Formatação de composição"
	},

	"C# A 1.4": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public delegate void Callback(string message);",
			"",
			"// Create a method for a delegate.",
			"public static void DelegateMethod(string message)",
			"{",
			"    Console.WriteLine(message);",
			"}",
			"",
			"// Instantiate the delegate.",
			"Callback handler = DelegateMethod;",
			"",
			"// Call the delegate.",
			"handler(“Hello World“);",
			],
	"description": "Delegate simples"
	},

	"C# A 1.5": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"var obj = new MethodClass();",
			"Callback d1 = obj.Method1;",
			"Callback d2 = obj.Method2;",
			"Callback d3 = DelegateMethod;",
			"",
			"//Both types of assignment are valid.",
			"Callback allMethodsDelegate = d1 + d2;",
			"allMethodsDelegate += d3;",
			"",
			"",
			"//remove Method1",
			"allMethodsDelegate -= d1;",			
			],
	"description": "Adicionar e remover um metodo a um delegate"
	},

	"C# A 1.6": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"using System;",
			"",
			"class SampleCollection<T>",
			"{",
			"   // Declare an array to store the data elements.",
			"   private T[] arr = new T[100];",
			"",
			"   // Define the indexer to allow client code to use [] notation.",
			"   public T this[int i]",
			"   {",
			"      get { return arr[i]; }",
			"      set { arr[i] = value; }",
			"   }",
			"}",
			"",
			"class Program",
			"{",
			"   static void Main()",
			"   {",
			"      var stringCollection = new SampleCollection<string>();",
			"      stringCollection[0] = “Hello, World“;",
			"      Console.WriteLine(stringCollection[0]);",
			"   }",
			"}",
			"// The example displays the following output:",
			"//       Hello, World.",
			],
	"description": "Indexador simples"
	},

	"C# A 1.7": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"using System;",
			"",
			"class SampleCollection<T>",
			"{",
			"   // Declare an array to store the data elements.",
			"   private T[] arr = new T[100];",
			"   int nextIndex = 0;",
			"",
			"   // Define the indexer to allow client code to use [] notation.",
			"   public T this[int i] => arr[i];",
			"",
			"   public void Add(T value)",
			"   {",
			"      if (nextIndex >= arr.Length)",
			"         throw new IndexOutOfRangeException($“The collection can hold only {arr.Length} elements.“);",
			"      arr[nextIndex++] = value;",
			"   }",
			"}",
			"",
			"class Program",
			"{",
			"   static void Main()",
			"   {",
			"      var stringCollection = new SampleCollection<string>();",
			"      stringCollection.Add(“Hello, World“);",
			"      System.Console.WriteLine(stringCollection[0]);",
			"   }",
			"}",
			"// The example displays the following output:",
			"//       Hello, World.",
			],
	"description": "Indexador somente leitura e com parametro generico"
	},

	"C# A 1.8": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"// Indexer on an interface:",	
			"public interface IIndexInterface",	
			"{",	
			"    // Indexer declaration:",	
			"    int this[int index]",	
			"    {",	
			"        get;",	
			"        set;",	
			"    }",	
			"}",	
			"",
			"// Implementing the interface.",	
			"class IndexerClass : IIndexInterface",	
			"{",	
			"    private int[] arr = new int[100];",	
			"    public int this[int index]   // indexer declaration",	
			"    {",	
			"        // The arr object will throw IndexOutOfRange exception.",	
			"        get => arr[index];",	
			"        set => arr[index] = value;",	
			"    }",	
			"}",		
			],
	"description": "Indexador em uma interface"
	},

	"C# A 1.9": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"static class Constants",
			"{",
			"    public const double Pi = 3.14159;",
			"    public const int SpeedOfLight = 300000; // km per sec.",
			"}",
			"",
			"class Program",
			"{",
			"    static void Main()",
			"    {",
			"        double radius = 5.3;",
			"        double area = Constants.Pi * (radius * radius);",
			"        int secsFromSun = 149476000 / Constants.SpeedOfLight; // in km",
			"        Console.WriteLine(secsFromSun);",
			"    }",
			"}",						
			],
	"description": "Campos const em uma classe static"
	},

	"C# A 2.1": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
			"public interface IControl",
			"{",
			"    void Paint();",
			"}",
			"public interface ISurface",
			"{",
			"    void Paint();",
			"}",
			"public class SampleClass : IControl, ISurface",
			"{",
			"    // Both ISurface.Paint and IControl.Paint call this method.",
			"    public void Paint()",
			"    {",
			"        Console.WriteLine(“Paint method in SampleClass“);",
			"    }",
			"}",
			"",
			"",
			"var sample = new SampleClass();",
			"//sample.Paint();// “Paint“ isn't accessible.",
			"var control = sample as IControl;",
			"control.Paint();",	
			],
	"description": "implementação de interface explícita"
	},

	"C# a 2.2": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
				"static class ParamsExample\r\n{\r\n    static void Main()\r\n    {\r\n        string fromArray = GetVowels([\"apple\", \"banana\", \"pear\"]);\r\n        Console.WriteLine($\"Vowels from array: '{fromArray}'\");\r\n\r\n        string fromMultipleArguments = GetVowels(\"apple\", \"banana\", \"pear\");\r\n        Console.WriteLine($\"Vowels from multiple arguments: '{fromMultipleArguments}'\");\r\n\r\n        string fromNull = GetVowels(null);\r\n        Console.WriteLine($\"Vowels from null: '{fromNull}'\");\r\n\r\n        string fromNoValue = GetVowels();\r\n        Console.WriteLine($\"Vowels from no value: '{fromNoValue}'\");\r\n    }\r\n\r\n    static string GetVowels(params string[]? input)\r\n    {\r\n        if (input == null || input.Length == 0)\r\n        {\r\n            return string.Empty;\r\n        }\r\n\r\n        char[] vowels = ['A', 'E', 'I', 'O', 'U'];\r\n        return string.Concat(\r\n            input.SelectMany(\r\n                word => word.Where(letter => vowels.Contains(char.ToUpper(letter)))));\r\n    }\r\n}\r\n\r\n// The example displays the following output:\r\n//     Vowels from array: 'aeaaaea'\r\n//     Vowels from multiple arguments: 'aeaaaea'\r\n//     Vowels from null: ''\r\n//     Vowels from no value: ''"		
			],
	"description": "Uso params"
	},

				/*"C# ??": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
	.
						
	.
			],
	"description": ""
	},*/

				/*"C# ??": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
	.
						
	.
			],
	"description": ""
	},*/

				/*"C# ??": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
	.
						
	.
			],
	"description": ""
	},*/

				/*"C# ??": {
	"scope": "csharp",
	"prefix": "_codigo",
		"body": [
	.
						
	.
			],
	"description": ""
	},*/
}